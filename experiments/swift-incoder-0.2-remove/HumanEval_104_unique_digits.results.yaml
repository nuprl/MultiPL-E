language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        }\n    }\n \
    \   for n in x {\n        if evenDigit == 0 {\n            result.append(n)\n\
    \        }\n        if evenDigit > 0 && n % 2 == 0 {\n            evenDigit -=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpg6v5sw2h/tmpg6v5sw2h.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b896d8bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b896d5b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b896d5b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b896d5b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6v5sw2h                        0x000055a558fdd67c <unavailable> + 5756

    5    libc.so.6                          0x00002b896daa6460 __libc_start_main +
    245

    6    tmpg6v5sw2h                        0x000055a558fdd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = false\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            evenDigit = true\n        }\n    \
    \    if evenDigit {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpo1ax4snb/tmpo1ax4snb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4da2563c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4da225ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4da225a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4da22597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo1ax4snb                        0x000055da1229f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4da274f460 __libc_start_main +
    245

    6    tmpo1ax4snb                        0x000055da1229f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  for m in odd {\n            if n == m {\n                continue\n       \
    \     }\n            if n % m == 0 {\n                result.append(n)\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmuudelui/tmpmuudelui.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2fba91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2fb788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2fb788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2fb7877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmuudelui                        0x0000562cd83606ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac2fbc7d460 __libc_start_main +
    245

    6    tmpmuudelui                        0x0000562cd83602e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if !contains(result, evenDigits) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyp5pm966.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptwcuh4jk/tmptwcuh4jk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba430f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba42defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba42def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba42dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwcuh4jk                        0x0000560d2e5876ec <unavailable> + 5868

    5    libc.so.6                          0x00002aba432e4460 __libc_start_main +
    245

    6    tmptwcuh4jk                        0x0000560d2e5872e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit += 1\n        }\n\
    \    }\n    for element in x {\n        if element % 2 != 0 && evenDigit == 0\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpo7v76g86/tmpo7v76g86.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79db819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79db510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79db510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79db50f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7v76g86                        0x000055db1a4bc67c <unavailable> + 5756

    5    libc.so.6                          0x00002b79dba05460 __libc_start_main +
    245

    6    tmpo7v76g86                        0x000055db1a4bc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = false\n    for x in\
    \ x {\n        if x % 2 == 0 {\n            evenDigit = true\n        } else {\n\
    \            if evenDigit {\n                result.append(x)\n            }\n\
    \            evenDigit = false\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpj70tu3y1/tmpj70tu3y1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4811d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4811a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4811a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4811a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj70tu3y1                        0x0000557c18bb967c <unavailable> + 5756

    5    libc.so.6                          0x00002b4811f0e460 __libc_start_main +
    245

    6    tmpj70tu3y1                        0x0000557c18bb9279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in x {\n        if x % 2 ==\
    \ 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprasbywkp/tmprasbywkp.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3279bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb32492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb32492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb324917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprasbywkp                        0x0000560d7d5c567c <unavailable> + 5756

    5    libc.so.6                          0x00002abb32987460 __libc_start_main +
    245

    6    tmprasbywkp                        0x0000560d7d5c5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit += [n]\n        } else\
    \ {\n            result += [n]\n        }\n    }\n    for n in evenDigit {\n \
    \       result.removeAll(n) // remove all even digit from result\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr0qhjzih.swift:17:16: error: no exact matches in call to instance\
    \ method 'removeAll'\n        result.removeAll(n) // remove all even digit from\
    \ result\n               ^\n/tmp/tmpr0qhjzih.swift:17:16: note: candidate expects\
    \ value of type '(Int) throws -> Bool' for parameter #1 (got 'Int')\n        result.removeAll(n)\
    \ // remove all even digit from result\n               ^\n/tmp/tmpr0qhjzih.swift:17:16:\
    \ note: candidate expects value of type '(Int) throws -> Bool' for parameter #1\
    \ (got 'Int')\n        result.removeAll(n) // remove all even digit from result\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigitCount = 0\n    var evenDigits\
    \ = Set<Int>()\n    for n in x {\n        if n % 2 == 0 {\n            evenDigits.insert(n)\n\
    \            evenDigitCount += 1\n        }\n    }\n    for n in x {\n       \
    \ if evenDigits.contains(n) {\n            continue\n        }\n        if evenDigitCount\
    \ > 0 {\n            result.insert(n)\n            evenDigitCount -= 1\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwjz4st_g.swift:21:28: error: missing argument for parameter 'at'\
    \ in call\n            result.insert(n)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    \n \
    \   for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            if !contains(result, evenDigits) {\n          \
    \      result.append(n)\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpoinbta3p.swift:14:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append()\n        }\n\
    \    }\n    for n in evenDigit {\n        if result.contains(n) {\n          \
    \  continue\n        }\n        result.append(n)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp76efp9i1.swift:11:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit += 1\n        }\
    \ else {\n            if evenDigit > 0 {\n                result.append(element)\n\
    \            }\n            evenDigit = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpc8n5pjfo/tmpc8n5pjfo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c2393fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c23636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c23636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c236357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8n5pjfo                        0x000055723036367c <unavailable> + 5756

    5    libc.so.6                          0x00002b9c23b2b460 __libc_start_main +
    245

    6    tmpc8n5pjfo                        0x0000557230363279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            even.append(x)\n        } else {\n \
    \           result.append(x)\n        }\n    }\n    for x in even {\n        result.remove(x)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpl8t1a4xc.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(x)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index += 1\n        }\n    }\n    return result.sorted(by: <)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb99a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb9973c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeb9973c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeb9973c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeb9973bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeb9953b7ec <unavailable> + 186348

    6    tmptlortyjy                        0x000055ef87978c87 <unavailable> + 7303

    7    tmptlortyjy                        0x000055ef8797860c <unavailable> + 5644

    8    libc.so.6                          0x00002aeb99c31460 __libc_start_main +
    245

    9    tmptlortyjy                        0x000055ef879782e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var i = 0\n\
    \    for element in x {\n        if element % 2 == 0 {\n            even.append(element)\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in even {\n        result.remove(at: i)\n        i += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz0dddyua/tmpz0dddyua.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d59d5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d59a53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d59a53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d59a527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0dddyua                        0x0000557dc51ba6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b7d59f48460 __libc_start_main +
    245

    6    tmpz0dddyua                        0x0000557dc51ba2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index++\n\
    \        }\n    }\n    return result.sort()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpstz5luob.swift:12:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpstz5luob.swift:15:19:\
    \ error: cannot convert return expression of type '()' to return type '[Int]'\n\
    \    return result.sort()\n           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1mia8qkr/tmp1mia8qkr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mia8qkr                        0x000055cf62a2e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b66bd783460 __libc_start_main +
    245

    6    tmp1mia8qkr                        0x000055cf62a2e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num % 2\
    \ == 0 {\n            result.append(num)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp34q_5kx1/tmp34q_5kx1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af93b963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af93b65ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af93b65a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af93b6597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34q_5kx1                        0x00005619bac4c79c <unavailable> + 6044

    5    libc.so.6                          0x00002af93bb4f460 __libc_start_main +
    245

    6    tmp34q_5kx1                        0x00005619bac4c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) == false {\n            result.append(n)\n\
    \        }\n    }\n    for n in odd {\n        if result.contains(n) == false\
    \ {\n            result.append(n)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1y6ct3rz/tmp1y6ct3rz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb94a6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb94761b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb94761988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb947607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1y6ct3rz                        0x000055db510e16ec <unavailable> + 5868

    5    libc.so.6                          0x00002afb94c56460 __libc_start_main +
    245

    6    tmp1y6ct3rz                        0x000055db510e12e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            last = x\n        } else {\n       \
    \     if last != 0 {\n                result.append(last)\n            }\n   \
    \         last = 0\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0vez6yzq/tmp0vez6yzq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a252dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a24fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a24fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a24fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vez6yzq                        0x000055be386fb67c <unavailable> + 5756

    5    libc.so.6                          0x00002b0a254cb460 __libc_start_main +
    245

    6    tmp0vez6yzq                        0x000055be386fb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if !contains(result, evenDigits) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyp5pm966.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\
    \ else {\n            if evenDigit.count > 0 {\n                result.appendContentsOf(evenDigit)\n\
    \            }\n            evenDigit.removeAll()\n        }\n    }\n    if evenDigit.count\
    \ > 0 {\n        result.appendContentsOf(evenDigit)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp17xz65ku.swift:14:24: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n                result.appendContentsOf(evenDigit)\n   \
    \             ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp17xz65ku.swift:20:16: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n        result.appendContentsOf(evenDigit)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastDigit = x.last!\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            lastDigit = lastDigit % 10\n  \
    \      } else {\n            if lastDigit % 2 == 0 {\n                lastDigit\
    \ = lastDigit / 10\n            } else {\n                result.append(n)\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp86i7s5q/tmpp86i7s5q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76125d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76122ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76122cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76122cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp86i7s5q                        0x000055e8ec53171c <unavailable> + 5916

    5    libc.so.6                          0x00002b76127c1460 __libc_start_main +
    245

    6    tmpp86i7s5q                        0x000055e8ec531319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index++\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2y0mk2k4.swift:12:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n \
    \           if evenDigit > 0 {\n                result.append(n)\n           \
    \     evenDigit -= 1\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpivtqkomg/tmpivtqkomg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeecde39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeecdb30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeecdb30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeecdb2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivtqkomg                        0x0000556e8194967c <unavailable> + 5756

    5    libc.so.6                          0x00002aeece025460 __libc_start_main +
    245

    6    tmpivtqkomg                        0x0000556e81949279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           if even.contains(n) == false {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqpxz7xgs/tmpqpxz7xgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de5be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de58d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de58d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de58d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpxz7xgs                        0x000056462b5416ec <unavailable> + 5868

    5    libc.so.6                          0x00002b0de5dce460 __libc_start_main +
    245

    6    tmpqpxz7xgs                        0x000056462b5412e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\
    \ else {\n            if !contains(result, evenDigit) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5iiu52ps.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigit) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1abc55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ab94c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1ab94c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1ab94c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1ab94bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae1ab74b7ec <unavailable> + 186348

    6    tmp7ko0uhh7                        0x0000556212b32d1e <unavailable> + 7454

    7    tmp7ko0uhh7                        0x0000556212b326bc <unavailable> + 5820

    8    libc.so.6                          0x00002ae1abe41460 __libc_start_main +
    245

    9    tmp7ko0uhh7                        0x0000556212b32399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e % e == 0\
    \ {\n                    result.append(n)\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdmgtgdg5/tmpdmgtgdg5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad823fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad823ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad823ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad823ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmgtgdg5                        0x0000564813e0d67c <unavailable> + 5756

    5    libc.so.6                          0x00002ad824197460 __libc_start_main +
    245

    6    tmpdmgtgdg5                        0x0000564813e0d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ evenDigits {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpuid8q7y0.swift:18:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    var evenDigitCount\
    \ = 0\n    for element in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \            evenDigitCount += 1\n        }\n    }\n    for element in evenDigit\
    \ {\n        if evenDigitCount > 0 {\n            for index in 0..<evenDigitCount\
    \ {\n                if element == evenDigit[index] {\n                    result.append(element)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpomcgc2bi/tmpomcgc2bi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8a83d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8a80cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8a80cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8a80cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomcgc2bi                        0x000055b5fadf57cc <unavailable> + 6092

    5    libc.so.6                          0x00002ae8a85c2460 __libc_start_main +
    245

    6    tmpomcgc2bi                        0x000055b5fadf53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastEvenDigit: Int = 0\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n        }\
    \ else {\n            if lastEvenDigit != 0 {\n                result.insert(lastEvenDigit,\
    \ at: 0)\n            }\n            lastEvenDigit = 0\n        }\n    }\n   \
    \ if lastEvenDigit != 0 {\n        result.insert(lastEvenDigit, at: 0)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp43i4n1lm/tmp43i4n1lm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586e3f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b586e0e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b586e0e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b586e0e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43i4n1lm                        0x0000555e712c467c <unavailable> + 5756

    5    libc.so.6                          0x00002b586e5dd460 __libc_start_main +
    245

    6    tmp43i4n1lm                        0x0000555e712c4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for x in x {\n \
    \       if x % 2 == 0 {\n            last = last * 10 + x\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = x\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplh1mhoom/tmplh1mhoom.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dbe4d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dbe1c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dbe1c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dbe1c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh1mhoom                        0x0000564a5788867c <unavailable> + 5756

    5    libc.so.6                          0x00002b2dbe6bc460 __libc_start_main +
    245

    6    tmplh1mhoom                        0x0000564a57888279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e % e == 0\
    \ {\n                    result.append(n)\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdmgtgdg5/tmpdmgtgdg5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad823fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad823ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad823ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad823ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmgtgdg5                        0x0000564813e0d67c <unavailable> + 5756

    5    libc.so.6                          0x00002ad824197460 __libc_start_main +
    245

    6    tmpdmgtgdg5                        0x0000564813e0d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for n in x {\n    \
    \    if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n    for\
    \ n in result {\n        if n % 2 != 0 {\n            result.removeAll()\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmt2mz637/tmpmt2mz637.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9328fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa92f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa92f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa92f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmt2mz637                        0x00005614761d275c <unavailable> + 5980

    5    libc.so.6                          0x00002afa9347b460 __libc_start_main +
    245

    6    tmpmt2mz637                        0x00005614761d2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result.append(element)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpiunqinvi/tmpiunqinvi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac154f18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac154c0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac154c0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac154c0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiunqinvi                        0x000055878d37979c <unavailable> + 6044

    5    libc.so.6                          0x00002ac155104460 __libc_start_main +
    245

    6    tmpiunqinvi                        0x000055878d379399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for element in x {\n        if element % 2 == 0 {\n           \
    \ even.append(element)\n        } else {\n            odd.append(element)\n  \
    \      }\n    }\n    for element in even {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    for element in\
    \ odd {\n        if !contains(result, element) {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6ft4q8yo.swift:18:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmp6ft4q8yo.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, element)\
    \ {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            evenDigits.append(element)\n\
    \        }\n    }\n    for element in evenDigits {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvj43lej3.swift:15:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1abc55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ab94c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1ab94c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1ab94c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1ab94bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae1ab74b7ec <unavailable> + 186348

    6    tmp7ko0uhh7                        0x0000556212b32d1e <unavailable> + 7454

    7    tmp7ko0uhh7                        0x0000556212b326bc <unavailable> + 5820

    8    libc.so.6                          0x00002ae1abe41460 __libc_start_main +
    245

    9    tmp7ko0uhh7                        0x0000556212b32399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    result.append(n)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpthmm16kq/tmpthmm16kq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f20dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f1dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f1dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f1dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthmm16kq                        0x000055c4757aa67c <unavailable> + 5756

    5    libc.so.6                          0x00002af2f22ca460 __libc_start_main +
    245

    6    tmpthmm16kq                        0x000055c4757aa279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd  =\
    \ [Int]()\n    var xLen = x.count\n    for i in 0..<xLen {\n        if x[i] %\
    \ 2 == 0 {\n            even.append(x[i])\n        } else {\n            odd.append(x[i])\n\
    \        }\n    }\n    for i in 0..<xLen {\n        if even.contains(i) {\n  \
    \          continue\n        }\n        if odd.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpy2mofth8/tmpy2mofth8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7438efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7435e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7435e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7435e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2mofth8                        0x0000564763bf071c <unavailable> + 5916

    5    libc.so.6                          0x00002ad743adb460 __libc_start_main +
    245

    6    tmpy2mofth8                        0x0000564763bf0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for d in evenDigits {\n                if d == n {\n\
    \                    break\n                }\n            }\n            if !result.contains(d)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpiwr2mqbq.swift:18:33: error: cannot find 'd' in scope\n       \
    \     if !result.contains(d) {\n                                ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            even.append(element)\n  \
    \      } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in even {\n        result.remove(at: result.index(of: element))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpke4xjiwp.swift:17:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmpke4xjiwp.swift:17:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmpke4xjiwp.swift:17:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfnq8uea_/tmpfnq8uea_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace40555c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace4024cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace4024c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace4024b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnq8uea_                        0x000055667040e79c <unavailable> + 6044

    5    libc.so.6                          0x00002ace40741460 __libc_start_main +
    245

    6    tmpfnq8uea_                        0x000055667040e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            last = last * 10 + n\n        } else\
    \ {\n            if last > 0 {\n                result.append(last)\n        \
    \    }\n            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbcntqd1a/tmpbcntqd1a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbf6487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbf617eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbf617e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbf617d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcntqd1a                        0x0000559f8efc667c <unavailable> + 5756

    5    libc.so.6                          0x00002afbf6673460 __libc_start_main +
    245

    6    tmpbcntqd1a                        0x0000559f8efc6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if !contains(result, evenDigits) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyp5pm966.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 == 0 {\n         \
    \   result.removeAll(where: { $0 == element })\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1yu11zhn/tmp1yu11zhn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75a5201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75a4ef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75a4ef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75a4ef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1yu11zhn                        0x000055dcde4e677c <unavailable> + 6012

    5    libc.so.6                          0x00002b75a53ed460 __libc_start_main +
    245

    6    tmp1yu11zhn                        0x000055dcde4e6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastEvenDigit = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n        } else\
    \ {\n            if lastEvenDigit > 0 {\n                result.append(lastEvenDigit)\n\
    \            }\n            lastEvenDigit = 0\n        }\n    }\n    if lastEvenDigit\
    \ > 0 {\n        result.append(lastEvenDigit)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpep5xugwq/tmpep5xugwq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8cd087c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ccd7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ccd7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ccd7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpep5xugwq                        0x000056059412867c <unavailable> + 5756

    5    libc.so.6                          0x00002ba8cd273460 __libc_start_main +
    245

    6    tmpep5xugwq                        0x0000560594128279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptwcuh4jk/tmptwcuh4jk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba430f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba42defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba42def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba42dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwcuh4jk                        0x0000560d2e5876ec <unavailable> + 5868

    5    libc.so.6                          0x00002aba432e4460 __libc_start_main +
    245

    6    tmptwcuh4jk                        0x0000560d2e5872e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1abc55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ab94c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1ab94c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1ab94c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1ab94bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae1ab74b7ec <unavailable> + 186348

    6    tmp7ko0uhh7                        0x0000556212b32d1e <unavailable> + 7454

    7    tmp7ko0uhh7                        0x0000556212b326bc <unavailable> + 5820

    8    libc.so.6                          0x00002ae1abe41460 __libc_start_main +
    245

    9    tmp7ko0uhh7                        0x0000556212b32399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            evenDigit += 1\n        }\n    }\n \
    \   for x in x {\n        if x % 2 == 0 {\n            if evenDigit == 0 {\n \
    \               result.append(x)\n            }\n            evenDigit -= 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3okfl7zy/tmp3okfl7zy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af629b9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af629891b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af629891988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6298907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3okfl7zy                        0x0000563dd9bdc67c <unavailable> + 5756

    5    libc.so.6                          0x00002af629d86460 __libc_start_main +
    245

    6    tmp3okfl7zy                        0x0000563dd9bdc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    result.append(n)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpthmm16kq/tmpthmm16kq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f20dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f1dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f1dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f1dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthmm16kq                        0x000055c4757aa67c <unavailable> + 5756

    5    libc.so.6                          0x00002af2f22ca460 __libc_start_main +
    245

    6    tmpthmm16kq                        0x000055c4757aa279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    result.append(e)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvxfz8dur/tmpvxfz8dur.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1169416c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b116910db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b116910d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b116910c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxfz8dur                        0x00005630d18c867c <unavailable> + 5756

    5    libc.so.6                          0x00002b1169602460 __libc_start_main +
    245

    6    tmpvxfz8dur                        0x00005630d18c8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            last = x\n        } else {\n       \
    \     if last != 0 {\n                result.append(last)\n            }\n   \
    \         last = 0\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0vez6yzq/tmp0vez6yzq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a252dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a24fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a24fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a24fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vez6yzq                        0x000055be386fb67c <unavailable> + 5756

    5    libc.so.6                          0x00002b0a254cb460 __libc_start_main +
    245

    6    tmp0vez6yzq                        0x000055be386fb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptwcuh4jk/tmptwcuh4jk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba430f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba42defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba42def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba42dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwcuh4jk                        0x0000560d2e5876ec <unavailable> + 5868

    5    libc.so.6                          0x00002aba432e4460 __libc_start_main +
    245

    6    tmptwcuh4jk                        0x0000560d2e5872e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\
    \ else {\n            result.append(n)\n        }\n    }\n    for n in evenDigit\
    \ {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyo9_4ud1.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  for m in odd {\n            if n == m {\n                continue\n       \
    \     }\n            if n % m == 0 {\n                result.append(n)\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmuudelui/tmpmuudelui.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2fba91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2fb788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2fb788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2fb7877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmuudelui                        0x0000562cd83606ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac2fbc7d460 __libc_start_main +
    245

    6    tmpmuudelui                        0x0000562cd83602e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1mia8qkr/tmp1mia8qkr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mia8qkr                        0x000055cf62a2e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b66bd783460 __libc_start_main +
    245

    6    tmp1mia8qkr                        0x000055cf62a2e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\n\
    \    }\n    for n in evenDigit {\n        if result.contains(n) {\n          \
    \  continue\n        }\n        result.append(n)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9_38qxqz/tmp9_38qxqz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b927353ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9273231b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9273231988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92732307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_38qxqz                        0x000055cab7b166ec <unavailable> + 5868

    5    libc.so.6                          0x00002b9273726460 __libc_start_main +
    245

    6    tmp9_38qxqz                        0x000055cab7b162e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    var\
    \ evenDigitsCount = 0\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigits.append(n)\n            evenDigitsCount += 1\n        }\n    }\n \
    \   for n in evenDigits {\n        if evenDigitsCount > 0 {\n            for _\
    \ in 0..<(evenDigitsCount - 1) {\n                result.append(0)\n         \
    \   }\n        }\n        result.append(n)\n        evenDigitsCount -= 1\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfy7ldzkd/tmpfy7ldzkd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f79600c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f792f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f792f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f792f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy7ldzkd                        0x00005592c44d076c <unavailable> + 5996

    5    libc.so.6                          0x00002b3f797ec460 __libc_start_main +
    245

    6    tmpfy7ldzkd                        0x00005592c44d0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    \n \
    \   for i in x {\n        if i % 2 == 0 {\n            evenDigits.append(i)\n\
    \        }\n    }\n    \n    for i in evenDigits {\n        if !contains(result,\
    \ i) {\n            result.append(i)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmyyc4pig.swift:17:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1mia8qkr/tmp1mia8qkr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mia8qkr                        0x000055cf62a2e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b66bd783460 __libc_start_main +
    245

    6    tmp1mia8qkr                        0x000055cf62a2e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var i = 0\n\
    \    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n     \
    \   } else {\n            result.append(n)\n        }\n    }\n    for n in even\
    \ {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsvtktuha.swift:18:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n \
    \           if evenDigit == 0 {\n                result.append(n)\n          \
    \  }\n            evenDigit = 0\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjczmrwae/tmpjczmrwae.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add6ca91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add6c788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add6c788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add6c7877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjczmrwae                        0x0000561c9e81c67c <unavailable> + 5756

    5    libc.so.6                          0x00002add6cc7d460 __libc_start_main +
    245

    6    tmpjczmrwae                        0x0000561c9e81c279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) {\n            continue\n        } else {\n\
    \            result.append(n)\n        }\n    }\n    for n in odd {\n        if\
    \ result.contains(n) {\n            continue\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfmofc8j0/tmpfmofc8j0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b54476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmofc8j0                        0x00005571bda316ec <unavailable> + 5868

    5    libc.so.6                          0x00002b1b54662460 __libc_start_main +
    245

    6    tmpfmofc8j0                        0x00005571bda312e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    result.append(n)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpthmm16kq/tmpthmm16kq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f20dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f1dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f1dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f1dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthmm16kq                        0x000055c4757aa67c <unavailable> + 5756

    5    libc.so.6                          0x00002af2f22ca460 __libc_start_main +
    245

    6    tmpthmm16kq                        0x000055c4757aa279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    var evenDigitCount\
    \ = 0\n    for element in x {\n        if element % 2 == 0 {\n            evenDigitCount++\n\
    \        } else {\n            evenDigit = 0\n            evenDigitCount = 0\n\
    \        }\n        if evenDigitCount > 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9pxh_rep.swift:12:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenDigitCount++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    \n \
    \   for i in x {\n        if i % 2 == 0 {\n            evenDigits.append(i)\n\
    \        } else {\n            if !contains(evenDigits, i) {\n               \
    \ result.append(i)\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt79d5_dy.swift:14:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           if !contains(result, n) {\n                result.append(n)\n    \
    \        }\n        }\n    }\n    for n in even {\n        if !contains(result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjpn57fxe.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmpjpn57fxe.swift:19:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1mia8qkr/tmp1mia8qkr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mia8qkr                        0x000055cf62a2e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b66bd783460 __libc_start_main +
    245

    6    tmp1mia8qkr                        0x000055cf62a2e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzz4dr7sg/tmpzz4dr7sg.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb38df7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb38aeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb38aee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb38aed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz4dr7sg                        0x00005555d788d71c <unavailable> + 5916

    5    libc.so.6                          0x00002acb38fe3460 __libc_start_main +
    245

    6    tmpzz4dr7sg                        0x00005555d788d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for x in x {\n \
    \       if x % 2 == 0 {\n            last = last * 10 + x\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = x\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplh1mhoom/tmplh1mhoom.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dbe4d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dbe1c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dbe1c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dbe1c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh1mhoom                        0x0000564a5788867c <unavailable> + 5756

    5    libc.so.6                          0x00002b2dbe6bc460 __libc_start_main +
    245

    6    tmplh1mhoom                        0x0000564a57888279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n \
    \           if evenDigit > 0 {\n                result.append(n)\n           \
    \     evenDigit = 0\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprqcw8cjz/tmprqcw8cjz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494c5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494c2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494c2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494c2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqcw8cjz                        0x0000556c6e69f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b494c7d8460 __libc_start_main +
    245

    6    tmprqcw8cjz                        0x0000556c6e69f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index++\n        }\n    }\n    result.sort()\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdm0oguk7.swift:12:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append((last / 10) % 10)\n\
    \                last = last % 10\n            }\n        }\n    }\n    if last\
    \ > 0 {\n        result.append((last / 10) % 10)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpag7bu606/tmpag7bu606.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5e3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb5e0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb5e0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb5e0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpag7bu606                        0x000055d06857867c <unavailable> + 5756

    5    libc.so.6                          0x00002acb5e5e7460 __libc_start_main +
    245

    6    tmpag7bu606                        0x000055d068578279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var i = 0\n\
    \    for element in x {\n        if element % 2 == 0 {\n            even.append(element)\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in even {\n        result.remove(at: i)\n        i += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz0dddyua/tmpz0dddyua.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d59d5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d59a53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d59a53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d59a527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0dddyua                        0x0000557dc51ba6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b7d59f48460 __libc_start_main +
    245

    6    tmpz0dddyua                        0x0000557dc51ba2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            result.append(n)\n        }\n    }\n    for n in evenDigits\
    \ {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqvt28tr8.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1mia8qkr/tmp1mia8qkr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mia8qkr                        0x000055cf62a2e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b66bd783460 __libc_start_main +
    245

    6    tmp1mia8qkr                        0x000055cf62a2e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            last = last * 10 + x\n        } else\
    \ {\n            if last > 0 {\n                result.append(last)\n        \
    \    }\n            last = x\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptbdshrco/tmptbdshrco.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab46be2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab46bb26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab46bb26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab46bb257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbdshrco                        0x00005633bff9a67c <unavailable> + 5756

    5    libc.so.6                          0x00002ab46c01b460 __libc_start_main +
    245

    6    tmptbdshrco                        0x00005633bff9a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            even.append(element)\n  \
    \      } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in even {\n        result.remove(at: result.index(of: element))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpke4xjiwp.swift:17:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmpke4xjiwp.swift:17:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmpke4xjiwp.swift:17:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n \
    \           if evenDigit > 0 {\n                result.append(n)\n           \
    \     evenDigit = 0\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprqcw8cjz/tmprqcw8cjz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494c5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494c2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494c2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494c2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqcw8cjz                        0x0000556c6e69f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b494c7d8460 __libc_start_main +
    245

    6    tmprqcw8cjz                        0x0000556c6e69f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if !contains(result, evenDigits) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyp5pm966.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    break\n                }\n            }\n            if result.contains(n)\
    \ {\n                continue\n            }\n            result.append(n)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsrt6ijjd/tmpsrt6ijjd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64ef2a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64eef9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64eef9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64eef997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrt6ijjd                        0x000055ff8cffd6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b64ef48f460 __libc_start_main +
    245

    6    tmpsrt6ijjd                        0x000055ff8cffd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append()\n        }\n\
    \    }\n    for n in evenDigit {\n        if result.contains(n) {\n          \
    \  continue\n        }\n        result.append(n)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp76efp9i1.swift:11:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfc753tmx/tmpfc753tmx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0144ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0144befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0144bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0144bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc753tmx                        0x0000559b193d067c <unavailable> + 5756

    5    libc.so.6                          0x00002b01450e4460 __libc_start_main +
    245

    6    tmpfc753tmx                        0x0000559b193d0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in x {\n        if x.isMultiple(2)\
    \ == false {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmptohy698d.swift:9:14: error: no exact matches in call to instance\
    \ method 'isMultiple'\n        if x.isMultiple(2) == false {\n             ^\n\
    Swift.SignedInteger:6:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(of:)')\n    @inlinable public func isMultiple(of other: Self) ->\
    \ Bool\n                           ^\nSwift.BinaryInteger:7:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(of:)')\n    @inlinable public\
    \ func isMultiple(of other: Self) -> Bool\n                           ^\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d6af0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d67e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4d67e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4d67e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4d67e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab4d65e87ec <unavailable> + 186348

    6    tmp3nw4tzoo                        0x000056259d57eca4 <unavailable> + 7332

    7    tmp3nw4tzoo                        0x000056259d57e63c <unavailable> + 5692

    8    libc.so.6                          0x00002ab4d6cdc460 __libc_start_main +
    245

    9    tmp3nw4tzoo                        0x000056259d57e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in evenDigit {\n        result.remove(at: result.index(of: element))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3ecdymjj.swift:17:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmp3ecdymjj.swift:17:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmp3ecdymjj.swift:17:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for d in evenDigits {\n                if d == n {\n\
    \                    break\n                }\n            }\n            if !result.contains(d)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpiwr2mqbq.swift:18:33: error: cannot find 'd' in scope\n       \
    \     if !result.contains(d) {\n                                ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in x {\n        if x % 2 ==\
    \ 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprasbywkp/tmprasbywkp.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3279bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb32492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb32492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb324917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprasbywkp                        0x0000560d7d5c567c <unavailable> + 5756

    5    libc.so.6                          0x00002abb32987460 __libc_start_main +
    245

    6    tmprasbywkp                        0x0000560d7d5c5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aec85b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec85842561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aec85842286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aec8584213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aec85841bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aec856417ec <unavailable> + 186348

    6    tmpnwmrh6cl                        0x0000556e65d66bfe <unavailable> + 7166

    7    tmpnwmrh6cl                        0x0000556e65d6659c <unavailable> + 5532

    8    libc.so.6                          0x00002aec85d37460 __libc_start_main +
    245

    9    tmpnwmrh6cl                        0x0000556e65d66279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n\
    \            if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1mia8qkr/tmp1mia8qkr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mia8qkr                        0x000055cf62a2e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b66bd783460 __libc_start_main +
    245

    6    tmp1mia8qkr                        0x000055cf62a2e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\
    \ else {\n            result.append(n)\n        }\n    }\n    for n in evenDigit\
    \ {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyo9_4ud1.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd  =\
    \ [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    \n    for\
    \ n in even {\n        if result.contains(n) {\n            continue\n       \
    \ }\n        result.append(n)\n    }\n    \n    for n in odd {\n        if result.contains(n)\
    \ {\n            continue\n        }\n        result.append(n)\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpv8z1g2b5/tmpv8z1g2b5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b679e6aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b679e3a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b679e3a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b679e3a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8z1g2b5                        0x00005582cfc616ec <unavailable> + 5868

    5    libc.so.6                          0x00002b679e896460 __libc_start_main +
    245

    6    tmpv8z1g2b5                        0x00005582cfc612e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastDigit: Int = 0\n    for n\
    \ in x {\n        if n % 10 == 0 {\n            lastDigit = n % 10\n        }\
    \ else {\n            if lastDigit % 2 == 0 {\n                result.append(n)\n\
    \            }\n            lastDigit = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpme2_ie5k/tmpme2_ie5k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60ef7efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60ef4e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60ef4e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60ef4e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpme2_ie5k                        0x000055ad0488f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b60ef9db460 __libc_start_main +
    245

    6    tmpme2_ie5k                        0x000055ad0488f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgv3ld80n.swift:15:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            result[index] = element\n  \
    \          index += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1abc55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ab94c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1ab94c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1ab94c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1ab94bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae1ab74b7ec <unavailable> + 186348

    6    tmp7ko0uhh7                        0x0000556212b32d1e <unavailable> + 7454

    7    tmp7ko0uhh7                        0x0000556212b326bc <unavailable> + 5820

    8    libc.so.6                          0x00002ae1abe41460 __libc_start_main +
    245

    9    tmp7ko0uhh7                        0x0000556212b32399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpav3xlym1/tmpav3xlym1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7222e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac721fdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac721fde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac721fdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpav3xlym1                        0x000055c2fd51067c <unavailable> + 5756

    5    libc.so.6                          0x00002ac7224d3460 __libc_start_main +
    245

    6    tmpav3xlym1                        0x000055c2fd510279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    var i\
    \ = 0\n    for element in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in evenDigit {\n        result.remove(at: i)\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwjk9853k/tmpwjk9853k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b873f35ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b873f051b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b873f051988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b873f0507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjk9853k                        0x00005624e62f66dc <unavailable> + 5852

    5    libc.so.6                          0x00002b873f546460 __libc_start_main +
    245

    6    tmpwjk9853k                        0x00005624e62f62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    var index = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            even.append(element)\n        } else {\n            odd.append(element)\n\
    \        }\n    }\n    for element in even {\n        if result.contains(element)\
    \ {\n            continue\n        }\n        result.append(element)\n    }\n\
    \    for element in odd {\n        if result.contains(element) {\n           \
    \ continue\n        }\n        result.append(element)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9na5hwmv/tmp9na5hwmv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b223bb28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b223b81fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b223b81f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b223b81e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9na5hwmv                        0x0000562e5b33a6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b223bd14460 __libc_start_main +
    245

    6    tmp9na5hwmv                        0x0000562e5b33a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    var evenDigitCount\
    \ = 0\n    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n\
    \            evenDigit.append(element)\n            evenDigitCount += 1\n    \
    \    }\n    }\n    for element in evenDigit {\n        if evenDigitCount > 0 {\n\
    \            if element % 2 == 0 {\n                result += [element]\n    \
    \            evenDigitCount -= 1\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpugwmkd7o/tmpugwmkd7o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3c44cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3c143b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3c143988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3c1427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpugwmkd7o                        0x000056017ff866dc <unavailable> + 5852

    5    libc.so.6                          0x00002add3c638460 __libc_start_main +
    245

    6    tmpugwmkd7o                        0x000056017ff862d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastEvenDigit = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n        } else\
    \ {\n            if lastEvenDigit > 0 {\n                result.insert(lastEvenDigit,\
    \ lastEvenDigit)\n            }\n            lastEvenDigit = 0\n        }\n  \
    \  }\n    if lastEvenDigit > 0 {\n        result.insert(lastEvenDigit, lastEvenDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp671pmm5x.swift:14:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(lastEvenDigit, lastEvenDigit)\n\
    \                       ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp671pmm5x.swift:20:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(lastEvenDigit, lastEvenDigit)\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            evenDigits.append(element)\n\
    \        }\n    }\n    for element in evenDigits {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvj43lej3.swift:15:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastEvenDigit = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            lastEvenDigit = n % 10\n        }\
    \ else {\n            if lastEvenDigit == 0 {\n                result.append(n)\n\
    \            }\n            lastEvenDigit = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_wteopo3/tmp_wteopo3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b646cf34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b646cc2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b646cc2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b646cc2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wteopo3                        0x000055f95f4c967c <unavailable> + 5756

    5    libc.so.6                          0x00002b646d120460 __libc_start_main +
    245

    6    tmp_wteopo3                        0x000055f95f4c9279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n \
    \           if evenDigit > 0 {\n                result.append(n)\n           \
    \     evenDigit = 0\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprqcw8cjz/tmprqcw8cjz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494c5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494c2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494c2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494c2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqcw8cjz                        0x0000556c6e69f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b494c7d8460 __libc_start_main +
    245

    6    tmprqcw8cjz                        0x0000556c6e69f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    result.append(n)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpthmm16kq/tmpthmm16kq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f20dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f1dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f1dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f1dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthmm16kq                        0x000055c4757aa67c <unavailable> + 5756

    5    libc.so.6                          0x00002af2f22ca460 __libc_start_main +
    245

    6    tmpthmm16kq                        0x000055c4757aa279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in x {\n  \
    \      if num % 2 == 0 {\n            result.append(num)\n        }\n    }\n \
    \   for num in x {\n        if num % 2 != 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp464jfzf0/tmp464jfzf0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21089b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21086aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21086aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21086a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp464jfzf0                        0x00005604a68d667c <unavailable> + 5756

    5    libc.so.6                          0x00002b2108b9f460 __libc_start_main +
    245

    6    tmp464jfzf0                        0x00005604a68d6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigitCount = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigitCount += 1\n   \
    \     }\n    }\n    for element in x {\n        if element % 2 != 0 && evenDigitCount\
    \ > 0 {\n            result.append(element)\n            evenDigitCount -= 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmps3kx1cq9/tmps3kx1cq9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0591d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0591a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0591a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0591a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3kx1cq9                        0x000055d6381b767c <unavailable> + 5756

    5    libc.so.6                          0x00002b0591f2f460 __libc_start_main +
    245

    6    tmps3kx1cq9                        0x000055d6381b7279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 == 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjjy6pxlk/tmpjjy6pxlk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82dc32cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82dc023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82dc023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82dc0227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjy6pxlk                        0x000055d7d016b76c <unavailable> + 5996

    5    libc.so.6                          0x00002b82dc518460 __libc_start_main +
    245

    6    tmpjjy6pxlk                        0x000055d7d016b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           if even.contains(n) == false {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqpxz7xgs/tmpqpxz7xgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de5be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de58d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de58d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de58d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpxz7xgs                        0x000056462b5416ec <unavailable> + 5868

    5    libc.so.6                          0x00002b0de5dce460 __libc_start_main +
    245

    6    tmpqpxz7xgs                        0x000056462b5412e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            for e in evenDigits {\n                if e == n {\n\
    \                    result.append(n)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpthmm16kq/tmpthmm16kq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f20dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f1dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f1dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f1dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthmm16kq                        0x000055c4757aa67c <unavailable> + 5756

    5    libc.so.6                          0x00002af2f22ca460 __libc_start_main +
    245

    6    tmpthmm16kq                        0x000055c4757aa279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if evenDigits.contains(n) {\n                continue\n\
    \            } else {\n                result.append(n)\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8glm7mbf/tmp8glm7mbf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b951d189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b951ce80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b951ce80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b951ce7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8glm7mbf                        0x0000562e29fc26ec <unavailable> + 5868

    5    libc.so.6                          0x00002b951d375460 __libc_start_main +
    245

    6    tmp8glm7mbf                        0x0000562e29fc22e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\
    \ else {\n            result.append(n)\n        }\n    }\n    for n in evenDigit\
    \ {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyo9_4ud1.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigitCount = 0\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigitCount++\n        }\n \
    \   }\n    for n in x {\n        if evenDigitCount > 0 {\n            if n % 2\
    \ == 0 {\n                evenDigitCount--\n            } else {\n           \
    \     result.append(n)\n            }\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzaelwgox.swift:11:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenDigitCount++\n                       \
    \   ^~\n/tmp/tmpzaelwgox.swift:17:31: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n                evenDigitCount--\n                   \
    \           ^~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        }\
    \ else {\n            for d in evenDigit {\n                if d == n {\n    \
    \                result.append(n)\n                    break\n               \
    \ }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmunv3c3i/tmpmunv3c3i.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b900af6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b900ac62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b900ac62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b900ac617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmunv3c3i                        0x000055ad9298567c <unavailable> + 5756

    5    libc.so.6                          0x00002b900b157460 __libc_start_main +
    245

    6    tmpmunv3c3i                        0x000055ad92985279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfc753tmx/tmpfc753tmx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0144ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0144befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0144bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0144bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc753tmx                        0x0000559b193d067c <unavailable> + 5756

    5    libc.so.6                          0x00002b01450e4460 __libc_start_main +
    245

    6    tmpfc753tmx                        0x0000559b193d0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if !contains(evenDigits, n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpddrec0q6.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            last = x\n        } else {\n       \
    \     if last != 0 {\n                result.append(last)\n            }\n   \
    \         last = 0\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0vez6yzq/tmp0vez6yzq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a252dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a24fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a24fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a24fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vez6yzq                        0x000055be386fb67c <unavailable> + 5756

    5    libc.so.6                          0x00002b0a254cb460 __libc_start_main +
    245

    6    tmp0vez6yzq                        0x000055be386fb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            last = last * 10 + n\n        } else\
    \ {\n            if last != 0 {\n                result.append(last)\n       \
    \     }\n            last = n\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpprxz2z9t/tmpprxz2z9t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47c9410c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47c9107b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47c9107988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47c91067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpprxz2z9t                        0x0000562a3b89467c <unavailable> + 5756

    5    libc.so.6                          0x00002b47c95fc460 __libc_start_main +
    245

    6    tmpprxz2z9t                        0x0000562a3b894279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptwcuh4jk/tmptwcuh4jk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba430f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba42defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba42def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba42dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwcuh4jk                        0x0000560d2e5876ec <unavailable> + 5868

    5    libc.so.6                          0x00002aba432e4460 __libc_start_main +
    245

    6    tmptwcuh4jk                        0x0000560d2e5872e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int = 0\n    for x in x\
    \ {\n        if x % 2 == 0 {\n            last = x\n        } else {\n       \
    \     if last != 0 {\n                result.insert(last, at: 0)\n           \
    \ }\n            last = x\n        }\n    }\n    if last != 0 {\n        result.insert(last,\
    \ at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2hlk2r77/tmp2hlk2r77.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8df799bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8df7692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8df7692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8df76917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hlk2r77                        0x000055b8ae36767c <unavailable> + 5756

    5    libc.so.6                          0x00002b8df7b87460 __libc_start_main +
    245

    6    tmp2hlk2r77                        0x000055b8ae367279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigitCount = 0\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigitCount += 1\n        }\n\
    \    }\n    for n in x {\n        if evenDigitCount > 0 && n % 2 == 0 {\n    \
    \        continue\n        }\n        if evenDigitCount == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1jjh9fdi/tmp1jjh9fdi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b629bdcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b629bac1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b629bac1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b629bac07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jjh9fdi                        0x000055f45776d67c <unavailable> + 5756

    5    libc.so.6                          0x00002b629bfb6460 __libc_start_main +
    245

    6    tmp1jjh9fdi                        0x000055f45776d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    result.sort(<)\n    for n\
    \ in even {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp44ch48gy.swift:16:17: error: missing argument label 'by:' in call\n\
    \    result.sort(<)\n                ^\n                by: \n/tmp/tmp44ch48gy.swift:18:16:\
    \ error: no exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptwcuh4jk/tmptwcuh4jk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba430f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba42defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba42def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba42dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwcuh4jk                        0x0000560d2e5876ec <unavailable> + 5868

    5    libc.so.6                          0x00002aba432e4460 __libc_start_main +
    245

    6    tmptwcuh4jk                        0x0000560d2e5872e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6a965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6a65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a6a65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a6a65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a6a65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a6a45b7ec <unavailable> + 186348

    6    tmpkn_fwb56                        0x00005572e3f2fd1e <unavailable> + 7454

    7    tmpkn_fwb56                        0x00005572e3f2f6bc <unavailable> + 5820

    8    libc.so.6                          0x00002b7a6ab51460 __libc_start_main +
    245

    9    tmpkn_fwb56                        0x00005572e3f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastEvenDigit = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n        } else\
    \ {\n            if lastEvenDigit > 0 {\n                result.insert(lastEvenDigit,\
    \ lastEvenDigit)\n            }\n            lastEvenDigit = 0\n        }\n  \
    \  }\n    if lastEvenDigit > 0 {\n        result.insert(lastEvenDigit, lastEvenDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp671pmm5x.swift:14:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(lastEvenDigit, lastEvenDigit)\n\
    \                       ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp671pmm5x.swift:20:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(lastEvenDigit, lastEvenDigit)\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           if even.contains(n) == false {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqpxz7xgs/tmpqpxz7xgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de5be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de58d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de58d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de58d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpxz7xgs                        0x000056462b5416ec <unavailable> + 5868

    5    libc.so.6                          0x00002b0de5dce460 __libc_start_main +
    245

    6    tmpqpxz7xgs                        0x000056462b5412e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if evenDigits.contains(n) == false {\n              \
    \  result.append(n)\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0ttrqm4_/tmp0ttrqm4_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3475057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3474d4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3474d4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3474d4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ttrqm4_                        0x00005628afa8e6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b3475243460 __libc_start_main +
    245

    6    tmp0ttrqm4_                        0x00005628afa8e2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n      \
    \  } else {\n            if !contains(result, n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return evenDigits.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9sx9fz6z.swift:13:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit += 1\n        }\n\
    \    }\n    for element in x {\n        if element % 2 != 0 && evenDigit == 0\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpo7v76g86/tmpo7v76g86.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79db819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79db510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79db510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79db50f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7v76g86                        0x000055db1a4bc67c <unavailable> + 5756

    5    libc.so.6                          0x00002b79dba05460 __libc_start_main +
    245

    6    tmpo7v76g86                        0x000055db1a4bc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    for n in odd {\n        if result.contains(n)\
    \ {\n            continue\n        }\n        result.append(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1icc2hge/tmp1icc2hge.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b255ad57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b255aa4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b255aa4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b255aa4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1icc2hge                        0x000055e897e3a6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b255af43460 __libc_start_main +
    245

    6    tmp1icc2hge                        0x000055e897e3a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           if even.contains(n) {\n                continue\n            } else\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_k2igw1y/tmp_k2igw1y.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bfab31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bfa828b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bfa828988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bfa8277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_k2igw1y                        0x00005611ddbd46ec <unavailable> + 5868

    5    libc.so.6                          0x00002b2bfad1d460 __libc_start_main +
    245

    6    tmp_k2igw1y                        0x00005611ddbd42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqce1y4o/tmpdqce1y4o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8626c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8626953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8626953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86269527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqce1y4o                        0x0000559ec02dd76c <unavailable> + 5996

    5    libc.so.6                          0x00002b8626e48460 __libc_start_main +
    245

    6    tmpdqce1y4o                        0x0000559ec02dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    var odd =\
    \ [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    for n in odd {\n        if result.contains(n)\
    \ {\n            continue\n        }\n        result.append(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1icc2hge/tmp1icc2hge.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b255ad57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b255aa4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b255aa4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b255aa4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1icc2hge                        0x000055e897e3a6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b255af43460 __libc_start_main +
    245

    6    tmp1icc2hge                        0x000055e897e3a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        }\n        if\
    \ evenDigit == 0 {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8jvs00eb/tmp8jvs00eb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa1adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa9ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa9ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa9ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jvs00eb                        0x000055dec037767c <unavailable> + 5756

    5    libc.so.6                          0x00002b8faa399460 __libc_start_main +
    245

    6    tmp8jvs00eb                        0x000055dec0377279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var lastDigit: Int = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            lastDigit = element\n   \
    \     } else {\n            if lastDigit != 0 {\n                result.insert(lastDigit)\n\
    \            }\n            lastDigit = 0\n        }\n    }\n    if lastDigit\
    \ != 0 {\n        result.insert(lastDigit)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpx4s0oy17.swift:14:40: error: missing argument for parameter 'at'\
    \ in call\n                result.insert(lastDigit)\n                        \
    \               ^\n                                       , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n/tmp/tmpx4s0oy17.swift:20:32: error: missing argument for parameter 'at'\
    \ in call\n        result.insert(lastDigit)\n                               ^\n\
    \                               , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            continue\n        }\n        for index in 0..<result.count\
    \ {\n            if element == result[index] {\n                continue\n   \
    \         }\n            if element < result[index] {\n                result.append(element)\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmploe_htk1/tmploe_htk1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1684836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b168452db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b168452d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b168452c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmploe_htk1                        0x000055746014a81c <unavailable> + 6172

    5    libc.so.6                          0x00002b1684a22460 __libc_start_main +
    245

    6    tmploe_htk1                        0x000055746014a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            evenDigit += 1\n        }\n        if\
    \ evenDigit == 0 {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8jvs00eb/tmp8jvs00eb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa1adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa9ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa9ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa9ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jvs00eb                        0x000055dec037767c <unavailable> + 5756

    5    libc.so.6                          0x00002b8faa399460 __libc_start_main +
    245

    6    tmp8jvs00eb                        0x000055dec0377279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result[index] = n\n            index +=\
    \ 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d6af0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d67e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4d67e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4d67e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4d67e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab4d65e87ec <unavailable> + 186348

    6    tmp3nw4tzoo                        0x000056259d57eca4 <unavailable> + 7332

    7    tmp3nw4tzoo                        0x000056259d57e63c <unavailable> + 5692

    8    libc.so.6                          0x00002ab4d6cdc460 __libc_start_main +
    245

    9    tmp3nw4tzoo                        0x000056259d57e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var evenDigit = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit += 1\n        }\n\
    \        if evenDigit == 0 {\n            result.append(element)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmphn7ipr92/tmphn7ipr92.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f2f5eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f2f2e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f2f2e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f2f2e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphn7ipr92                        0x00005609f8c5967c <unavailable> + 5756

    5    libc.so.6                          0x00002b5f2f7da460 __libc_start_main +
    245

    6    tmphn7ipr92                        0x00005609f8c59279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var even = [Int]()\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            even.append(n)\n        } else {\n \
    \           result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp65n4hhzi.swift:17:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfc753tmx/tmpfc753tmx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0144ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0144befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0144bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0144bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc753tmx                        0x0000559b193d067c <unavailable> + 5756

    5    libc.so.6                          0x00002b01450e4460 __libc_start_main +
    245

    6    tmpfc753tmx                        0x0000559b193d0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978593
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkno2_luw/tmpkno2_luw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0439adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0436a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0436a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0436a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkno2_luw                        0x0000564aa72cd79c <unavailable> + 6044

    5    libc.so.6                          0x00002af043b99460 __libc_start_main +
    245

    6    tmpkno2_luw                        0x0000564aa72cd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978592
