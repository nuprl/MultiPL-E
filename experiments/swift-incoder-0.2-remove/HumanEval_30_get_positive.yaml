name: HumanEval_30_get_positive
language: swift
prompt: "\n/// Return only positive numbers in the list.\nfunc get_positive(l: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4,\
  \ 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5,\
  \ 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
  \ [] as [Int]) == [] as [Int])"
completions: ['    return l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', " \
    \   var result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter { $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter {
    $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', " \
    \   var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", '    return l.filter { $0 > 0 }', '    return l.filter{ $0
    > 0 }', '    return l.filter { $0 > 0 }', '    return l.filter{it > 0}', "   \
    \ var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x > 0 {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if x > 0 {\n            result.append(x)\n        }\n    }\n    return result",
  '    return l.filter { $0 > 0 }', "    var result = [Int]()\n    for x in l {\n\
    \        if x >= 0 {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l {\n        if x >= 0 {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter({$0 > 0})', '    return
    l.filter { $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if\
    \ x > 0 {\n            result.append(x)\n        }\n    }\n    return result",
  '    return l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', "    var result\
    \ = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter { $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if\
    \ x > 0 {\n            result.append(x)\n        }\n    }\n    return result",
  '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n    for x in l {\n \
    \       if x > 0 {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter { $0 > 0 }', "   \
    \ var result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', "    var\
    \ result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter { $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0
    > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x >= 0 {\n            result.append(x)\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if x >= 0 {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for n in l {\n        if n > 0 {\n \
    \           result.append(n)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter{it > 0}', "    var result = [Int]()\n\
    \    for x in l {\n        if x > 0 {\n            result.append(x)\n        }\n\
    \    }\n    return result", '    return l.filter{ $0 > 0 }', '    return l.filter{
    $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n \
    \           result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter { $0 > 0 }', '    return l.filter{ $0
    > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    for x in l {\n        if x >\
    \ 0 {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    for x in l {\n        if x >\
    \ 0 {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter { $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0
    > 0 }', '    return l.filter { $0 > 0 }', '    return l.filter{ $0 > 0 }', " \
    \   var result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', "    var\
    \ result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', "    var\
    \ result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', "    var\
    \ result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0
    > 0 }', '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n    for x\
    \ in l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter { $0 > 0 }', '    return l.filter{ $0
    > 0 }', "    var result = [Int]()\n    for x in l {\n        if x >= 0 {\n   \
    \         result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x >= 0 {\n            result.append(x)\n       \
    \ }\n    }\n    return result", '    return l.filter { $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x > 0 {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if x >= 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x >= 0 {\n            result.append(x)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    for n in l {\n        if n\
    \ > 0 {\n            result.append(n)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0
    > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter { $0
    > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n    \
    \        result.append(x)\n        }\n    }\n    return result", '    return l.filter{
    $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    for x in l {\n        if x >\
    \ 0 {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x >= 0 {\n            result.append(x)\n        }\n    }\n \
    \   return result", '    return l.filter{ $0 > 0 }', '    return l.filter{ $0
    > 0 }', '    return l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x > 0 {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if x > 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x >= 0 {\n            result.append(x)\n        }\n    }\n \
    \   return result", '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x > 0 {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if x >= 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x >= 0 {\n            result.append(x)\n        }\n    }\n \
    \   return result", '    return l.filter { $0 > 0 }', '    return l.filter{ $0
    > 0 }', "    var result = [Int]()\n    for x in l {\n        if x >= 0 {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter { $0 > 0 }', '    return l.filter({$0 > 0})', '    return l.filter{ $0
    > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n    \
    \        result.append(x)\n        }\n    }\n    return result", '    return l.filter
    { $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n\
    \            result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter({$0 > 0})', "    var result = [Int]()\n\
    \    for x in l {\n        if x >= 0 {\n            result.append(x)\n       \
    \ }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return l.filter{
    $0 > 0 }', '    return l.filter { $0 > 0 }', '    return l.filter{ $0 > 0 }',
  "    var result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter{ $0 > 0 }', '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n\
    \    for x in l {\n        if x >= 0 {\n            result.append(x)\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if x > 0 {\n            result.append(x)\n        }\n    }\n    return\
    \ result", '    return l.filter{ $0 > 0 }', "    var result = [Int]()\n    for\
    \ x in l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', '    return l.filter{it > 0}', '    return l.filter{ $0 >
    0 }', '    return l.filter { $0 > 0 }', '    return l.filter{ $0 > 0 }', "   \
    \ var result = [Int]()\n    for x in l {\n        if x >= 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', "    var\
    \ result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return l.filter{ $0 > 0 }', '    return
    l.filter { $0 > 0 }', "    var result = [Int]()\n    for x in l {\n        if\
    \ x >= 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x >= 0 {\n            result.append(x)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", '    return l.filter{ $0 > 0 }', '    return l.filter{ $0 >
    0 }', '    return l.filter { $0 > 0 }', "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", '    return l.filter { $0 > 0 }', '    return l.filter{ $0
    > 0 }', "    var result = [Int]()\n    for x in l {\n        if x > 0 {\n    \
    \        result.append(x)\n        }\n    }\n    return result", '    return l.filter({$0
    > 0})']
stop_tokens:
- "\n}"
