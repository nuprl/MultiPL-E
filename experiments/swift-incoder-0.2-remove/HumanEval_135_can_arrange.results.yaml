language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8022f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8022c27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8022c27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8022c2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8022c26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8022a26e83 <unavailable> + 188035

    6    tmp2kx2ity0                        0x000055ccd4660a4a <unavailable> + 6730

    7    tmp2kx2ity0                        0x000055ccd46604d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b802311c460 __libc_start_main +
    245

    9    tmp2kx2ity0                        0x000055ccd46601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp54tfvx2m/tmp54tfvx2m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85782c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8577fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8577fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8577fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54tfvx2m                        0x00005573ab4f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b85784af460 __libc_start_main +
    245

    6    tmp54tfvx2m                        0x00005573ab4f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxVal {\n            maxVal = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcuqw2ib0/tmpcuqw2ib0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a55ae5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a557dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a557dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a557db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcuqw2ib0                        0x000055e232c0a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a55cd1460 __libc_start_main +
    245

    6    tmpcuqw2ib0                        0x000055e232c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d092ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d08fc3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d08fc3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d08fc313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d08fc2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d08dc2e83 <unavailable> + 188035

    6    tmpvu6i0zat                        0x000055e4b69b9a4a <unavailable> + 6730

    7    tmpvu6i0zat                        0x000055e4b69b94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b6d094b8460 __libc_start_main +
    245

    9    tmpvu6i0zat                        0x000055e4b69b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = -1\n    var index = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > arr[index-1] {\n            largest = index\n   \
    \     }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3ba1dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b9ed5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3b9ed5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3b9ed513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3b9ed4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3b9cd4e83 <unavailable> + 188035

    6    tmpqkjunsq9                        0x0000564bba307a68 <unavailable> + 6760

    7    tmpqkjunsq9                        0x0000564bba3074d4 <unavailable> + 5332

    8    libc.so.6                          0x00002ae3ba3ca460 __libc_start_main +
    245

    9    tmpqkjunsq9                        0x0000564bba3071a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for element in arr {\n   \
    \     if element > max {\n            max = element\n            index = index\
    \ + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppc1_i2_r/tmppc1_i2_r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fbcedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fb9e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fb9e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fb9e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc1_i2_r                        0x000055600b9f5482 <unavailable> + 5250

    5    libc.so.6                          0x00002b21fbed9460 __libc_start_main +
    245

    6    tmppc1_i2_r                        0x000055600b9f50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > arr[max] {\n            max = idx\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2zozi16n/tmp2zozi16n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f1f95bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f1f652b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f1f652988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f1f6517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zozi16n                        0x000055d756aad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4f1fb47460 __libc_start_main +
    245

    6    tmp2zozi16n                        0x000055d756aad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqohde42t/tmpqohde42t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ffd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ffa3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ffa3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ffa3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohde42t                        0x000055808d17f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af8fff31460 __libc_start_main +
    245

    6    tmpqohde42t                        0x000055808d17f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxVal = -1\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n         \
    \   maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjhz4urmy/tmpjhz4urmy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a8239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a7f30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a7f30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a7f2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhz4urmy                        0x000056426a5ca552 <unavailable> + 5458

    5    libc.so.6                          0x00002b92a8425460 __libc_start_main +
    245

    6    tmpjhz4urmy                        0x000056426a5ca1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4w3vcrz0/tmp4w3vcrz0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f0b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f081ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f081a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f08197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w3vcrz0                        0x0000563a1bc64552 <unavailable> + 5458

    5    libc.so.6                          0x00002b37f0d0f460 __libc_start_main +
    245

    6    tmp4w3vcrz0                        0x0000563a1bc641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpam8x6srw/tmpam8x6srw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9c8375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9c806cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9c806c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9c806b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam8x6srw                        0x000056164c1e3552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae9c8561460 __libc_start_main +
    245

    6    tmpam8x6srw                        0x000056164c1e31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex: Int = 0\n    var maxVal: Int = 0\n    for idx in\
    \ 0..<arr.count {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n\
    \            maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ivbv2ki/tmp3ivbv2ki.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa03ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa03bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa03bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa03bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ivbv2ki                        0x000055c8f7659552 <unavailable> + 5458

    5    libc.so.6                          0x00002baa040c1460 __libc_start_main +
    245

    6    tmp3ivbv2ki                        0x000055c8f76591a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for element in arr {\n   \
    \     if element > max {\n            max = element\n            index = index\
    \ + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppc1_i2_r/tmppc1_i2_r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fbcedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fb9e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fb9e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fb9e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc1_i2_r                        0x000055600b9f5482 <unavailable> + 5250

    5    libc.so.6                          0x00002b21fbed9460 __libc_start_main +
    245

    6    tmppc1_i2_r                        0x000055600b9f50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for idx in 1..<arr.count\
    \ {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n         \
    \   maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6mzrhi1z/tmp6mzrhi1z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b044863ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0448335b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0448335988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04483347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mzrhi1z                        0x000055b4c06f4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b044882a460 __libc_start_main +
    245

    6    tmp6mzrhi1z                        0x000055b4c06f41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4w3vcrz0/tmp4w3vcrz0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f0b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f081ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f081a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f08197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w3vcrz0                        0x0000563a1bc64552 <unavailable> + 5458

    5    libc.so.6                          0x00002b37f0d0f460 __libc_start_main +
    245

    6    tmp4w3vcrz0                        0x0000563a1bc641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > largest {\n            largest = arr[i]\n           \
    \ index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptc6c5y37/tmptc6c5y37.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7b1a4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7b1743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7b1743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7b17427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc6c5y37                        0x00005597af7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab7b1c38460 __libc_start_main +
    245

    6    tmptc6c5y37                        0x00005597af7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex: Int = 0\n    var maxVal: Int = 0\n    for idx in\
    \ 0..<arr.count {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n\
    \            maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ivbv2ki/tmp3ivbv2ki.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa03ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa03bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa03bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa03bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ivbv2ki                        0x000055c8f7659552 <unavailable> + 5458

    5    libc.so.6                          0x00002baa040c1460 __libc_start_main +
    245

    6    tmp3ivbv2ki                        0x000055c8f76591a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n         \
    \   maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcpqlxfff/tmpcpqlxfff.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b045aa5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b045a753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b045a753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b045a7527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpqlxfff                        0x000055c08bee9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b045ac48460 __libc_start_main +
    245

    6    tmpcpqlxfff                        0x000055c08bee91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for val in arr\
    \ {\n        if val > maxVal {\n            maxIndex = maxIndex + 1\n        \
    \    maxVal = val\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7r2ivpne/tmp7r2ivpne.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe25518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe2520fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe2520f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe2520e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7r2ivpne                        0x000055e51607d59f <unavailable> + 5535

    5    libc.so.6                          0x00002abe25704460 __libc_start_main +
    245

    6    tmp7r2ivpne                        0x000055e51607d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8022f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8022c27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8022c27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8022c2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8022c26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8022a26e83 <unavailable> + 188035

    6    tmp2kx2ity0                        0x000055ccd4660a4a <unavailable> + 6730

    7    tmp2kx2ity0                        0x000055ccd46604d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b802311c460 __libc_start_main +
    245

    9    tmp2kx2ity0                        0x000055ccd46601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp54tfvx2m/tmp54tfvx2m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85782c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8577fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8577fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8577fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54tfvx2m                        0x00005573ab4f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b85784af460 __libc_start_main +
    245

    6    tmp54tfvx2m                        0x00005573ab4f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = -1\n    for x in arr {\n\
    \        if x > largest {\n            largest = x\n            index = arr.index(x)\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx8be8h2k.swift:13:25: error: no exact matches in call to instance\
    \ method 'index'\n            index = arr.index(x)\n                        ^\n\
    Swift.Array:7:28: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n       \
    \                    ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpam8x6srw/tmpam8x6srw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9c8375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9c806cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9c806c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9c806b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam8x6srw                        0x000056164c1e3552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae9c8561460 __libc_start_main +
    245

    6    tmpam8x6srw                        0x000056164c1e31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex: Int = 0\n    var maxVal: Int = 0\n    for idx in\
    \ 0..<arr.count {\n        if arr[idx] > maxVal {\n            maxIndex = idx\n\
    \            maxVal = arr[idx]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpd3ohuelx/tmpd3ohuelx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b682a141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6829e38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6829e38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6829e377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3ohuelx                        0x00005610d14ee552 <unavailable> + 5458

    5    libc.so.6                          0x00002b682a32d460 __libc_start_main +
    245

    6    tmpd3ohuelx                        0x00005610d14ee1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmlygybxc/tmpmlygybxc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a70591c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a70288b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a70288988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a702877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlygybxc                        0x0000559268d2c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a7077d460 __libc_start_main +
    245

    6    tmpmlygybxc                        0x0000559268d2c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxgfu5y9k/tmpxgfu5y9k.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12f4c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12f4904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12f4904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12f49037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgfu5y9k                        0x000055893659d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b12f4df9460 __libc_start_main +
    245

    6    tmpxgfu5y9k                        0x000055893659d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for val in arr\
    \ {\n        if val > maxVal {\n            maxIndex = maxIndex + 1\n        \
    \    maxVal = val\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7r2ivpne/tmp7r2ivpne.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe25518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe2520fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe2520f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe2520e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7r2ivpne                        0x000055e51607d59f <unavailable> + 5535

    5    libc.so.6                          0x00002abe25704460 __libc_start_main +
    245

    6    tmp7r2ivpne                        0x000055e51607d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in\
    \ arr {\n        if value > maxValue {\n            maxValue = value\n       \
    \     maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp41wgxshq.swift:13:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var largestIndex = 0\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n            largestIndex = index\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpysat06oz/tmpysat06oz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d42ce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d429dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d429da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d429d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysat06oz                        0x000055e35d063552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6d42ecf460 __libc_start_main +
    245

    6    tmpysat06oz                        0x000055e35d0631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = -1\n    for x in arr {\n\
    \        if x > largest {\n            largest = x\n            index = arr.index(x)\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx8be8h2k.swift:13:25: error: no exact matches in call to instance\
    \ method 'index'\n            index = arr.index(x)\n                        ^\n\
    Swift.Array:7:28: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n       \
    \                    ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxVal = arr[0]\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n         \
    \   maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpz7xnq72f/tmpz7xnq72f.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae18502bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae184d22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae184d22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae184d217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7xnq72f                        0x0000563d9d589552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae185217460 __libc_start_main +
    245

    6    tmpz7xnq72f                        0x0000563d9d5891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for element in arr {\n   \
    \     if element > max {\n            max = element\n            index = index\
    \ + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppc1_i2_r/tmppc1_i2_r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fbcedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fb9e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fb9e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fb9e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc1_i2_r                        0x000055600b9f5482 <unavailable> + 5250

    5    libc.so.6                          0x00002b21fbed9460 __libc_start_main +
    245

    6    tmppc1_i2_r                        0x000055600b9f50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8022f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8022c27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8022c27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8022c2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8022c26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8022a26e83 <unavailable> + 188035

    6    tmp2kx2ity0                        0x000055ccd4660a4a <unavailable> + 6730

    7    tmp2kx2ity0                        0x000055ccd46604d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b802311c460 __libc_start_main +
    245

    9    tmp2kx2ity0                        0x000055ccd46601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var largestIndex = 0\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n            largestIndex = index\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpysat06oz/tmpysat06oz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d42ce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d429dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d429da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d429d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysat06oz                        0x000055e35d063552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6d42ecf460 __libc_start_main +
    245

    6    tmpysat06oz                        0x000055e35d0631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = 0\n    for element in arr\
    \ {\n        if element > largest {\n            largest = element\n         \
    \   index = index + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpyoj69qia/tmpyoj69qia.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1112979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1112670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1112670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b111266f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyoj69qia                        0x0000558a3fb0c59f <unavailable> + 5535

    5    libc.so.6                          0x00002b1112b65460 __libc_start_main +
    245

    6    tmpyoj69qia                        0x0000558a3fb0c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4w3vcrz0/tmp4w3vcrz0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f0b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f081ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f081a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f08197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w3vcrz0                        0x0000563a1bc64552 <unavailable> + 5458

    5    libc.so.6                          0x00002b37f0d0f460 __libc_start_main +
    245

    6    tmp4w3vcrz0                        0x0000563a1bc641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = -1\n    var index = 0\n    for element in arr {\n\
    \        if element > largest {\n            largest = element\n            index\
    \ = index + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpntja0jrg/tmpntja0jrg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a0f2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a0c22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a0c22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a0c217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntja0jrg                        0x000055883fd31482 <unavailable> + 5250

    5    libc.so.6                          0x00002b56a1117460 __libc_start_main +
    245

    6    tmpntja0jrg                        0x000055883fd310d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for val in arr\
    \ {\n        if val > maxVal {\n            maxIndex = maxIndex + 1\n        \
    \    maxVal = val\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7r2ivpne/tmp7r2ivpne.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe25518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe2520fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe2520f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe2520e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7r2ivpne                        0x000055e51607d59f <unavailable> + 5535

    5    libc.so.6                          0x00002abe25704460 __libc_start_main +
    245

    6    tmp7r2ivpne                        0x000055e51607d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in\
    \ arr {\n        if value > maxValue {\n            maxValue = value\n       \
    \     maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp41wgxshq.swift:13:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4w3vcrz0/tmp4w3vcrz0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f0b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f081ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f081a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f08197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w3vcrz0                        0x0000563a1bc64552 <unavailable> + 5458

    5    libc.so.6                          0x00002b37f0d0f460 __libc_start_main +
    245

    6    tmp4w3vcrz0                        0x0000563a1bc641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > largest {\n            largest = arr[i]\n           \
    \ index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptc6c5y37/tmptc6c5y37.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7b1a4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7b1743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7b1743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7b17427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc6c5y37                        0x00005597af7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab7b1c38460 __libc_start_main +
    245

    6    tmptc6c5y37                        0x00005597af7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc70e0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc70b02561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc70b02286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc70b0213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc70b01bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc70901e83 <unavailable> + 188035

    6    tmpsd04sgqi                        0x000055922eeafa28 <unavailable> + 6696

    7    tmpsd04sgqi                        0x000055922eeaf4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002adc70ff7460 __libc_start_main +
    245

    9    tmpsd04sgqi                        0x000055922eeaf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex: Int = 0\n    var maxVal: Int = arr[0]\n    for idx\
    \ in 0..<arr.count {\n        if arr[idx] > maxVal {\n            maxIndex = idx\n\
    \            maxVal = arr[idx]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_lcmd_ln/tmp_lcmd_ln.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bc1f04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bc1bfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bc1bfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bc1bfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lcmd_ln                        0x0000556bc7bfb552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2bc20f0460 __libc_start_main +
    245

    6    tmp_lcmd_ln                        0x0000556bc7bfb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in\
    \ arr {\n        if value > maxValue {\n            maxValue = value\n       \
    \     maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp41wgxshq.swift:13:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = Int()\n    var index = -1\n    for x in arr {\n\
    \        if x > largest {\n            largest = x\n            index = x\n  \
    \      }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppfrqi1si/tmppfrqi1si.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3d2c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3d28f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3d28f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3d28f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfrqi1si                        0x000055ae7177b482 <unavailable> + 5250

    5    libc.so.6                          0x00002ac3d2dec460 __libc_start_main +
    245

    6    tmppfrqi1si                        0x000055ae7177b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp54tfvx2m/tmp54tfvx2m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85782c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8577fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8577fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8577fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54tfvx2m                        0x00005573ab4f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b85784af460 __libc_start_main +
    245

    6    tmp54tfvx2m                        0x00005573ab4f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > arr[max] {\n            max = arr[index]\n      \
    \      maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplkr__ilg/tmplkr__ilg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6097bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d60672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d60672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d606717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkr__ilg                        0x000055f30ba9a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8d60b67460 __libc_start_main +
    245

    6    tmplkr__ilg                        0x000055f30ba9a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d092ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d08fc3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d08fc3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d08fc313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d08fc2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d08dc2e83 <unavailable> + 188035

    6    tmpvu6i0zat                        0x000055e4b69b9a4a <unavailable> + 6730

    7    tmpvu6i0zat                        0x000055e4b69b94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b6d094b8460 __libc_start_main +
    245

    9    tmpvu6i0zat                        0x000055e4b69b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var largestIndex = 0\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n            largestIndex = index\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpysat06oz/tmpysat06oz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d42ce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d429dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d429da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d429d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysat06oz                        0x000055e35d063552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6d42ecf460 __libc_start_main +
    245

    6    tmpysat06oz                        0x000055e35d0631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = Int()\n    var index = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > largest {\n            largest = arr[i]\n           \
    \ index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmrsc0yjq/tmpmrsc0yjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78423dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78420d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78420d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78420d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrsc0yjq                        0x00005573802d0552 <unavailable> + 5458

    5    libc.so.6                          0x00002b78425cb460 __libc_start_main +
    245

    6    tmpmrsc0yjq                        0x00005573802d01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for x in arr {\n        if\
    \ x > max {\n            max = x\n            index = index + 1\n        }\n \
    \   }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpt5uvcjlv/tmpt5uvcjlv.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad07ba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad07899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad07899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad078987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5uvcjlv                        0x00005635b7490482 <unavailable> + 5250

    5    libc.so.6                          0x00002aad07d8e460 __libc_start_main +
    245

    6    tmpt5uvcjlv                        0x00005635b74900d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcjfz1_mz/tmpcjfz1_mz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f1e117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f1de0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f1de0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f1de0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjfz1_mz                        0x00005566041d0552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0f1e303460 __libc_start_main +
    245

    6    tmpcjfz1_mz                        0x00005566041d01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > largest {\n            largest = arr[i]\n           \
    \ index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptc6c5y37/tmptc6c5y37.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7b1a4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7b1743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7b1743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7b17427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc6c5y37                        0x00005597af7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab7b1c38460 __libc_start_main +
    245

    6    tmptc6c5y37                        0x00005597af7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8022f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8022c27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8022c27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8022c2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8022c26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8022a26e83 <unavailable> + 188035

    6    tmp2kx2ity0                        0x000055ccd4660a4a <unavailable> + 6730

    7    tmp2kx2ity0                        0x000055ccd46604d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b802311c460 __libc_start_main +
    245

    9    tmp2kx2ity0                        0x000055ccd46601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = Int()\n    var largestIndex = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n            largestIndex = index\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph6f97lwf/tmph6f97lwf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612aea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b612ab9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b612ab9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b612ab9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6f97lwf                        0x0000558661e46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b612b094460 __libc_start_main +
    245

    6    tmph6f97lwf                        0x0000558661e461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for x in arr {\n        if\
    \ x > max {\n            max = x\n            index = x\n        }\n    }\n  \
    \  return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwpl0_qab/tmpwpl0_qab.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0345f42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0345c39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0345c39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0345c387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpl0_qab                        0x000055807e36b482 <unavailable> + 5250

    5    libc.so.6                          0x00002b034612e460 __libc_start_main +
    245

    6    tmpwpl0_qab                        0x000055807e36b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n         \
    \   maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcpqlxfff/tmpcpqlxfff.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b045aa5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b045a753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b045a753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b045a7527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpqlxfff                        0x000055c08bee9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b045ac48460 __libc_start_main +
    245

    6    tmpcpqlxfff                        0x000055c08bee91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex: Int = 0\n    var maxVal: Int = 0\n    for idx in\
    \ 0..<arr.count {\n        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n\
    \            maxIndex = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ivbv2ki/tmp3ivbv2ki.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa03ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa03bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa03bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa03bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ivbv2ki                        0x000055c8f7659552 <unavailable> + 5458

    5    libc.so.6                          0x00002baa040c1460 __libc_start_main +
    245

    6    tmp3ivbv2ki                        0x000055c8f76591a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for val in arr\
    \ {\n        if val > maxVal {\n            maxIndex = val\n            maxVal\
    \ = val\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppuayduhi/tmppuayduhi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbc186ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbc1561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbc1561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbc15607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuayduhi                        0x0000563c097e74d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abbc1a56460 __libc_start_main +
    245

    6    tmppuayduhi                        0x0000563c097e7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc70e0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc70b02561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc70b02286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc70b0213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc70b01bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc70901e83 <unavailable> + 188035

    6    tmpsd04sgqi                        0x000055922eeafa28 <unavailable> + 6696

    7    tmpsd04sgqi                        0x000055922eeaf4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002adc70ff7460 __libc_start_main +
    245

    9    tmpsd04sgqi                        0x000055922eeaf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpam8x6srw/tmpam8x6srw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9c8375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9c806cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9c806c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9c806b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam8x6srw                        0x000056164c1e3552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae9c8561460 __libc_start_main +
    245

    6    tmpam8x6srw                        0x000056164c1e31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsw_ladaw/tmpsw_ladaw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc41c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc41906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc41906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc419057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsw_ladaw                        0x0000557b6e655552 <unavailable> + 5458

    5    libc.so.6                          0x00002afc41dfb460 __libc_start_main +
    245

    6    tmpsw_ladaw                        0x0000557b6e6551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxVal = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxVal {\n            maxVal = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcuqw2ib0/tmpcuqw2ib0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a55ae5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a557dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a557dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a557db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcuqw2ib0                        0x000055e232c0a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a55cd1460 __libc_start_main +
    245

    6    tmpcuqw2ib0                        0x000055e232c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqohde42t/tmpqohde42t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ffd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ffa3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ffa3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ffa3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohde42t                        0x000055808d17f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af8fff31460 __libc_start_main +
    245

    6    tmpqohde42t                        0x000055808d17f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = Int()\n    var largestIndex = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n            largestIndex = index\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph6f97lwf/tmph6f97lwf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612aea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b612ab9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b612ab9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b612ab9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6f97lwf                        0x0000558661e46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b612b094460 __libc_start_main +
    245

    6    tmph6f97lwf                        0x0000558661e461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxgfu5y9k/tmpxgfu5y9k.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12f4c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12f4904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12f4904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12f49037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgfu5y9k                        0x000055893659d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b12f4df9460 __libc_start_main +
    245

    6    tmpxgfu5y9k                        0x000055893659d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d092ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d08fc3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d08fc3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d08fc313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d08fc2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d08dc2e83 <unavailable> + 188035

    6    tmpvu6i0zat                        0x000055e4b69b9a4a <unavailable> + 6730

    7    tmpvu6i0zat                        0x000055e4b69b94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b6d094b8460 __libc_start_main +
    245

    9    tmpvu6i0zat                        0x000055e4b69b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpam8x6srw/tmpam8x6srw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9c8375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9c806cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9c806c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9c806b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam8x6srw                        0x000056164c1e3552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae9c8561460 __libc_start_main +
    245

    6    tmpam8x6srw                        0x000056164c1e31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for element in arr {\n   \
    \     if element > max {\n            max = element\n            index = index\
    \ + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppc1_i2_r/tmppc1_i2_r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fbcedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fb9e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fb9e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fb9e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc1_i2_r                        0x000055600b9f5482 <unavailable> + 5250

    5    libc.so.6                          0x00002b21fbed9460 __libc_start_main +
    245

    6    tmppc1_i2_r                        0x000055600b9f50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var index = -1\n    for x in arr {\n\
    \        if x < largest {\n            largest = x\n            index = x\n  \
    \      }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5akufu50/tmp5akufu50.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28e48c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28e45b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28e45b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28e45b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5akufu50                        0x000056145f6a04d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b28e4aae460 __libc_start_main +
    245

    6    tmp5akufu50                        0x000056145f6a0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp49gz2s6k/tmp49gz2s6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d8f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d8c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d8c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d8c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gz2s6k                        0x000055ba2025e552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad5d911a460 __libc_start_main +
    245

    6    tmp49gz2s6k                        0x000055ba2025e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d092ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d08fc3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d08fc3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d08fc313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d08fc2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d08dc2e83 <unavailable> + 188035

    6    tmpvu6i0zat                        0x000055e4b69b9a4a <unavailable> + 6730

    7    tmpvu6i0zat                        0x000055e4b69b94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b6d094b8460 __libc_start_main +
    245

    9    tmpvu6i0zat                        0x000055e4b69b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4w3vcrz0/tmp4w3vcrz0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f0b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f081ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f081a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f08197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w3vcrz0                        0x0000563a1bc64552 <unavailable> + 5458

    5    libc.so.6                          0x00002b37f0d0f460 __libc_start_main +
    245

    6    tmp4w3vcrz0                        0x0000563a1bc641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = arr[0]\n    var largestIndex = 0\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n            largestIndex = index\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpysat06oz/tmpysat06oz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d42ce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d429dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d429da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d429d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysat06oz                        0x000055e35d063552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6d42ecf460 __libc_start_main +
    245

    6    tmpysat06oz                        0x000055e35d0631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8022f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8022c27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8022c27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8022c2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8022c26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8022a26e83 <unavailable> + 188035

    6    tmp2kx2ity0                        0x000055ccd4660a4a <unavailable> + 6730

    7    tmp2kx2ity0                        0x000055ccd46604d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b802311c460 __libc_start_main +
    245

    9    tmp2kx2ity0                        0x000055ccd46601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = Int()\n    var index = 0\n    for el in arr {\n\
    \        if el > largest {\n            largest = el\n            index = index\
    \ + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9e9kedjh/tmp9e9kedjh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fbce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fbcb95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fbcb95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fbcb947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9e9kedjh                        0x0000556d48a01482 <unavailable> + 5250

    5    libc.so.6                          0x00002b1fbd08a460 __libc_start_main +
    245

    6    tmp9e9kedjh                        0x0000556d48a010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0xp_fnid/tmp0xp_fnid.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f78b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f75b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f75b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f75af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xp_fnid                        0x000056546d39b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26f7aa5460 __libc_start_main +
    245

    6    tmp0xp_fnid                        0x000056546d39b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxgfu5y9k/tmpxgfu5y9k.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12f4c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12f4904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12f4904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12f49037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgfu5y9k                        0x000055893659d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b12f4df9460 __libc_start_main +
    245

    6    tmpxgfu5y9k                        0x000055893659d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx]\
    \ > max {\n            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp36iht9cc/tmp36iht9cc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb14167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb13e5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb13e5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb13e5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36iht9cc                        0x000055b5fe568552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb14353460 __libc_start_main +
    245

    6    tmp36iht9cc                        0x000055b5fe5681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx]\
    \ > max {\n            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp36iht9cc/tmp36iht9cc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb14167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb13e5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb13e5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb13e5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36iht9cc                        0x000055b5fe568552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb14353460 __libc_start_main +
    245

    6    tmp36iht9cc                        0x000055b5fe5681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4w3vcrz0/tmp4w3vcrz0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f0b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f081ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f081a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f08197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w3vcrz0                        0x0000563a1bc64552 <unavailable> + 5458

    5    libc.so.6                          0x00002b37f0d0f460 __libc_start_main +
    245

    6    tmp4w3vcrz0                        0x0000563a1bc641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx]\
    \ > max {\n            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp36iht9cc/tmp36iht9cc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb14167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb13e5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb13e5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb13e5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36iht9cc                        0x000055b5fe568552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb14353460 __libc_start_main +
    245

    6    tmp36iht9cc                        0x000055b5fe5681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978496
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in\
    \ 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue =\
    \ arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprgkr433d/tmprgkr433d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a95278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a94f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a94f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a94f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgkr433d                        0x000056267fda8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3a95464460 __libc_start_main +
    245

    6    tmprgkr433d                        0x000056267fda81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
