language: php
name: HumanEval_148_bf
results:
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        return\
    \ array();\n    }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $temp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v48q7y6.php:42\n\
    Stack trace:\n#0 /tmp/tmp5v48q7y6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5v48q7y6.php\
    \ on line 42\n"
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index < $planet2_index) {\n\
    \        return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmb076n7.php:41\n\
    Stack trace:\n#0 /tmp/tmpgmb076n7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgmb076n7.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 === false || $index2 === false) {\n        return\
    \ array();\n    }\n    if ($index1 < $index2) {\n        return array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n    } else {\n        return array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicis5_lm.php:41\n\
    Stack trace:\n#0 /tmp/tmpicis5_lm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpicis5_lm.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        return\
    \ array();\n    }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $temp;\n    }\n    $result =\
    \ array();\n    for ($i = $planet1 + 1; $i < $planet2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index < $planet2_index) {\n\
    \        return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmb076n7.php:41\n\
    Stack trace:\n#0 /tmp/tmpgmb076n7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgmb076n7.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    $result = array();\n    if ($planet1_index\
    \ < $planet2_index) {\n        for ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    } else {\n  \
    \      for ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n          \
    \  $result[] = $planets[$i];\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index > $planet2_index) {\n\
    \        $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n \
    \       $planet2_index = $temp;\n    }\n    return array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeosu23h0.php:42\n\
    Stack trace:\n#0 /tmp/tmpeosu23h0.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeosu23h0.php\
    \ on line 42\n"
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index < $planet2_index) {\n\
    \        return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmb076n7.php:41\n\
    Stack trace:\n#0 /tmp/tmpgmb076n7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgmb076n7.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $planet1_index = array_search($planet1, $planets);\n\t$planet2_index = array_search($planet2,\
    \ $planets);\n\tif ($planet1_index === false || $planet2_index === false) {\n\t\
    \treturn array();\n\t}\n\tif ($planet1_index < $planet2_index) {\n\t\treturn array_slice($planets,\
    \ $planet1_index + 1, $planet2_index - $planet1_index - 1);\n\t} else {\n\t\t\
    return array_slice($planets, $planet2_index + 1, $planet1_index - $planet2_index\
    \ - 1);\n\t}\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_4ykdn4.php:41\n\
    Stack trace:\n#0 /tmp/tmph_4ykdn4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmph_4ykdn4.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        return\
    \ array();\n    }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $temp;\n    }\n    $result =\
    \ array();\n    for ($i = $planet1 + 1; $i < $planet2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index < $planet2_index) {\n\
    \        return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmb076n7.php:41\n\
    Stack trace:\n#0 /tmp/tmpgmb076n7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgmb076n7.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $planets_between = array();\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn $planets_between;\n\t}\n\t\
    if ($planet1_index < $planet2_index) {\n\t\tfor ($i = $planet1_index + 1; $i <\
    \ $planet2_index; $i++) {\n\t\t\t$planets_between[] = $planets[$i];\n\t\t}\n\t\
    } else {\n\t\tfor ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n\t\t\
    \t$planets_between[] = $planets[$i];\n\t\t}\n\t}\n\treturn $planets_between;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $planet1_index\
    \ = array_search($planet1, $planets);\n  $planet2_index = array_search($planet2,\
    \ $planets);\n  if ($planet1_index === false || $planet2_index === false) {\n\
    \    return array();\n  }\n  if ($planet1_index < $planet2_index) {\n    return\
    \ array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index -\
    \ 1);\n  } else {\n    return array_slice($planets, $planet2_index + 1, $planet1_index\
    \ - $planet2_index - 1);\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9upnchvx.php:41\n\
    Stack trace:\n#0 /tmp/tmp9upnchvx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9upnchvx.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    $result = array();\n    if ($index1 === false || $index2 ===\
    \ false) {\n        return $result;\n    }\n    if ($index1 > $index2) {\n   \
    \     $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    for ($i = $index1 + 1; $i < $index2; $i++) {\n        $result[] =\
    \ $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $index1\
    \ = array_search($planet1, $planets);\n  $index2 = array_search($planet2, $planets);\n\
    \  if($index1 === false || $index2 === false) {\n    return array();\n  }\n  if($index1\
    \ > $index2) {\n    $temp = $index1;\n    $index1 = $index2;\n    $index2 = $temp;\n\
    \  }\n  return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n}\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqk4lpfx.php:42\n\
    Stack trace:\n#0 /tmp/tmpmqk4lpfx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpmqk4lpfx.php\
    \ on line 42\n"
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index < $planet2_index) {\n\
    \        return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"\
    Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpxmvirsfd.php:44\nStack trace:\n#0 /tmp/tmpxmvirsfd.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxmvirsfd.php on line 44\n"
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index < $planet2_index) {\n\
    \        return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmb076n7.php:41\n\
    Stack trace:\n#0 /tmp/tmpgmb076n7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgmb076n7.php\
    \ on line 41\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index > $planet2_index) {\n\
    \        $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n \
    \       $planet2_index = $temp;\n    }\n    $result = array();\n    for ($i =\
    \ $planet1_index + 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    if ($planet1_index > $planet2_index) {\n\
    \        $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n \
    \       $planet2_index = $temp;\n    }\n    return array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n}\n\nprint_r(bf(\"Jupiter\", \"\
    Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpobw9lrmc.php:45\nStack trace:\n#0 /tmp/tmpobw9lrmc.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpobw9lrmc.php on line 45\n"
  timestamp: 1659730702
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planets_between = array();\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return array();\n    }\n \
    \   if ($planet1_index < $planet2_index) {\n        for ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n            $planets_between[] = $planets[$i];\n\
    \        }\n    } else {\n        for ($i = $planet2_index + 1; $i < $planet1_index;\
    \ $i++) {\n            $planets_between[] = $planets[$i];\n        }\n    }\n\
    \    return $planets_between;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730702
