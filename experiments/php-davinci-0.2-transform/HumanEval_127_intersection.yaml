name: HumanEval_127_intersection
language: php
prompt: "<?php\n// You are given two intervals,\n// where each interval is a pair\
  \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
  \ are closed which means that the interval (start, end)\n// includes both start\
  \ and end.\n// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n// Your task is to determine whether the length of intersection\
  \ of these two \n// intervals is a prime number.\n// Example, the intersection of\
  \ the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a\
  \ prime number.\n// If the length of the intersection is a prime number, return\
  \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
  \ return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2,\
  \ 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n//\
  \ >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1,\
  \ $interval2) {\n"
tests: "function candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
  \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
  \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"\
    YES\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = array_intersect($interval1, $interval2);\n    $length\
    \ = count($intersection);\n    if ($length == 0) {\n        return \"NO\";\n \
    \   }\n    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    if ($length == 2) {\n        return \"NO\";\n    }\n    if ($length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    for ($i = 3; $i <= sqrt($length);\
    \ $i += 2) {\n        if ($length % $i == 0) {\n            return \"NO\";\n \
    \       }\n    }\n    return \"YES\";\n}\n", "    $interval1_start = $interval1[0];\n\
    \    $interval1_end = $interval1[1];\n    $interval2_start = $interval2[0];\n\
    \    $interval2_end = $interval2[1];\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    if ($intersection_start > $intersection_end) {\n        return \"NO\";\n\
    \    }\n    $intersection_length = $intersection_end - $intersection_start + 1;\n\
    \    if ($intersection_length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart + 1;\n    if ($intersectionLength == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength; $i++) {\n       \
    \ if ($intersectionLength % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $intersection = array_values($intersection);\n    $length = $intersection[count($intersection)\
    \ - 1] - $intersection[0];\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = array_intersect($interval1, $interval2);\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $interval = array();\n    $interval[0]\
    \ = max($interval1[0], $interval2[0]);\n    $interval[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($interval[0] > $interval[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $interval[1] - $interval[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $intersection = array();\n    if ($interval1[0]\
    \ > $interval2[0]) {\n        $intersection[0] = $interval1[0];\n    } else {\n\
    \        $intersection[0] = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $intersection[1] = $interval1[1];\n    } else {\n        $intersection[1]\
    \ = $interval2[1];\n    }\n    if ($intersection[0] > $intersection[1]) {\n  \
    \      return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    $prime = true;\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          $prime = false;\n            break;\n        }\n    }\n    if ($prime)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersect = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (count($intersect) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersect);\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (empty($intersection)) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if (isPrime($length)) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n", "    $intersection = array();\n    if ($interval1[0] >= $interval2[0]\
    \ && $interval1[0] <= $interval2[1]) {\n        $intersection[] = $interval1[0];\n\
    \    }\n    if ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1])\
    \ {\n        $intersection[] = $interval1[1];\n    }\n    if ($interval2[0] >=\
    \ $interval1[0] && $interval2[0] <= $interval1[1]) {\n        $intersection[]\
    \ = $interval2[0];\n    }\n    if ($interval2[1] >= $interval1[0] && $interval2[1]\
    \ <= $interval1[1]) {\n        $intersection[] = $interval2[1];\n    }\n    if\
    \ (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length =\
    \ $intersection[1] - $intersection[0];\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  $interval1Start = $interval1[0];\n  $interval1End = $interval1[1];\n\
    \  $interval2Start = $interval2[0];\n  $interval2End = $interval2[1];\n  $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n  $intersectionEnd = min($interval1End,\
    \ $interval2End);\n  if ($intersectionStart > $intersectionEnd) {\n    return\
    \ \"NO\";\n  }\n  $intersectionLength = $intersectionEnd - $intersectionStart\
    \ + 1;\n  if ($intersectionLength == 1) {\n    return \"NO\";\n  }\n  for ($i\
    \ = 2; $i < $intersectionLength; $i++) {\n    if ($intersectionLength % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) < 2)\
    \ {\n        return \"NO\";\n    }\n    $length = max($intersection) - min($intersection);\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    $intersection_start\
    \ = max($interval1_start, $interval2_start);\n    $intersection_end = min($interval1_end,\
    \ $interval2_end);\n    if ($intersection_start > $intersection_end) {\n     \
    \   return \"NO\";\n    }\n    $intersection_length = $intersection_end - $intersection_start\
    \ + 1;\n    if ($intersection_length == 1) {\n        return \"NO\";\n    }\n\
    \    if ($intersection_length == 2) {\n        return \"YES\";\n    }\n    for\
    \ ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length < 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 0) {\n        return \"YES\"\
    ;\n    }\n    if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length\
    \ == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) > 0)\
    \ {\n        $intersection = array_values($intersection);\n        $length = $intersection[count($intersection)\
    \ - 1] - $intersection[0];\n        if ($length > 1) {\n            for ($i =\
    \ 2; $i < $length; $i++) {\n                if ($length % $i == 0) {\n       \
    \             return \"NO\";\n                }\n            }\n        }\n  \
    \      return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $intersection =\
    \ array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 0)\
    \ {\n        return \"YES\";\n    }\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    if\
    \ ($length % 2 == 0) {\n        return \"NO\";\n    }\n    for ($i = 3; $i <=\
    \ sqrt($length); $i += 2) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1, 2),\
    \ array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1[0] = max($interval1[0],\
    \ $interval2[0]);\n    $interval1[1] = min($interval1[1], $interval2[1]);\n  \
    \  if ($interval1[0] > $interval1[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval1[1] - $interval1[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  $interval1 = array_unique($interval1);\n  $interval2 = array_unique($interval2);\n\
    \  $intersection = array_intersect($interval1, $interval2);\n  $length = count($intersection);\n\
    \  if ($length == 0) {\n    return \"NO\";\n  }\n  if ($length == 1) {\n    return\
    \ \"YES\";\n  }\n  if ($length == 2) {\n    return \"NO\";\n  }\n  if ($length\
    \ == 3) {\n    return \"YES\";\n  }\n  if ($length == 4) {\n    return \"NO\"\
    ;\n  }\n  if ($length == 5) {\n    return \"YES\";\n  }\n  if ($length == 6) {\n\
    \    return \"NO\";\n  }\n  if ($length == 7) {\n    return \"YES\";\n  }\n  if\
    \ ($length == 8) {\n    return \"NO\";\n  }\n  if ($length == 9) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 10) {\n    return \"NO\";\n  }\n  if ($length\
    \ == 11) {\n    return \"YES\";\n  }\n  if ($length == 12) {\n    return \"NO\"\
    ;\n  }\n  if ($length == 13) {\n    return \"YES\";\n  }\n  if ($length == 14)\
    \ {\n    return \"NO\";\n  }\n  if ($length == 15) {\n    return \"NO\";\n  }\n\
    \  if ($length == 16) {\n    return \"NO\";\n  }\n  if ($length == 17) {\n   \
    \ return \"YES\";\n  }\n  if ($length == 18) {\n    return \"NO\";\n  }\n  if\
    \ ($length == 19) {\n    return \"YES\";\n  }\n  if ($length == 20) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 21) {\n    return \"NO\";\n  }\n  if ($length\
    \ == 22) {\n    return \"NO\";\n  }\n  if ($length == 23) {\n    return \"YES\"\
    ;\n  }\n  if ($length == 24) {\n    return \"NO\";\n  }\n ", "    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n \
    \   if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    // your code here\n}", " \
    \   $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $length = count($intersection);\n\
    \    if ($length == 0) {\n        return \"NO\";\n    }\n    if ($length == 1)\
    \ {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1, 2), array(2,\
    \ 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho\
    \ intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $intersection =\
    \ array_intersect(range($interval1[0], $interval1[1]), range($interval2[0], $interval2[1]));\n\
    \    if (empty($intersection)) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $intersection = $end - $start + 1;\n    if ($intersection == 1) {\n      \
    \  return \"NO\";\n    }\n    for ($i = 2; $i < $intersection; $i++) {\n     \
    \   if ($intersection % $i == 0) {\n            return \"NO\";\n        }\n  \
    \  }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (empty($intersection)) {\n        return \"NO\";\n    }\n\
    \    $length = count($intersection);\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = array_intersect($interval1, $interval2);\n    $length\
    \ = count($intersection);\n    if ($length == 0) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if (isPrime($length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    $intersection_length = $intersection[1]\
    \ - $intersection[0];\n    if ($intersection_length < 0) {\n        return \"\
    NO\";\n    }\n    if ($intersection_length == 0) {\n        return \"YES\";\n\
    \    }\n    for ($i = 2; $i <= $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  $intersection = array();\n  if($interval1[0] <= $interval2[0] && $interval1[1]\
    \ >= $interval2[0]) {\n    $intersection[0] = $interval2[0];\n  } else if($interval2[0]\
    \ <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n    $intersection[0]\
    \ = $interval1[0];\n  } else {\n    return \"NO\";\n  }\n  if($interval1[1] <=\
    \ $interval2[1] && $interval1[1] >= $interval2[0]) {\n    $intersection[1] = $interval1[1];\n\
    \  } else if($interval2[1] <= $interval1[1] && $interval2[1] >= $interval1[0])\
    \ {\n    $intersection[1] = $interval2[1];\n  } else {\n    return \"NO\";\n \
    \ }\n  $length = $intersection[1] - $intersection[0];\n  if($length == 1) {\n\
    \    return \"NO\";\n  }\n  for($i = 2; $i < $length; $i++) {\n    if($length\
    \ % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}", "   \
    \ $interval = array();\n    if ($interval1[0] > $interval2[0]) {\n        $interval[0]\
    \ = $interval1[0];\n    } else {\n        $interval[0] = $interval2[0];\n    }\n\
    \    if ($interval1[1] < $interval2[1]) {\n        $interval[1] = $interval1[1];\n\
    \    } else {\n        $interval[1] = $interval2[1];\n    }\n    if ($interval[0]\
    \ > $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1]\
    \ - $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    if ($length == 2) {\n        return \"YES\";\n    }\n    if ($length % 2\
    \ == 0) {\n        return \"NO\";\n    }\n    for ($i = 3; $i <= sqrt($length);\
    \ $i += 2) {\n        if ($length % $i == 0) {\n            return \"NO\";\n \
    \       }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if ($length < 0) {\n        return \"NO\";\n    }\n\
    \    if (isPrime($length)) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    $isPrime = true;\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          $isPrime = false;\n            break;\n        }\n    }\n    return\
    \ $isPrime ? \"YES\" : \"NO\";\n}\n", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if (isPrime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n  \
    \  $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n  \
    \  $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    $intersection_length = $intersection_end\
    \ - $intersection_start;\n    if ($intersection_length < 0) {\n        return\
    \ \"NO\";\n    }\n    if ($intersection_length == 0) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    if ($interval1[0] >= $interval2[0] &&\
    \ $interval1[0] <= $interval2[1]) {\n        $intersection[0] = $interval1[0];\n\
    \    } else if ($interval2[0] >= $interval1[0] && $interval2[0] <= $interval1[1])\
    \ {\n        $intersection[0] = $interval2[0];\n    } else {\n        return \"\
    NO\";\n    }\n    if ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1])\
    \ {\n        $intersection[1] = $interval1[1];\n    } else if ($interval2[1] >=\
    \ $interval1[0] && $interval2[1] <= $interval1[1]) {\n        $intersection[1]\
    \ = $interval2[1];\n    } else {\n        return \"NO\";\n    }\n    $length =\
    \ $intersection[1] - $intersection[0];\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i <= $length / 2; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "  $intersection = array_intersect($interval1, $interval2);\n \
    \ $length = count($intersection);\n  if ($length == 0) {\n    return \"NO\";\n\
    \  }\n  if ($length == 1) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n", "    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (empty($intersection)) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"NO\";\n   \
    \ }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  $intersection\
    \ = array_intersect($interval1, $interval2);\n  if (count($intersection) == 0)\
    \ {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  if ($length\
    \ == 1) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n", "    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"YES\";\n  \
    \  }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  $interval = array();\n    $interval[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval[1] = min($interval1[1], $interval2[1]);\n    if ($interval[0] >\
    \ $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1] -\
    \ $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2 =\
    \ array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $interval = array();\n    $interval[0] = max($interval1[0],\
    \ $interval2[0]);\n    $interval[1] = min($interval1[1], $interval2[1]);\n   \
    \ if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval[1] - $interval[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if (isPrime($length)) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    if ($length == 2) {\n        return \"NO\";\n    }\n    for ($i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n\
    \        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval1[1] >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <=\
    \ $interval1[1] && $interval2[1] >= $interval1[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if (count($intersection) == 2) {\n        $length\
    \ = $intersection[1] - $intersection[0];\n        if ($length == 1) {\n      \
    \      return \"NO\";\n        }\n        for ($i = 2; $i < $length; $i++) {\n\
    \            if ($length % $i == 0) {\n                return \"NO\";\n      \
    \      }\n        }\n        return \"YES\";\n    }\n    return \"NO\";\n}", " \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    if ($interval1[0] > $interval1[1]) {\n        $temp = $interval1[0];\n\
    \        $interval1[0] = $interval1[1];\n        $interval1[1] = $temp;\n    }\n\
    \    if ($interval2[0] > $interval2[1]) {\n        $temp = $interval2[0];\n  \
    \      $interval2[0] = $interval2[1];\n        $interval2[1] = $temp;\n    }\n\
    \    if ($interval1[1] < $interval2[0] || $interval2[1] < $interval1[0]) {\n \
    \       return \"NO\";\n    }\n    $intersection = array(max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1]));\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if (isPrime($length)) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    $interval1_start = $interval1[0];\n    $interval1_end =\
    \ $interval1[1];\n    $interval2_start = $interval2[0];\n    $interval2_end =\
    \ $interval2[1];\n    $intersection_start = max($interval1_start, $interval2_start);\n\
    \    $intersection_end = min($interval1_end, $interval2_end);\n    if ($intersection_start\
    \ > $intersection_end) {\n        return \"NO\";\n    }\n    $intersection_length\
    \ = $intersection_end - $intersection_start + 1;\n    if ($intersection_length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length;\
    \ $i++) {\n        if ($intersection_length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval = array();\n\
    \    $interval[0] = max($interval1[0], $interval2[0]);\n    $interval[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($interval[0] > $interval[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $interval[1] - $interval[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $intersection = array();\n    if ($interval1[0]\
    \ > $interval2[0]) {\n        $intersection[0] = $interval1[0];\n    } else {\n\
    \        $intersection[0] = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $intersection[1] = $interval1[1];\n    } else {\n        $intersection[1]\
    \ = $interval2[1];\n    }\n    if ($intersection[0] > $intersection[1]) {\n  \
    \      return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length\
    \ == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $intersection = array();\n  \
    \  if ($interval1[0] <= $interval2[0]) {\n        if ($interval1[1] >= $interval2[0])\
    \ {\n            $intersection[0] = $interval2[0];\n            if ($interval1[1]\
    \ <= $interval2[1]) {\n                $intersection[1] = $interval1[1];\n   \
    \         } else {\n                $intersection[1] = $interval2[1];\n      \
    \      }\n        }\n    } else {\n        if ($interval2[1] >= $interval1[0])\
    \ {\n            $intersection[0] = $interval1[0];\n            if ($interval2[1]\
    \ <= $interval1[1]) {\n                $intersection[1] = $interval2[1];\n   \
    \         } else {\n                $intersection[1] = $interval1[1];\n      \
    \      }\n        }\n    }\n    if (empty($intersection)) {\n        return \"\
    NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = array();\n    if ($interval1[0]\
    \ > $interval2[0]) {\n        $intersection[0] = $interval1[0];\n    } else {\n\
    \        $intersection[0] = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $intersection[1] = $interval1[1];\n    } else {\n        $intersection[1]\
    \ = $interval2[1];\n    }\n    if ($intersection[0] > $intersection[1]) {\n  \
    \      return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length\
    \ == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1_start = $interval1[0];\n    $interval1_end\
    \ = $interval1[1];\n    $interval2_start = $interval2[0];\n    $interval2_end\
    \ = $interval2[1];\n    $intersection_start = max($interval1_start, $interval2_start);\n\
    \    $intersection_end = min($interval1_end, $interval2_end);\n    if ($intersection_start\
    \ > $intersection_end) {\n        return \"NO\";\n    }\n    $intersection_length\
    \ = $intersection_end - $intersection_start + 1;\n    if ($intersection_length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($intersection_length == 2) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i < $intersection_length; $i++)\
    \ {\n        if ($intersection_length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1_start = $interval1[0];\n\
    \    $interval1_end = $interval1[1];\n    $interval2_start = $interval2[0];\n\
    \    $interval2_end = $interval2[1];\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    if ($intersection_start > $intersection_end) {\n        return \"NO\";\n\
    \    }\n    $intersection_length = $intersection_end - $intersection_start + 1;\n\
    \    if ($intersection_length <= 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    return isPrime($intersection[1] - $intersection[0] + 1) ? \"YES\" : \"NO\"\
    ;\n}\n", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length < 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    if ($length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    for ($i = 3; $i < $length; $i\
    \ += 2) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    $isPrime = true;\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            $isPrime = false;\n \
    \           break;\n        }\n    }\n    return $isPrime ? \"YES\" : \"NO\";\n\
    }\n\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n\
    \    $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n\
    \    $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    if ($intersection_start > $intersection_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n    if ($intersection_length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length; $i++) {\n      \
    \  if ($intersection_length % $i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    $isPrime = true;\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            $isPrime = false;\n \
    \           break;\n        }\n    }\n    return $isPrime ? \"YES\" : \"NO\";\n\
    }\n", "    $interval = array_intersect($interval1, $interval2);\n    if (empty($interval))\
    \ {\n        return \"NO\";\n    }\n    $length = count($interval);\n    if ($length\
    \ == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval1[1] = min($interval1[1], $interval2[1]);\n    if ($interval1[0]\
    \ > $interval1[1]) {\n        return \"NO\";\n    }\n    $length = $interval1[1]\
    \ - $interval1[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n \
    \   if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection\
    \ = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (empty($intersection)) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length < 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    $length = $intersection[1] - $intersection[0];\n    if\
    \ ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 1) {\n  \
    \      return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n\necho intersection(array(1, 2), array(2, 3)) . \"\
    \\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2 =\
    \ array_map('intval', $interval2);\n    $interval = array_merge($interval1, $interval2);\n\
    \    sort($interval);\n    $interval = array_unique($interval);\n    $intersection\
    \ = array_slice($interval, 1, -1);\n    if (count($intersection) == 0) {\n   \
    \     return \"NO\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_values($intersection);\n    if (count($intersection) == 0) {\n     \
    \   return \"NO\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1, 2),\
    \ array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $intersection\
    \ = array();\n    if ($interval1[0] <= $interval2[0]) {\n        if ($interval1[1]\
    \ >= $interval2[0]) {\n            $intersection[0] = $interval2[0];\n       \
    \     if ($interval1[1] <= $interval2[1]) {\n                $intersection[1]\
    \ = $interval1[1];\n            } else {\n                $intersection[1] = $interval2[1];\n\
    \            }\n        }\n    } else {\n        if ($interval2[1] >= $interval1[0])\
    \ {\n            $intersection[0] = $interval1[0];\n            if ($interval2[1]\
    \ <= $interval1[1]) {\n                $intersection[1] = $interval2[1];\n   \
    \         } else {\n                $intersection[1] = $interval1[1];\n      \
    \      }\n        }\n    }\n    if (count($intersection) == 0) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n", "  $interval1 = array_map('intval', $interval1);\n\
    \  $interval2 = array_map('intval', $interval2);\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (count($intersection) < 2) {\n    return \"NO\";\n  }\n \
    \ $length = max($intersection) - min($intersection);\n  return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] <= $intersection[1]) {\n        $length\
    \ = $intersection[1] - $intersection[0] + 1;\n        if ($length == 1) {\n  \
    \          return \"NO\";\n        }\n        for ($i = 2; $i < $length; $i++)\
    \ {\n            if ($length % $i == 0) {\n                return \"NO\";\n  \
    \          }\n        }\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    $intersection = array();\n    if ($interval1[0] > $interval2[0]) {\n\
    \        $intersection[0] = $interval1[0];\n    } else {\n        $intersection[0]\
    \ = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1]) {\n        $intersection[1]\
    \ = $interval1[1];\n    } else {\n        $intersection[1] = $interval2[1];\n\
    \    }\n    if ($intersection[0] > $intersection[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $intersect = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (count($intersect)\
    \ == 0) {\n        return \"NO\";\n    } else {\n        $length = count($intersect);\n\
    \        if ($length == 1) {\n            return \"NO\";\n        } else {\n \
    \           for ($i = 2; $i < $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    return \"NO\";\n                }\n        \
    \    }\n            return \"YES\";\n        }\n    }\n}", "    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) > 0)\
    \ {\n        $length = max($intersection) - min($intersection);\n        if (isPrime($length))\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if ($length < 0) {\n        return \"NO\";\n    }\n\
    \    $isPrime = true;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $isPrime = false;\n            break;\n        }\n\
    \    }\n    if ($isPrime) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}\n", "    $interval1 = array_unique($interval1);\n    $interval2\
    \ = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if (isPrime($length)) {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";\n}", "    $intersection = array();\n\
    \    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n\
    \        $intersection[0] = $interval2[0];\n    } else if ($interval2[0] <= $interval1[0]\
    \ && $interval2[1] >= $interval1[0]) {\n        $intersection[0] = $interval1[0];\n\
    \    } else {\n        return \"NO\";\n    }\n    if ($interval1[1] <= $interval2[1])\
    \ {\n        $intersection[1] = $interval1[1];\n    } else {\n        $intersection[1]\
    \ = $interval2[1];\n    }\n    if ($intersection[0] == $intersection[1]) {\n \
    \       return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ <= $length / 2; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n\
    \        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval1[1] >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <=\
    \ $interval1[1] && $interval2[1] >= $interval1[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if (count($intersection) == 0) {\n        return\
    \ \"NO\";\n    }\n    $intersection = array_unique($intersection);\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length == 1) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n    \
    \    if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    if (isPrime(count($intersection)))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    $intersection_start\
    \ = max($interval1_start, $interval2_start);\n    $intersection_end = min($interval1_end,\
    \ $interval2_end);\n    if ($intersection_start > $intersection_end) {\n     \
    \   return \"NO\";\n    }\n    $intersection_length = $intersection_end - $intersection_start\
    \ + 1;\n    if ($intersection_length <= 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = $intersection[count($intersection) - 1] - $intersection[0];\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n  \
    \  $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n  \
    \  $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    if ($intersection_start > $intersection_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n    if ($intersection_length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length; $i++) {\n      \
    \  if ($intersection_length % $i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    $intersection = count($intersection);\n\
    \    if ($intersection == 0) {\n        return \"NO\";\n    }\n    $prime = true;\n\
    \    for ($i = 2; $i < $intersection; $i++) {\n        if ($intersection % $i\
    \ == 0) {\n            $prime = false;\n            break;\n        }\n    }\n\
    \    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", " \
    \   $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 0) {\n     \
    \   return \"NO\";\n    }\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersect = array();\n \
    \   $intersect[0] = max($interval1[0], $interval2[0]);\n    $intersect[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersect[0] > $intersect[1]) {\n        return \"\
    NO\";\n    }\n    $length = $intersect[1] - $intersect[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n", "  $intersection = array_intersect($interval1, $interval2);\n\
    \  if (empty($intersection)) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n\
    \  if ($length == 1) {\n    return \"NO\";\n  }\n  if ($length == 2) {\n    return\
    \ \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $interval1\
    \ = array_values($interval1);\n    $interval2 = array_values($interval2);\n  \
    \  $interval = array();\n    if ($interval1[0] > $interval2[0]) {\n        $interval[0]\
    \ = $interval1[0];\n    } else {\n        $interval[0] = $interval2[0];\n    }\n\
    \    if ($interval1[1] < $interval2[1]) {\n        $interval[1] = $interval1[1];\n\
    \    } else {\n        $interval[1] = $interval2[1];\n    }\n    if ($interval[0]\
    \ > $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1]\
    \ - $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $intersection = array();\n  \
    \  if ($interval1[0] <= $interval2[0]) {\n        $intersection[0] = $interval2[0];\n\
    \    } else {\n        $intersection[0] = $interval1[0];\n    }\n    if ($interval1[1]\
    \ <= $interval2[1]) {\n        $intersection[1] = $interval1[1];\n    } else {\n\
    \        $intersection[1] = $interval2[1];\n    }\n    if ($intersection[0] >\
    \ $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", " \
    \ $intersection = array();\n  if ($interval1[0] > $interval2[0]) {\n    $intersection[0]\
    \ = $interval1[0];\n  } else {\n    $intersection[0] = $interval2[0];\n  }\n \
    \ if ($interval1[1] < $interval2[1]) {\n    $intersection[1] = $interval1[1];\n\
    \  } else {\n    $intersection[1] = $interval2[1];\n  }\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  $isPrime\
    \ = true;\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n\
    \      $isPrime = false;\n      break;\n    }\n  }\n  if ($isPrime) {\n    return\
    \ \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (count($intersection)\
    \ > 0) {\n        return isPrime(count($intersection)) ? \"YES\" : \"NO\";\n \
    \   }\n    return \"NO\";\n}\n", "    $interval1_start = $interval1[0];\n    $interval1_end\
    \ = $interval1[1];\n    $interval2_start = $interval2[0];\n    $interval2_end\
    \ = $interval2[1];\n    $intersection_start = max($interval1_start, $interval2_start);\n\
    \    $intersection_end = min($interval1_end, $interval2_end);\n    if ($intersection_start\
    \ > $intersection_end) {\n        return \"NO\";\n    }\n    $intersection_length\
    \ = $intersection_end - $intersection_start + 1;\n    if ($intersection_length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length;\
    \ $i++) {\n        if ($intersection_length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2\
    \ = [$interval2[0], $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_unique($intersection);\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n \
    \       return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}", "    $intersection = array_intersect($interval1, $interval2);\n\
    \    $length = count($intersection);\n    if ($length == 0) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\";\n    }\n  \
    \  if ($length == 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    $length = $intersection[1] - $intersection[0];\n    if\
    \ ($length <= 0) {\n        return \"NO\";\n    }\n    if ($length == 1) {\n \
    \       return \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersect = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    if (count($intersect) == 0) {\n \
    \       return \"NO\";\n    }\n    $length = count($intersect);\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    $prime = true;\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            $prime\
    \ = false;\n            break;\n        }\n    }\n    if ($prime) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = range($interval1[0],\
    \ $interval1[1]);\n    $interval2 = range($interval2[0], $interval2[1]);\n   \
    \ $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ === 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length === 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[1]\
    \ < $interval2[0] || $interval2[1] < $interval1[0]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_unique($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $length = count($intersection);\n    if\
    \ ($length == 0) {\n        return \"NO\";\n    }\n    $prime = true;\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   $prime = false;\n            break;\n        }\n    }\n    if ($prime) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", " \
    \   $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n\
    \    $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n\
    \    $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    if ($intersection_start > $intersection_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n    if ($intersection_length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length; $i++) {\n      \
    \  if ($intersection_length % $i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = array();\n    if ($interval1[0]\
    \ >= $interval2[0] && $interval1[0] <= $interval2[1]) {\n        $intersection[]\
    \ = $interval1[0];\n    }\n    if ($interval1[1] >= $interval2[0] && $interval1[1]\
    \ <= $interval2[1]) {\n        $intersection[] = $interval1[1];\n    }\n    if\
    \ ($interval2[0] >= $interval1[0] && $interval2[0] <= $interval1[1]) {\n     \
    \   $intersection[] = $interval2[0];\n    }\n    if ($interval2[1] >= $interval1[0]\
    \ && $interval2[1] <= $interval1[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n\
    \    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $interval1_start = $interval1[0];\n\
    \    $interval1_end = $interval1[1];\n    $interval2_start = $interval2[0];\n\
    \    $interval2_end = $interval2[1];\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    $intersection_length = $intersection_end - $intersection_start;\n    if ($intersection_length\
    \ < 0) {\n        return \"NO\";\n    }\n    if (is_prime($intersection_length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (empty($intersection)) {\n\
    \        return \"NO\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1Start = $interval1[0];\n   \
    \ $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End\
    \ = $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    if ($intersectionStart\
    \ > $intersectionEnd) {\n        return \"NO\";\n    }\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart + 1;\n    if ($intersectionLength ==\
    \ 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength;\
    \ $i++) {\n        if ($intersectionLength % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    $length\
    \ = $end - $start;\n    if ($length < 0) {\n        return \"NO\";\n    }\n  \
    \  if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n\
    \        return \"YES\";\n    }\n    if ($length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    for ($i = 3; $i < sqrt($length); $i += 2) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    if ($intersectionStart\
    \ > $intersectionEnd) {\n        return \"NO\";\n    }\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart + 1;\n    if ($intersectionLength ==\
    \ 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength;\
    \ $i++) {\n        if ($intersectionLength % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 0)\
    \ {\n        return \"YES\";\n    }\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "\t$intersection\
    \ = array();\n\t$intersection[0] = max($interval1[0], $interval2[0]);\n\t$intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n\tif ($intersection[0] > $intersection[1])\
    \ {\n\t\treturn \"NO\";\n\t}\n\t$length = $intersection[1] - $intersection[0]\
    \ + 1;\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $length;\
    \ $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\t\
    return \"YES\";\n}\n", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "  $interval1 = array_map('intval', $interval1);\n\
    \  $interval2 = array_map('intval', $interval2);\n  $intersection = array();\n\
    \  $intersection[0] = max($interval1[0], $interval2[0]);\n  $intersection[1] =\
    \ min($interval1[1], $interval2[1]);\n  if ($intersection[0] > $intersection[1])\
    \ {\n    return \"NO\";\n  }\n  $length = $intersection[1] - $intersection[0]\
    \ + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart + 1;\n    if ($intersectionLength == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength; $i++) {\n       \
    \ if ($intersectionLength % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  if ($start > $end) {\n    return \"NO\";\n  }\n  $length\
    \ = $end - $start + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $intersection = array();\n  \
    \  $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if(count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    $length = max($intersection) - min($intersection);\n\
    \    if($length == 1) {\n        return \"NO\";\n    }\n    for($i = 2; $i <=\
    \ sqrt($length); $i++) {\n        if($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = [];\n\
    \    $intersection[] = max($interval1[0], $interval2[0]);\n    $intersection[]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] <= $intersection[1])\
    \ {\n        $length = $intersection[1] - $intersection[0] + 1;\n        if ($length\
    \ == 1) {\n            return \"NO\";\n        }\n        for ($i = 2; $i < $length;\
    \ $i++) {\n            if ($length % $i == 0) {\n                return \"NO\"\
    ;\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n", "    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if ($length <= 0) {\n        return \"NO\";\n    }\n\
    \    return isPrime($length) ? \"YES\" : \"NO\";\n}\n", "    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    if ($interval1[0] <= $interval2[0]) {\n        $intersection[0] = $interval2[0];\n\
    \    } else {\n        $intersection[0] = $interval1[0];\n    }\n    if ($interval1[1]\
    \ <= $interval2[1]) {\n        $intersection[1] = $interval1[1];\n    } else {\n\
    \        $intersection[1] = $interval2[1];\n    }\n    if ($intersection[0] >\
    \ $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = array_values($interval1);\n    $interval2 = array_values($interval2);\n\
    \    $intersection = array();\n    if ($interval1[0] <= $interval2[0]) {\n   \
    \     $intersection[0] = $interval2[0];\n    } else {\n        $intersection[0]\
    \ = $interval1[0];\n    }\n    if ($interval1[1] >= $interval2[1]) {\n       \
    \ $intersection[1] = $interval2[1];\n    } else {\n        $intersection[1] =\
    \ $interval1[1];\n    }\n    if ($intersection[0] > $intersection[1]) {\n    \
    \    return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"\\n\";\necho intersection(array(-1, 1), array(0, 4));\n\
    echo \"\\n\";\necho intersection(array(-3, -1), array(-5, 5));\necho \"\\n\";",
  "    $intersection = array_intersect($interval1, $interval2);\n    $length = count($intersection);\n\
    \    if ($length == 0) {\n        return \"NO\";\n    }\n    if ($length == 1)\
    \ {\n        return \"YES\";\n    }\n    if ($length == 2) {\n        return \"\
    NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n", "    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1\
    \ = array_values($interval1);\n    $interval2 = array_values($interval2);\n  \
    \  $intersection = array();\n    if ($interval1[0] > $interval2[0]) {\n      \
    \  $intersection[0] = $interval1[0];\n    } else {\n        $intersection[0] =\
    \ $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1]) {\n        $intersection[1]\
    \ = $interval1[1];\n    } else {\n        $intersection[1] = $interval2[1];\n\
    \    }\n    if ($intersection[0] > $intersection[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = range($interval1[0],\
    \ $interval1[1]);\n    $interval2 = range($interval2[0], $interval2[1]);\n   \
    \ $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = count($intersection);\n    if ($intersection == 0) {\n        return \"NO\"\
    ;\n    }\n    if (isPrime($intersection)) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) > 0) {\n        $intersection = array_unique($intersection);\n\
    \        $length = count($intersection);\n        if ($length > 1) {\n       \
    \     for ($i = 2; $i < $length; $i++) {\n                if ($length % $i ==\
    \ 0) {\n                    return \"NO\";\n                }\n            }\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n", "  \
    \  $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    $isPrime = true;\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            $isPrime\
    \ = false;\n            break;\n        }\n    }\n    return $isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "  $interval1[0] = max($interval1[0], $interval2[0]);\n  $interval1[1]\
    \ = min($interval1[1], $interval2[1]);\n  if ($interval1[0] > $interval1[1]) {\n\
    \    return \"NO\";\n  }\n  $length = $interval1[1] - $interval1[0] + 1;\n  if\
    \ ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++)\
    \ {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n", "    $intersection = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    if (count($intersection) == 0) {\n\
    \        return \"NO\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = max($intersection) - min($intersection);\n    if ($length == 1) {\n      \
    \  return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
