name: HumanEval_77_iscube
language: php
prompt: "<?php\n// Write a function that takes an integer a and returns True \n//\
  \ if this ingeger is a cube of some integer number.\n// Note: you may assume the\
  \ input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
  // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
  // true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n"
tests: "function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729)\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$b = abs($a);\n\t$c = round(pow($b,\
    \ 1/3));\n\tif ($c * $c * $c == $b) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n", "    $b = $a;\n    while ($b > 0) {\n        if ($b == 1) {\n          \
    \  return true;\n        }\n        if ($b % 3 != 0) {\n            return false;\n\
    \        }\n        $b = $b / 3;\n    }\n    return true;\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    $c\
    \ = pow($a, 1/3);\n    if (is_int($c)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "    if ($a == 0) {\n \
    \       return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n   \
    \ $b = round(pow($a, 1/3));\n    if ($b * $b * $b == $a) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if ($a == 0) {\n        return true;\n \
    \   }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i\
    \ * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n", "    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  for ($i = 1; $i < $a; $i++) {\n        if ($i * $i * $i == $a) {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n", "    if ($a == 0)\
    \ {\n        return true;\n    } elseif ($a < 0) {\n        $a = -$a;\n    }\n\
    \    $b = round(pow($a, 1/3));\n    if ($b * $b * $b == $a) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "\t$b = $a;\n\t$c =\
    \ 0;\n\twhile ($b > 0) {\n\t\t$c++;\n\t\t$b = $b / 2;\n\t}\n\t$d = pow(2, $c);\n\
    \tif ($d == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n\necho iscube(1) . \"\
    \\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "\t$cube\
    \ = pow($a, 1/3);\n\tif(is_int($cube)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);", "    if ($a == 0) {\n        return true;\n\
    \    }\n    $b = abs($a);\n    $c = round(pow($b, 1/3));\n    if ($c * $c * $c\
    \ == $b) {\n        return true;\n    }\n    return false;\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "  return\
    \ $a == 0 ? true : $a == 1 ? true : $a == -1 ? true : $a == 8 ? true : false;\n\
    }\n", "    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n  \
    \      $a = -$a;\n    }\n    $root = round(pow($a, 1/3));\n    return $root *\
    \ $root * $root == $a;\n}\n", "\t$result = false;\n\tif ($a == 0) {\n\t\t$result\
    \ = true;\n\t} else {\n\t\t$i = 1;\n\t\twhile ($i * $i * $i <= abs($a)) {\n\t\t\
    \tif ($i * $i * $i == abs($a)) {\n\t\t\t\t$result = true;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $result;\n}\n", "\tif ($a < 0) {\n\t\t\
    $a = -$a;\n\t}\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i <=\
    \ $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\n", "    if ($a == 0) {\n        return true;\n    }\n    if\
    \ ($a < 0) {\n        $a = -$a;\n    }\n    $x = 1;\n    while ($x * $x * $x <\
    \ $a) {\n        $x++;\n    }\n    if ($x * $x * $x == $a) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if ($a == 0) {\n        return true;\n \
    \   }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i\
    \ * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . PHP_EOL;\n\
    echo iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\n\
    echo iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;", "\t$b = $a;\n\t$c = 0;\n\
    \twhile ($b > 0) {\n\t\t$c++;\n\t\t$b = $b / 2;\n\t}\n\tif ($c % 3 == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);", "   \
    \ $cube = $a * $a * $a;\n    if ($cube == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\n", "\tif ($a < 0) {\n\t\t$a = -$a;\n\
    \t}\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\
    \t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
