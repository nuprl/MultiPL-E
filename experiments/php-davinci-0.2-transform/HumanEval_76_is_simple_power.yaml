name: HumanEval_76_is_simple_power
language: php
prompt: "<?php\n// Your task is to write a function that returns true if a number\
  \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
  \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
  \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
  \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>>\
  \ is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n"
tests: "function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  return pow($n, intval(log($x, $n))) == $x;\n}", "  $i = 1;\n  while\
    \ (pow($n, $i) <= $x) {\n    if (pow($n, $i) == $x) {\n      return true;\n  \
    \  }\n    $i++;\n  }\n  return false;\n}", "  $i = 1;\n  while ($i <= $x) {\n\
    \    if ($i == $x) {\n      return true;\n    }\n    $i *= $n;\n  }\n  return\
    \ false;\n}", "  $power = log($x, $n);\n  return $power == (int)$power;\n}\n",
  "  $power = 1;\n  while ($power <= $x) {\n    if ($power == $x) {\n      return\
    \ true;\n    }\n    $power *= $n;\n  }\n  return false;\n}", "    $int = log($x,\
    \ $n);\n    return $int == floor($int);\n}\n", "  if ($x == 1) {\n    return true;\n\
    \  }\n  if ($x == $n) {\n    return true;\n  }\n  $i = 1;\n  while ($i < $x) {\n\
    \    $i *= $n;\n    if ($i == $x) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\necho is_simple_power(1, 4) . PHP_EOL;\necho is_simple_power(2,\
    \ 2) . PHP_EOL;\necho is_simple_power(8, 2) . PHP_EOL;\necho is_simple_power(3,\
    \ 2) . PHP_EOL;\necho is_simple_power(3, 1) . PHP_EOL;\necho is_simple_power(5,\
    \ 3) . PHP_EOL;", "  $i = 1;\n  while ($i < $x) {\n    $i *= $n;\n  }\n  return\
    \ $i == $x;\n}", "  $power = 0;\n  while ($x > 1) {\n    $x /= $n;\n    $power++;\n\
    \  }\n  return $x == 1;\n}", "  $power = log($x, $n);\n  return is_int($power);\n\
    }", "  return $x == pow($n, round(log($x) / log($n)));\n}", "  $power = log($x,\
    \ $n);\n  return (is_int($power)) ? true : false;\n}", "  $int = log($x, $n);\n\
    \  return $int == floor($int);\n}", "  $power = log($x, $n);\n  return $power\
    \ == (int)$power;\n}\n", "    if ($x == 1) {\n        return true;\n    }\n  \
    \  $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n        if ($i == $x) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "    $i\
    \ = 1;\n    while ($i < $x) {\n        $i *= $n;\n    }\n    return $i == $x;\n\
    }", "  $pow = pow($n, 1);\n  $i = 1;\n  while ($pow <= $x) {\n    if ($pow ==\
    \ $x) {\n      return true;\n    }\n    $i++;\n    $pow = pow($n, $i);\n  }\n\
    \  return false;\n}", "  $int = log($x, $n);\n  if (is_int($int)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "    $int = log($x, $n);\n\
    \    return $int == floor($int);\n}", "  $result = pow($n, round(log($x, $n)));\n\
    \  return $result == $x;\n}\n\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
