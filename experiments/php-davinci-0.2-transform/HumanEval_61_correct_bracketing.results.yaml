language: php
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    if ($count\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $open++;\n    } else {\n      $open--;\n    }\n    if ($open\
    \ < 0) {\n      return false;\n    }\n  }\n  return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (empty($stack)) {\n              \
    \  return false;\n            }\n            array_pop($stack);\n        }\n \
    \   }\n    return empty($stack);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $open++;\n    } else {\n      $open--;\n    }\n    if ($open\
    \ < 0) {\n      return false;\n    }\n  }\n  return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$opening = 0;\n\t$closing = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$opening++;\n\t\t} else {\n\
    \t\t\t$closing++;\n\t\t}\n\t\tif ($closing > $opening) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($opening == $closing) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_array_length =\
    \ count($brackets_array);\n    $brackets_array_length_half = $brackets_array_length\
    \ / 2;\n    $brackets_array_length_half_ceil = ceil($brackets_array_length_half);\n\
    \    $brackets_array_length_half_floor = floor($brackets_array_length_half);\n\
    \    $brackets_array_length_half_floor_minus_one = $brackets_array_length_half_floor\
    \ - 1;\n    $brackets_array_length_half_floor_plus_one = $brackets_array_length_half_floor\
    \ + 1;\n    $brackets_array_length_half_floor_plus_two = $brackets_array_length_half_floor\
    \ + 2;\n    $brackets_array_length_half_floor_plus_three = $brackets_array_length_half_floor\
    \ + 3;\n    $brackets_array_length_half_floor_plus_four = $brackets_array_length_half_floor\
    \ + 4;\n    $brackets_array_length_half_floor_plus_five = $brackets_array_length_half_floor\
    \ + 5;\n    $brackets_array_length_half_floor_plus_six = $brackets_array_length_half_floor\
    \ + 6;\n    $brackets_array_length_half_floor_plus_seven = $brackets_array_length_half_floor\
    \ + 7;\n    $brackets_array_length_half_floor_plus_eight = $brackets_array_length_half_floor\
    \ + 8;\n    $brackets_array_length_half_floor_plus_nine = $brackets_array_length_half_floor\
    \ + 9;\n    $brackets_array_length_half_floor_plus_ten = $brackets_array_length_half_floor\
    \ + 10;\n    $brackets_array_length_half_floor_plus_eleven = $brackets_array_length_half_floor\
    \ + 11;\n    $brackets_array_length_half_floor_plus_twelve = $br\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpalm7ym43.php on line 31

    '
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count\
    \ < 0) {\n      return false;\n    }\n  }\n  return $count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } else {\n            $close_brackets++;\n        }\n        if ($close_brackets\
    \ > $open_brackets) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } else {\n            $close_brackets++;\n        }\n        if ($close_brackets\
    \ > $open_brackets) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets += 1;\n        } elseif ($bracket == \")\") {\n  \
    \          $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n\
    \            return false;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } else {\n            $close_brackets++;\n        }\n        if ($close_brackets\
    \ > $open_brackets) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730563
