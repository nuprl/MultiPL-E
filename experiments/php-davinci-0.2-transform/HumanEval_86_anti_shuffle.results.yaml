language: php
name: HumanEval_86_anti_shuffle
results:
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzr099igu.php:37\nStack trace:\n#0 /tmp/tmpzr099igu.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzr099igu.php on line 37\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\"\
    ;\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp8lxiue5p.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmp8lxiue5p.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp8lxiue5p.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmp8lxiue5p.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp8lxiue5p.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmp8lxiue5p.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmp8lxiue5p.php on line\
    \ 19\n\nWarning: implode(): Argument must be an array in /tmp/tmp8lxiue5p.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp8lxiue5p.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmp8lxiue5p.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8lxiue5p.php:33\nStack trace:\n#0 /tmp/tmp8lxiue5p.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8lxiue5p.php on line 33\n"
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"\
    hello\");\necho \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp33a5fmqz.php:18\nStack trace:\n#0 /tmp/tmp33a5fmqz.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp33a5fmqz.php(28): candidate('Hi')\n#2 /tmp/tmp33a5fmqz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33a5fmqz.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpikxep6o3.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpikxep6o3.php:34\nStack trace:\n#0 /tmp/tmpikxep6o3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikxep6o3.php on line 34\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        sort($word);\n        return implode(\"\", $word);\n    }, $new_words);\n\
    \    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key != count($new_words) - 1) {\n            $new_s .= \" \";\n\
    \        }\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $result[] = implode(array_map(\"chr\", range(ord(\"a\"), ord(\"z\"))));\n\
    \    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pb2puay.php:28\n\
    Stack trace:\n#0 /tmp/tmp8pb2puay.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8pb2puay.php\
    \ on line 28\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmh8oypl.php:29\n\
    Stack trace:\n#0 /tmp/tmpjmh8oypl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjmh8oypl.php\
    \ on line 29\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpj_ckn257.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpj_ckn257.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ckn257.php:31\n\
    Stack trace:\n#0 /tmp/tmpj_ckn257.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj_ckn257.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpbihzfaqz.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmpbihzfaqz.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpbihzfaqz.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmpbihzfaqz.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpbihzfaqz.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmpbihzfaqz.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbihzfaqz.php:31\nStack trace:\n\
    #0 /tmp/tmpbihzfaqz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbihzfaqz.php\
    \ on line 31\n"
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key !== count($new_words) - 1) {\n            $new_s .= \" \";\n\
    \        }\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $i\
    \ => $word) {\n        sort($new_words[$i]);\n    }\n    $new_string = \"\";\n\
    \    foreach ($new_words as $i => $word) {\n        $new_string .= implode($new_words[$i]);\n\
    \        if ($i < count($new_words) - 1) {\n            $new_string .= \" \";\n\
    \        }\n    }\n    return $new_string;\n}\n\necho anti_shuffle(\"Hi\") . \"\
    \\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $chars = str_split($word);\n        sort($chars);\n        $new_words[]\
    \ = implode(\"\", $chars);\n    }\n    return implode(\" \", $new_words);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = str_split($word);\n    sort($result[count($result) - 1]);\n    $result[count($result)\
    \ - 1] = implode(\"\", $result[count($result) - 1]);\n  }\n  return implode(\"\
    \ \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1gdz30l.php:29\n\
    Stack trace:\n#0 /tmp/tmpf1gdz30l.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpf1gdz30l.php\
    \ on line 29\n"
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    $new_words[$key] = implode($new_words[$key]);\n  }\n  return implode(\"\
    \ \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $index\
    \ => $word) {\n        sort($new_arr[$index]);\n    }\n    $new_str = \"\";\n\
    \    foreach ($new_arr as $word) {\n        $new_str .= implode(\"\", $word) .\
    \ \" \";\n    }\n    return trim($new_str);\n}\necho anti_shuffle(\"Hi\") . \"\
    \\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_s = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_s .= implode($new_arr[$key]) .\
    \ \" \";\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\n\
    echo anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpl1e3f1fu.php:37\nStack trace:\n#0 /tmp/tmpl1e3f1fu.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpl1e3f1fu.php on line 37\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\"\
    ) . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nhello \nHello World!!! \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7d4n_act.php:31\nStack trace:\n#0 /tmp/tmp7d4n_act.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7d4n_act.php on line 31\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_sentence = \"\"\
    ;\n    foreach ($new_words as $word) {\n        $new_sentence .= implode(\"\"\
    , $word) . \" \";\n    }\n    return $new_sentence;\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpcbw0btd8.php:38\nStack trace:\n#0 /tmp/tmpcbw0btd8.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcbw0btd8.php on line 38\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpkr2gxg3c.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpkr2gxg3c.php:19\nStack trace:\n#0 /tmp/tmpkr2gxg3c.php(19):\
    \ sort('Array')\n#1 /tmp/tmpkr2gxg3c.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpkr2gxg3c.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $value) {\n        $new_str .= implode(\"\", $value) . \" \";\n\
    \    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0n9tr_9h.php:37\nStack trace:\n#0 /tmp/tmp0n9tr_9h.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0n9tr_9h.php on line 37\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    $new_words[$key] = implode(\"\", $word);\n  }\n  return implode(\" \"\
    , $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpj28wirwf.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpj28wirwf.php:19\nStack trace:\n#0 /tmp/tmpj28wirwf.php(19):\
    \ sort('Array')\n#1 /tmp/tmpj28wirwf.php(27): anti_shuffle('Hi')\n#2 /tmp/tmpj28wirwf.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmpj28wirwf.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpj28wirwf.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp4qrxt3ie.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp4qrxt3ie.php:19\nStack trace:\n#0 /tmp/tmp4qrxt3ie.php(19):\
    \ sort('Array')\n#1 /tmp/tmp4qrxt3ie.php(27): anti_shuffle('Hi')\n#2 /tmp/tmp4qrxt3ie.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmp4qrxt3ie.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp4qrxt3ie.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpgmqkqy2g.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpgmqkqy2g.php:19\nStack trace:\n#0 /tmp/tmpgmqkqy2g.php(19):\
    \ sort('Array')\n#1 /tmp/tmpgmqkqy2g.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpgmqkqy2g.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str\
    \ = [];\n    foreach ($new_words as $new_word) {\n        $new_words_str[] = implode($new_word);\n\
    \    }\n    return implode(\" \", $new_words_str);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\n\
    echo \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpr9d8dgl8.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpr9d8dgl8.php:19\nStack trace:\n#0 /tmp/tmpr9d8dgl8.php(19):\
    \ sort('Array')\n#1 /tmp/tmpr9d8dgl8.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpr9d8dgl8.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n\
    \    return implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode($result[count($result) - 1]);\n\
    \    }\n    return implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\
    \\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = array();\n    foreach ($words as $word)\
    \ {\n        $chars = str_split($word);\n        sort($chars);\n        $result[]\
    \ = implode(\"\", $chars);\n    }\n    return implode(\" \", $result);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\n\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp3iepfvjd.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp3iepfvjd.php:19\nStack trace:\n#0 /tmp/tmp3iepfvjd.php(19):\
    \ sort('Array')\n#1 /tmp/tmp3iepfvjd.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmp3iepfvjd.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp4qrxt3ie.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp4qrxt3ie.php:19\nStack trace:\n#0 /tmp/tmp4qrxt3ie.php(19):\
    \ sort('Array')\n#1 /tmp/tmp4qrxt3ie.php(27): anti_shuffle('Hi')\n#2 /tmp/tmp4qrxt3ie.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmp4qrxt3ie.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp4qrxt3ie.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $chars = str_split($word);\n        sort($chars);\n        $result[]\
    \ = implode($chars);\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $output = \"\";\n    foreach ($words as $word) {\n\
    \        $output .= str_split($word);\n        sort($output);\n        $output\
    \ .= \" \";\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpjrdphntg.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpjrdphntg.php:19\nStack trace:\n#0 /tmp/tmpjrdphntg.php(19):\
    \ sort('Array')\n#1 /tmp/tmpjrdphntg.php(26): anti_shuffle('Hi')\n#2 /tmp/tmpjrdphntg.php(30):\
    \ candidate('Hi')\n#3 /tmp/tmpjrdphntg.php(39): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpjrdphntg.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $word = str_split($word);\n        sort($word);\n        $result[] = implode(\"\
    \", $word);\n    }\n    return implode(\" \", $result);\n}\n\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = join(\"\", str_split($word));\n    }\n    return join(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zvj0bs3.php:29\n\
    Stack trace:\n#0 /tmp/tmp2zvj0bs3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2zvj0bs3.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_string =\
    \ [];\n    foreach ($new_words as $word) {\n        $new_words_string[] = implode($word);\n\
    \    }\n    return implode(\" \", $new_words_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode($result);\n        $result .= \" \";\n    }\n    return $result;\n}\n\
    \necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\"\
    ;\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpdurzfbos.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpdurzfbos.php:19\nStack trace:\n#0 /tmp/tmpdurzfbos.php(19):\
    \ sort('Array')\n#1 /tmp/tmpdurzfbos.php(26): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpdurzfbos.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  $new_words_str = [];\n  foreach ($new_words\
    \ as $word) {\n    $new_words_str[] = implode(\"\", $word);\n  }\n  return implode(\"\
    \ \", $new_words_str);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        sort($word);\n        return implode(\"\", $word);\n    }, $new_words);\n\
    \    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str\
    \ = [];\n    foreach ($new_words as $new_word) {\n        $new_words_str[] = implode(\"\
    \", $new_word);\n    }\n    return implode(\" \", $new_words_str);\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw63n0u9w.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw63n0u9w.php:19\nStack trace:\n#0 /tmp/tmpw63n0u9w.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw63n0u9w.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpw63n0u9w.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode(str_split($word), \"\");\n  }\n  return implode($result, \" \");\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #2 ($array) must\
    \ be of type ?array, string given in /tmp/tmpxe6fkvk7.php:18\nStack trace:\n#0\
    \ /tmp/tmpxe6fkvk7.php(18): implode(Array, '')\n#1 /tmp/tmpxe6fkvk7.php(23): anti_shuffle('Hi')\n\
    #2 {main}\n  thrown in /tmp/tmpxe6fkvk7.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(array_map(\"chr\", range(ord(\"a\"), ord(\"z\"\
    ))));\n    }\n    return implode(\" \", $new_words);\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\
    \ abcdefghijklmnopqrstuvwxyz\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4sedn2ck.php:30\nStack trace:\n#0 /tmp/tmp4sedn2ck.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4sedn2ck.php on line 30\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    foreach ($s as $key => $value) {\n        $s[$key]\
    \ = str_split($value);\n        sort($s[$key]);\n        $s[$key] = implode(\"\
    \", $s[$key]);\n    }\n    return implode(\" \", $s);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_string = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_string\
    \ .= implode($new_arr[$key]) . \" \";\n  }\n  return $new_string;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ar7ts9k.php:35\n\
    Stack trace:\n#0 /tmp/tmp0ar7ts9k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0ar7ts9k.php\
    \ on line 35\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = [];\n\
    \    foreach ($new_words as $word) {\n        $new_string[] = implode(\"\", $word);\n\
    \    }\n    return implode(\" \", $new_string);\n}\n\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvcbis3q.php:28\n\
    Stack trace:\n#0 /tmp/tmpxvcbis3q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxvcbis3q.php\
    \ on line 28\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n\
    \    return implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0z0kcpii.php:29\n\
    Stack trace:\n#0 /tmp/tmp0z0kcpii.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0z0kcpii.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw63n0u9w.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw63n0u9w.php:19\nStack trace:\n#0 /tmp/tmpw63n0u9w.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw63n0u9w.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpw63n0u9w.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpj_ckn257.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpj_ckn257.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ckn257.php:31\n\
    Stack trace:\n#0 /tmp/tmpj_ckn257.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj_ckn257.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9wq395gg.php:37\nStack trace:\n#0 /tmp/tmp9wq395gg.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9wq395gg.php on line 37\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp4qrxt3ie.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp4qrxt3ie.php:19\nStack trace:\n#0 /tmp/tmp4qrxt3ie.php(19):\
    \ sort('Array')\n#1 /tmp/tmp4qrxt3ie.php(27): anti_shuffle('Hi')\n#2 /tmp/tmp4qrxt3ie.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmp4qrxt3ie.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp4qrxt3ie.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpj_ckn257.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpj_ckn257.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ckn257.php:31\n\
    Stack trace:\n#0 /tmp/tmpj_ckn257.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj_ckn257.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw4gn9_8k.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw4gn9_8k.php:19\nStack trace:\n#0 /tmp/tmpw4gn9_8k.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw4gn9_8k.php(26): anti_shuffle('Hi')\n#2 /tmp/tmpw4gn9_8k.php(30):\
    \ candidate('Hi')\n#3 /tmp/tmpw4gn9_8k.php(39): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpw4gn9_8k.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkpmjetul.php:32\nStack trace:\n#0 /tmp/tmpkpmjetul.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkpmjetul.php on line 32\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpah14spda.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpah14spda.php:19\nStack trace:\n#0 /tmp/tmpah14spda.php(19):\
    \ sort('Array')\n#1 /tmp/tmpah14spda.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpah14spda.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpzb87vwdq.php:18\nStack trace:\n#0 /tmp/tmpzb87vwdq.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpzb87vwdq.php(28): candidate('Hi')\n#2 /tmp/tmpzb87vwdq.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzb87vwdq.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp5g6m25vr.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp5g6m25vr.php:19\nStack trace:\n#0 /tmp/tmp5g6m25vr.php(19):\
    \ sort('Array')\n#1 /tmp/tmp5g6m25vr.php(27): anti_shuffle('Hi')\n#2 /tmp/tmp5g6m25vr.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmp5g6m25vr.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp5g6m25vr.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_sentence = [];\n\
    \    foreach ($new_words as $word) {\n        $new_sentence[] = implode($word);\n\
    \    }\n    return implode(\" \", $new_sentence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $res = [];\n    foreach ($arr as $word) {\n     \
    \   $res[] = join(\"\", str_split($word));\n    }\n    return join(\" \", $res);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75qe8831.php:29\n\
    Stack trace:\n#0 /tmp/tmp75qe8831.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp75qe8831.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_string = \"\";\n \
    \   foreach ($new_arr as $key => $value) {\n        $new_string .= implode($new_arr[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjvb7goy.php:35\n\
    Stack trace:\n#0 /tmp/tmprjvb7goy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprjvb7goy.php\
    \ on line 35\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $word)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $word)\
    \ {\n        $result[$key] = implode($result[$key]);\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= anti_shuffle_word($word) . \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpki0zzmei.php:18\nStack trace:\n#0 /tmp/tmpki0zzmei.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpki0zzmei.php(28): candidate('Hi')\n#2 /tmp/tmpki0zzmei.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpki0zzmei.php on line 18\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_sentence = [];\n\
    \    foreach ($new_words as $word) {\n        $new_sentence[] = implode(\"\",\
    \ $word);\n    }\n    return implode(\" \", $new_sentence);\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp33a5fmqz.php:18\nStack trace:\n#0 /tmp/tmp33a5fmqz.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp33a5fmqz.php(28): candidate('Hi')\n#2 /tmp/tmp33a5fmqz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33a5fmqz.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = sort_string($word);\n  }\n  return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_string()\
    \ in /tmp/tmp2suaw_zy.php:18\nStack trace:\n#0 /tmp/tmp2suaw_zy.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp2suaw_zy.php(28): candidate('Hi')\n#2 /tmp/tmp2suaw_zy.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2suaw_zy.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_s = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_s .=\
    \ implode(\"\", $new_arr[$key]) . \" \";\n  }\n  return $new_s;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwk3ynex9.php:37\nStack trace:\n#0 /tmp/tmpwk3ynex9.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwk3ynex9.php on line 37\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ trim($result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0w4lj_a.php:29\n\
    Stack trace:\n#0 /tmp/tmpz0w4lj_a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz0w4lj_a.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9wq395gg.php:37\nStack trace:\n#0 /tmp/tmp9wq395gg.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9wq395gg.php on line 37\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return trim($new_string);\n}\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvcbis3q.php:28\n\
    Stack trace:\n#0 /tmp/tmpxvcbis3q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxvcbis3q.php\
    \ on line 28\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = anti_shuffle_word($word);\n  }\n  return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpon690gbh.php:18\nStack trace:\n#0 /tmp/tmpon690gbh.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpon690gbh.php(28): candidate('Hi')\n#2 /tmp/tmpon690gbh.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpon690gbh.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $chars = str_split($word);\n        sort($chars);\n        $result[]\
    \ = implode(\"\", $chars);\n    }\n    return implode(\" \", $result);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpj28wirwf.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpj28wirwf.php:19\nStack trace:\n#0 /tmp/tmpj28wirwf.php(19):\
    \ sort('Array')\n#1 /tmp/tmpj28wirwf.php(27): anti_shuffle('Hi')\n#2 /tmp/tmpj28wirwf.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmpj28wirwf.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpj28wirwf.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_str = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_str\
    \ .= implode(\"\", $new_arr[$key]) . \" \";\n  }\n  return $new_str;\n}\necho\
    \ anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho\
    \ anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptvvrjz4s.php:37\nStack trace:\n#0 /tmp/tmptvvrjz4s.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmptvvrjz4s.php on line 37\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode($new_words[$key]);\n\
    \    }\n    return implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hi\") .\
    \ \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = \"\";\n    foreach ($s as $word) {\n   \
    \     $new_s .= str_split($word);\n        sort($new_s);\n        $new_s = implode(\"\
    \", $new_s);\n        $new_s .= \" \";\n    }\n    return $new_s;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp78cseww_.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp78cseww_.php:19\nStack trace:\n#0 /tmp/tmp78cseww_.php(19):\
    \ sort('Array')\n#1 /tmp/tmp78cseww_.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmp78cseww_.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp1x44z6wp.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp1x44z6wp.php:19\nStack trace:\n#0 /tmp/tmp1x44z6wp.php(19):\
    \ sort('Array')\n#1 /tmp/tmp1x44z6wp.php(26): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp1x44z6wp.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  $new_string = \"\";\n  foreach ($new_words\
    \ as $key => $word) {\n    $new_string .= implode($new_words[$key]) . \" \";\n\
    \  }\n  return $new_string;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1x3mwyz2.php:35\n\
    Stack trace:\n#0 /tmp/tmp1x3mwyz2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1x3mwyz2.php\
    \ on line 35\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7s2b3a_w.php:35\n\
    Stack trace:\n#0 /tmp/tmp7s2b3a_w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7s2b3a_w.php\
    \ on line 35\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= anti_shuffle_word($word) . \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpyrlkqfdx.php:18\nStack trace:\n#0 /tmp/tmpyrlkqfdx.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpyrlkqfdx.php(28): candidate('Hi')\n#2 /tmp/tmpyrlkqfdx.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyrlkqfdx.php on line 18\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $word) {\n        sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach\
    \ ($new_arr as $word) {\n        $new_arr2[] = implode(\"\", $word);\n    }\n\
    \    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    $result = array_map(function($value)\
    \ {\n        return implode(\"\", $value);\n    }, $result);\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp1x44z6wp.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp1x44z6wp.php:19\nStack trace:\n#0 /tmp/tmp1x44z6wp.php(19):\
    \ sort('Array')\n#1 /tmp/tmp1x44z6wp.php(26): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp1x44z6wp.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp4qrxt3ie.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp4qrxt3ie.php:19\nStack trace:\n#0 /tmp/tmp4qrxt3ie.php(19):\
    \ sort('Array')\n#1 /tmp/tmp4qrxt3ie.php(27): anti_shuffle('Hi')\n#2 /tmp/tmp4qrxt3ie.php(31):\
    \ candidate('Hi')\n#3 /tmp/tmp4qrxt3ie.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp4qrxt3ie.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[]\
    \ = str_split($word);\n  }\n  foreach ($result as $key => $value) {\n    sort($result[$key]);\n\
    \  }\n  foreach ($result as $key => $value) {\n    $result[$key] = implode($result[$key]);\n\
    \  }\n  return implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . PHP_EOL;\n\
    echo anti_shuffle(\"hello\") . PHP_EOL;\necho anti_shuffle(\"Hello World!!!\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = array();\n    foreach ($arr as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    $result = array_map(function($word)\
    \ {\n        sort($word);\n        return implode($word);\n    }, $result);\n\
    \    return implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_words_string\
    \ = [];\n    foreach ($new_words as $new_word) {\n        $new_words_string[]\
    \ = implode($new_word);\n    }\n    return implode(\" \", $new_words_string);\n\
    }\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\"\
    ;\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $word) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_string = \"\";\n  foreach ($new_arr as $word) {\n    $new_string\
    \ .= implode(\"\", $word) . \" \";\n  }\n  return $new_string;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmjhki770.php:37\nStack trace:\n#0 /tmp/tmpmjhki770.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmjhki770.php on line 37\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $chars = str_split($word);\n    sort($chars);\n    $new_words[] = implode(\"\
    \", $chars);\n  }\n  return implode(\" \", $new_words);\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode($words[$key]);\n\
    \    }\n    return implode(\" \", $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str\
    \ = [];\n    foreach ($new_words as $new_word) {\n        $new_words_str[] = implode($new_word);\n\
    \    }\n    return implode(\" \", $new_words_str);\n}\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\n\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp3iepfvjd.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp3iepfvjd.php:19\nStack trace:\n#0 /tmp/tmp3iepfvjd.php(19):\
    \ sort('Array')\n#1 /tmp/tmp3iepfvjd.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmp3iepfvjd.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = implode(array_map(\"chr\", range(ord(\"a\"), ord(\"z\"))));\n\
    \    }\n    return implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") .\
    \ \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\
    \ abcdefghijklmnopqrstuvwxyz\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpr_mz6pma.php:31\nStack trace:\n#0 /tmp/tmpr_mz6pma.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpr_mz6pma.php on line 31\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  $new_words = array_map(function($word)\
    \ {\n    sort($word);\n    return implode(\"\", $word);\n  }, $new_words);\n \
    \ return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzr099igu.php:37\nStack trace:\n#0 /tmp/tmpzr099igu.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzr099igu.php on line 37\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\n\necho anti_shuffle(\"Hi\") . \"\
    \\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpj4jva6xw.php:38\nStack trace:\n#0 /tmp/tmpj4jva6xw.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpj4jva6xw.php on line 38\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode(\"\", $result[count($result) -\
    \ 1]);\n    }\n    return implode(\" \", $result);\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_sentence = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_sentence .= implode(\"\
    \", $word);\n        if ($key != count($new_words) - 1) {\n            $new_sentence\
    \ .= \" \";\n        }\n    }\n    return $new_sentence;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $s = array_map(function($w) {\n        $w = str_split($w);\n\
    \        sort($w);\n        return implode(\"\", $w);\n    }, $s);\n    return\
    \ implode(\" \", $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o6_f0uq.php:28\n\
    Stack trace:\n#0 /tmp/tmp2o6_f0uq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2o6_f0uq.php\
    \ on line 28\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\necho anti_shuffle(\"Hi\") .\
    \ \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp487fpahh.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp487fpahh.php:19\nStack trace:\n#0 /tmp/tmp487fpahh.php(19):\
    \ sort('Array')\n#1 /tmp/tmp487fpahh.php(25): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmp487fpahh.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_string = \"\";\n  for ($i = 0; $i < count($new_arr); $i++) {\n  \
    \  $new_string .= implode($new_arr[$i]);\n    if ($i < count($new_arr) - 1) {\n\
    \      $new_string .= \" \";\n    }\n  }\n  return $new_string;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = [];\n    foreach ($s as $word) {\n     \
    \   $new_s[] = str_split($word);\n    }\n    foreach ($new_s as $key => $word)\
    \ {\n        sort($new_s[$key]);\n    }\n    foreach ($new_s as $key => $word)\
    \ {\n        $new_s[$key] = implode(\"\", $new_s[$key]);\n    }\n    return implode(\"\
    \ \", $new_s);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    $result = array_map(function($v)\
    \ {\n        return implode($v);\n    }, $result);\n    return implode(\" \",\
    \ $result);\n}\n\necho anti_shuffle(\"Hi\") . PHP_EOL;\necho anti_shuffle(\"hello\"\
    ) . PHP_EOL;\necho anti_shuffle(\"Hello World!!!\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[]\
    \ = str_split($word);\n  }\n  foreach ($result as $key => $value) {\n    sort($result[$key]);\n\
    \  }\n  $result = array_map(function($value) {\n    return implode($value);\n\
    \  }, $result);\n  return implode(\" \", $result);\n}\necho anti_shuffle(\"Hello\
    \ World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpkr2gxg3c.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpkr2gxg3c.php:19\nStack trace:\n#0 /tmp/tmpkr2gxg3c.php(19):\
    \ sort('Array')\n#1 /tmp/tmpkr2gxg3c.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpkr2gxg3c.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp33a5fmqz.php:18\nStack trace:\n#0 /tmp/tmp33a5fmqz.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp33a5fmqz.php(28): candidate('Hi')\n#2 /tmp/tmp33a5fmqz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33a5fmqz.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($arr as $word) {\n    $result\
    \ .= str_split($word);\n    sort($result);\n    $result .= \" \";\n  }\n  return\
    \ $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpv41dfbbg.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpv41dfbbg.php:19\nStack trace:\n#0 /tmp/tmpv41dfbbg.php(19):\
    \ sort('Array')\n#1 /tmp/tmpv41dfbbg.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpv41dfbbg.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode($new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . PHP_EOL;\n\
    echo anti_shuffle(\"hello\") . PHP_EOL;\necho anti_shuffle(\"Hello World!!!\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph8der1lm.php:37\nStack trace:\n#0 /tmp/tmph8der1lm.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmph8der1lm.php on line 37\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n\
    \    return implode(\" \", $result);\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $value) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $value) {\n        $new_words[$key] = implode($new_words[$key]);\n\
    \    }\n    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i]\
    \ = str_split($arr[$i]);\n    sort($arr[$i]);\n    $arr[$i] = implode($arr[$i]);\n\
    \  }\n  return implode(\" \", $arr);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpbihzfaqz.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmpbihzfaqz.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpbihzfaqz.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmpbihzfaqz.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpbihzfaqz.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmpbihzfaqz.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbihzfaqz.php:31\nStack trace:\n\
    #0 /tmp/tmpbihzfaqz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbihzfaqz.php\
    \ on line 31\n"
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key < count($new_words) - 1) {\n            $new_s .= \" \";\n \
    \       }\n    }\n    return $new_s;\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\necho anti_shuffle(\"Hi\");\necho\
    \ anti_shuffle(\"hello\");\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpxghxqeml.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpxghxqeml.php:19\nStack trace:\n#0 /tmp/tmpxghxqeml.php(19):\
    \ sort('Array')\n#1 /tmp/tmpxghxqeml.php(25): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpxghxqeml.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpqi7himcs.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpqi7himcs.php:19\nStack trace:\n#0 /tmp/tmpqi7himcs.php(19):\
    \ sort('Array')\n#1 /tmp/tmpqi7himcs.php(25): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpqi7himcs.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpomb3efgr.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpomb3efgr.php:19\nStack trace:\n#0 /tmp/tmpomb3efgr.php(19):\
    \ sort('Array')\n#1 /tmp/tmpomb3efgr.php(26): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpomb3efgr.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_str = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_str\
    \ .= implode(\"\", $new_arr[$key]) . \" \";\n  }\n  return $new_str;\n}\necho\
    \ anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho\
    \ anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptvvrjz4s.php:37\nStack trace:\n#0 /tmp/tmptvvrjz4s.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmptvvrjz4s.php on line 37\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = sort_word($word);\n  }\n  return implode(\" \", $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmp81bfiaxx.php:18\nStack trace:\n#0 /tmp/tmp81bfiaxx.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp81bfiaxx.php(28): candidate('Hi')\n#2 /tmp/tmp81bfiaxx.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp81bfiaxx.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpc1zp9wgy.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpc1zp9wgy.php:19\nStack trace:\n#0 /tmp/tmpc1zp9wgy.php(19):\
    \ sort('Array')\n#1 /tmp/tmpc1zp9wgy.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpc1zp9wgy.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpj_ckn257.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpj_ckn257.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ckn257.php:31\n\
    Stack trace:\n#0 /tmp/tmpj_ckn257.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj_ckn257.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvjv974r.php:29\n\
    Stack trace:\n#0 /tmp/tmpnvjv974r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnvjv974r.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp9mj3ig1o.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp9mj3ig1o.php:19\nStack trace:\n#0 /tmp/tmp9mj3ig1o.php(19):\
    \ sort('Array')\n#1 /tmp/tmp9mj3ig1o.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp9mj3ig1o.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $letters = str_split($word);\n        sort($letters);\n        $result[]\
    \ = implode(\"\", $letters);\n    }\n    return implode(\" \", $result);\n}\n\n\
    echo anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\n\
    echo anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key != count($new_words) - 1) {\n            $new_s .= \" \";\n\
    \        }\n    }\n    return $new_s;\n}\n\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n\t$arr\
    \ = explode(\" \", $s);\n\t$new_arr = [];\n\tforeach ($arr as $key => $value)\
    \ {\n\t\t$new_arr[] = str_split($value);\n\t\tsort($new_arr[$key]);\n\t\t$new_arr[$key]\
    \ = implode(\"\", $new_arr[$key]);\n\t}\n\treturn implode(\" \", $new_arr);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode(\"\
    \", $words[$key]);\n    }\n    return implode(\" \", $words);\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpzb87vwdq.php:18\nStack trace:\n#0 /tmp/tmpzb87vwdq.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpzb87vwdq.php(28): candidate('Hi')\n#2 /tmp/tmpzb87vwdq.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzb87vwdq.php on line 18\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $s =\
    \ explode(\" \", $s);\n  foreach ($s as $key => $value) {\n    $s[$key] = str_split($value);\n\
    \    sort($s[$key]);\n    $s[$key] = implode($s[$key]);\n  }\n  return implode(\"\
    \ \", $s);\n}\n\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"\
    hello\");\necho \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpah14spda.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpah14spda.php:19\nStack trace:\n#0 /tmp/tmpah14spda.php(19):\
    \ sort('Array')\n#1 /tmp/tmpah14spda.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpah14spda.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= implode(str_split($word)) . \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i5ihe1l.php:29\n\
    Stack trace:\n#0 /tmp/tmp0i5ihe1l.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0i5ihe1l.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\
    \";\n    foreach ($new_words as $new_word) {\n        $new_string .= implode(\"\
    \", $new_word) . \" \";\n    }\n    return trim($new_string);\n}\necho anti_shuffle(\"\
    Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  $new_words = array_map(function($word)\
    \ {\n    return implode($word);\n  }, $new_words);\n  return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptkm7a8ij.php:32\nStack trace:\n#0 /tmp/tmptkm7a8ij.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmptkm7a8ij.php on line 32\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp1x44z6wp.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp1x44z6wp.php:19\nStack trace:\n#0 /tmp/tmp1x44z6wp.php(19):\
    \ sort('Array')\n#1 /tmp/tmp1x44z6wp.php(26): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp1x44z6wp.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\n\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp3iepfvjd.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp3iepfvjd.php:19\nStack trace:\n#0 /tmp/tmp3iepfvjd.php(19):\
    \ sort('Array')\n#1 /tmp/tmp3iepfvjd.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmp3iepfvjd.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str = [];\n\
    \    foreach ($new_words as $word) {\n        $new_words_str[] = implode($word);\n\
    \    }\n    return implode(\" \", $new_words_str);\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\");\necho \"\
    \\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdbu68rp7.php:40\nStack trace:\n#0 /tmp/tmpdbu68rp7.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdbu68rp7.php on line 40\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\n\
    echo \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpr9d8dgl8.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpr9d8dgl8.php:19\nStack trace:\n#0 /tmp/tmpr9d8dgl8.php(19):\
    \ sort('Array')\n#1 /tmp/tmpr9d8dgl8.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpr9d8dgl8.php on line 19\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp6mzvkzzm.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp6mzvkzzm.php:19\nStack trace:\n#0 /tmp/tmp6mzvkzzm.php(19):\
    \ sort('Array')\n#1 /tmp/tmp6mzvkzzm.php(26): anti_shuffle('Hi')\n#2 /tmp/tmp6mzvkzzm.php(30):\
    \ candidate('Hi')\n#3 /tmp/tmp6mzvkzzm.php(39): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp6mzvkzzm.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    $new_words[$key] = implode($new_words[$key]);\n  }\n  return implode(\"\
    \ \", $new_words);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    $new_words[$key] = implode($new_words[$key]);\n  }\n  return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $s =\
    \ explode(\" \", $s);\n  for ($i = 0; $i < count($s); $i++) {\n    $s[$i] = str_split($s[$i]);\n\
    \    sort($s[$i]);\n    $s[$i] = implode($s[$i]);\n  }\n  return implode(\" \"\
    , $s);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\"\
    ) . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpgmqkqy2g.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpgmqkqy2g.php:19\nStack trace:\n#0 /tmp/tmpgmqkqy2g.php(19):\
    \ sort('Array')\n#1 /tmp/tmpgmqkqy2g.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpgmqkqy2g.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = [];\n    foreach ($s as $word) {\n     \
    \   $new_s[] = str_split($word);\n    }\n    foreach ($new_s as $key => $word)\
    \ {\n        sort($new_s[$key]);\n    }\n    foreach ($new_s as $key => $word)\
    \ {\n        $new_s[$key] = implode(\"\", $new_s[$key]);\n    }\n    return implode(\"\
    \ \", $new_s);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\"\
    ) . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nhello \nHello World!!! \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7d4n_act.php:31\nStack trace:\n#0 /tmp/tmp7d4n_act.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7d4n_act.php on line 31\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp1r1sp58d.php:18\nStack trace:\n#0 /tmp/tmp1r1sp58d.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp1r1sp58d.php(28): candidate('Hi')\n#2 /tmp/tmp1r1sp58d.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1r1sp58d.php on line 18\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $res = [];\n    foreach ($arr as $word) {\n     \
    \   $res[] = str_split($word);\n        sort($res[count($res) - 1]);\n       \
    \ $res[count($res) - 1] = implode(\"\", $res[count($res) - 1]);\n    }\n    return\
    \ implode(\" \", $res);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpkr2gxg3c.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpkr2gxg3c.php:19\nStack trace:\n#0 /tmp/tmpkr2gxg3c.php(19):\
    \ sort('Array')\n#1 /tmp/tmpkr2gxg3c.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpkr2gxg3c.php on line 19\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode(\"\", $word);\n    }\n\
    \    return implode(\" \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $new_arr);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp83c4b34a.php:18\nStack trace:\n#0 /tmp/tmp83c4b34a.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp83c4b34a.php(28): candidate('Hi')\n#2 /tmp/tmp83c4b34a.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp83c4b34a.php on line 18\n"
  timestamp: 1659800270
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[]\
    \ = implode(array_unique(str_split($word)));\n  }\n  return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoid3pivt.php:29\n\
    Stack trace:\n#0 /tmp/tmpoid3pivt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoid3pivt.php\
    \ on line 29\n"
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = str_split($word);\n    sort($result[count($result) - 1]);\n    $result[count($result)\
    \ - 1] = implode($result[count($result) - 1]);\n  }\n  return implode(\" \", $result);\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key != count($new_words) - 1) {\n            $new_s .= \" \";\n\
    \        }\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730869
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode($new_arr[$key]);\n\
    \  }\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\") . PHP_EOL;\n\
    echo anti_shuffle(\"hello\") . PHP_EOL;\necho anti_shuffle(\"Hello World!!!\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_arr = array_map(function($arr) {\n    return implode($arr);\n  },\
    \ $new_arr);\n  return implode(\" \", $new_arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800270
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[]\
    \ = str_split($word);\n    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr)\
    \ - 1] = implode($newArr[count($newArr) - 1]);\n  }\n  return implode(\" \", $newArr);\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659800270
