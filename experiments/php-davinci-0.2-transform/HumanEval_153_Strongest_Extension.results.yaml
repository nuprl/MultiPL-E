language: php
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension) -\
    \ preg_match_all('/[a-z]/', $extension);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee4b34ho.php:39\n\
    Stack trace:\n#0 /tmp/tmpee4b34ho.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpee4b34ho.php\
    \ on line 39\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q1gce8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_9q1gce8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_9q1gce8.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extension_strength++;\n            } else {\n          \
    \      $extension_strength--;\n            }\n        }\n        if ($extension_strength\
    \ > $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmva_j1zr.php:43\n\
    Stack trace:\n#0 /tmp/tmpmva_j1zr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmva_j1zr.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $caps = preg_match_all('/[A-Z]/', $extension);\n\
    \        $smalls = preg_match_all('/[a-z]/', $extension);\n        $strength =\
    \ $caps - $smalls;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84861quy.php:40\n\
    Stack trace:\n#0 /tmp/tmp84861quy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp84861quy.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_extension = '';\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $max_strength_extension;\n}\n\
    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwclphkw.php:43\n\
    Stack trace:\n#0 /tmp/tmpmwclphkw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmwclphkw.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = 0;\n        $sm = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        $strength = $cap - $sm;\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmdhem6p.php:45\n\
    Stack trace:\n#0 /tmp/tmpwmdhem6p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwmdhem6p.php\
    \ on line 45\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagkznhn9.php:43\n\
    Stack trace:\n#0 /tmp/tmpagkznhn9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpagkznhn9.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpox14az3p.php:42\n\
    Stack trace:\n#0 /tmp/tmpox14az3p.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpox14az3p.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_extension = \"\";\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return $class_name . \".\" . $max_strength_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9aa0e_j.php:43\n\
    Stack trace:\n#0 /tmp/tmpj9aa0e_j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj9aa0e_j.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagkznhn9.php:43\n\
    Stack trace:\n#0 /tmp/tmpagkznhn9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpagkznhn9.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else if (ctype_lower($extension[$i])) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm4bw3sc.php:45\n\
    Stack trace:\n#0 /tmp/tmpgm4bw3sc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgm4bw3sc.php\
    \ on line 45\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    $extension_strength = 0;\n    foreach ($extensions as $extension) {\n\
    \        $extension_strength = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ctype_upper($extension[$i])) {\n                $extension_strength++;\n\
    \            } else {\n                $extension_strength--;\n            }\n\
    \        }\n        if ($extension_strength > $strongest_strength) {\n       \
    \     $strongest_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ou9zcda.php:44\n\
    Stack trace:\n#0 /tmp/tmp6ou9zcda.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6ou9zcda.php\
    \ on line 44\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q1gce8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_9q1gce8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_9q1gce8.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = 0;\n        $sm = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        $strength = $cap - $sm;\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmdhem6p.php:45\n\
    Stack trace:\n#0 /tmp/tmpwmdhem6p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwmdhem6p.php\
    \ on line 45\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ku3nag7.php:42\n\
    Stack trace:\n#0 /tmp/tmp5ku3nag7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5ku3nag7.php\
    \ on line 42\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $CAP = preg_match_all('/[A-Z]/', $extension);\n\
    \        $SM = preg_match_all('/[a-z]/', $extension);\n        $new_strength =\
    \ $CAP - $SM;\n        if ($new_strength > $strength) {\n            $strength\
    \ = $new_strength;\n            $strongest_extension = $extension;\n        }\n\
    \    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmput_1pg0r.php:40\n\
    Stack trace:\n#0 /tmp/tmput_1pg0r.php(49): test()\n#1 {main}\n  thrown in /tmp/tmput_1pg0r.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $CAP = preg_match_all('/[A-Z]/', $extension);\n\
    \        $SM = preg_match_all('/[a-z]/', $extension);\n        $extension_strength\
    \ = $CAP - $SM;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8l2upvj.php:40\n\
    Stack trace:\n#0 /tmp/tmph8l2upvj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmph8l2upvj.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extension_strength = array();\n    foreach ($extensions\
    \ as $extension) {\n        $extension_strength[$extension] = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extension_strength[$extension]++;\n            } else {\n\
    \                $extension_strength[$extension]--;\n            }\n        }\n\
    \    }\n    arsort($extension_strength);\n    $strongest_extension = array_keys($extension_strength)[0];\n\
    \    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx84y0fku.php:40\n\
    Stack trace:\n#0 /tmp/tmpx84y0fku.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpx84y0fku.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension) -\
    \ preg_match_all('/[a-z]/', $extension);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee4b34ho.php:39\n\
    Stack trace:\n#0 /tmp/tmpee4b34ho.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpee4b34ho.php\
    \ on line 39\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_extension_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $extension_strength = 0;\n\
    \    $extension_strength += substr_count($extension, strtoupper($extension));\n\
    \    $extension_strength -= substr_count($extension, strtolower($extension));\n\
    \    if ($extension_strength > $strongest_extension_strength) {\n      $strongest_extension_strength\
    \ = $extension_strength;\n      $strongest_extension = $extension;\n    }\n  }\n\
    \  return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmx3wffr.php:38\n\
    Stack trace:\n#0 /tmp/tmpjmx3wffr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjmx3wffr.php\
    \ on line 38\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdausppc.php:43\n\
    Stack trace:\n#0 /tmp/tmppdausppc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppdausppc.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg4wbio_.php:43\n\
    Stack trace:\n#0 /tmp/tmpxg4wbio_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxg4wbio_.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuxa422j.php:43\n\
    Stack trace:\n#0 /tmp/tmpcuxa422j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcuxa422j.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95fbl55n.php:40\n\
    Stack trace:\n#0 /tmp/tmp95fbl55n.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp95fbl55n.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = array();\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension);\n  \
    \      $sm = preg_match_all('/[a-z]/', $extension);\n        $diff = $cap - $sm;\n\
    \        if ($diff > $strength) {\n            $strongest = array($extension);\n\
    \            $strength = $diff;\n        } elseif ($diff == $strength) {\n   \
    \         $strongest[] = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest[0];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('ucwords',\
    \ $extensions);\n    $extensions = array_map('strtolower', $extensions);\n   \
    \ $extensions = array_map('ucwords', $extensions);\n    $extensions = array_map('strtolower',\
    \ $extensions);\n    $extensions = array_map('ucwords', $extensions);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('ucwords',\
    \ $extensions);\n    $extensions = array_map('strtolower', $extensions);\n   \
    \ $extensions = array_map('ucwords', $extensions);\n    $extensions = array_map('strtolower',\
    \ $extensions);\n    $extensions = array_map('ucwords', $extensions);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('ucwords',\
    \ $extensions);\n    $extensions = array_map('strtolower', $extensions);\n   \
    \ $extensions = array_map('ucwords', $extensions);\n    $extensions = array_map('strtolower',\
    \ $extensions);\n    $extensions = array_map('ucwords', $extensions);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('ucwords',\
    \ $extensions);\n    $extensions = array_map('strtolower', $extensions);\n   \
    \ $extensions = array_map('ucwords', $extensions);\n    $extensions = array_map('strtolower',\
    \ $extensions);\n    $extensions = array_map('ucwords', $extensions);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('ucwords',\
    \ $extensions);\n    $extensions = array_map('strtolower', $extensions);\n   \
    \ $extensions = array_map\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp1srwirrl.php
    on line 48

    '
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = strtolower($class_name);\n    $class_name\
    \ = ucfirst($class_name);\n    $extensions = array_map('strtolower', $extensions);\n\
    \    $extensions = array_map('ucfirst', $extensions);\n    $strength = 0;\n  \
    \  $strongest_extension = '';\n    foreach ($extensions as $extension) {\n   \
    \     $extension_strength = 0;\n        $extension_strength = preg_match_all('/[A-Z]/',\
    \ $extension);\n        $extension_strength -= preg_match_all('/[a-z]/', $extension);\n\
    \        if ($extension_strength > $strength) {\n            $strength = $extension_strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . '.' . $strongest_extension;\n}\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_aek0px.php:41\n\
    Stack trace:\n#0 /tmp/tmpa_aek0px.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpa_aek0px.php\
    \ on line 41\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = [];\n    foreach ($extensions as\
    \ $extension) {\n        $extensions_strength[$extension] = 0;\n        for ($i\
    \ = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extensions_strength[$extension]++;\n            } else {\n\
    \                $extensions_strength[$extension]--;\n            }\n        }\n\
    \    }\n    $strongest_extension = array_keys($extensions_strength, max($extensions_strength))[0];\n\
    \    return $class_name . \".\" . $strongest_extension;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwzxkwjn.php:38\n\
    Stack trace:\n#0 /tmp/tmpxwzxkwjn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxwzxkwjn.php\
    \ on line 38\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxe0hyqv.php:39\n\
    Stack trace:\n#0 /tmp/tmpnxe0hyqv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnxe0hyqv.php\
    \ on line 39\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('str_split',\
    \ $extensions);\n    $extensions = array_map(function($extension) {\n        $capital_letters\
    \ = array_filter($extension, function($letter) {\n            return ctype_upper($letter);\n\
    \        });\n        $small_letters = array_filter($extension, function($letter)\
    \ {\n            return ctype_lower($letter);\n        });\n        return count($capital_letters)\
    \ - count($small_letters);\n    }, $extensions);\n    $max_strength = max($extensions);\n\
    \    $max_strength_index = array_search($max_strength, $extensions);\n    return\
    \ $class_name . '.' . $extensions[$max_strength_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4gd13ib.php:41\n\
    Stack trace:\n#0 /tmp/tmpa4gd13ib.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpa4gd13ib.php\
    \ on line 41\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = array();\n    foreach ($extensions as $ext)\
    \ {\n        $ext_strength[$ext] = 0;\n        for ($i = 0; $i < strlen($ext);\
    \ $i++) {\n            if (ctype_upper($ext[$i])) {\n                $ext_strength[$ext]++;\n\
    \            } else {\n                $ext_strength[$ext]--;\n            }\n\
    \        }\n    }\n    $max_strength = max($ext_strength);\n    $strongest_ext\
    \ = array_search($max_strength, $ext_strength);\n    return $class_name . \".\"\
    \ . $strongest_ext;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd95owk9p.php:40\n\
    Stack trace:\n#0 /tmp/tmpd95owk9p.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpd95owk9p.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwz_i4d2c.php:42\n\
    Stack trace:\n#0 /tmp/tmpwz_i4d2c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwz_i4d2c.php\
    \ on line 42\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_extension_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $extension_strength = 0;\n\
    \    for ($i = 0; $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i]))\
    \ {\n        $extension_strength++;\n      } else {\n        $extension_strength--;\n\
    \      }\n    }\n    if ($extension_strength > $strongest_extension_strength)\
    \ {\n      $strongest_extension_strength = $extension_strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp423uc1t6.php:43\n\
    Stack trace:\n#0 /tmp/tmp423uc1t6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp423uc1t6.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n    }\n    arsort($ext_strength);\n    return $class_name . '.' . key($ext_strength);\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg4wbio_.php:43\n\
    Stack trace:\n#0 /tmp/tmpxg4wbio_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxg4wbio_.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = array();\n    foreach ($extensions as $ext)\
    \ {\n        $cap = 0;\n        $sm = 0;\n        for ($i = 0; $i < strlen($ext);\
    \ $i++) {\n            if (ctype_upper($ext[$i])) {\n                $cap++;\n\
    \            } else {\n                $sm++;\n            }\n        }\n    \
    \    $ext_strength[$ext] = $cap - $sm;\n    }\n    arsort($ext_strength);\n  \
    \  $strongest_ext = array_keys($ext_strength)[0];\n    return $class_name . \"\
    .\" . $strongest_ext;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgny2doq.php:42\n\
    Stack trace:\n#0 /tmp/tmpmgny2doq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmgny2doq.php\
    \ on line 42\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n        $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4ew_kt9.php:40\n\
    Stack trace:\n#0 /tmp/tmpy4ew_kt9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy4ew_kt9.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = $extensions[0];\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest = $extension;\n\
    \        }\n    }\n    return $class_name . \".\" . $strongest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ankku72.php:43\n\
    Stack trace:\n#0 /tmp/tmp9ankku72.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9ankku72.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpox14az3p.php:42\n\
    Stack trace:\n#0 /tmp/tmpox14az3p.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpox14az3p.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_strength = 0;\n    $strongest_extension = '';\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5alrz_o8.php:43\n\
    Stack trace:\n#0 /tmp/tmp5alrz_o8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5alrz_o8.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q1gce8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_9q1gce8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_9q1gce8.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = substr_count(strtoupper($extension), \"\
    A\") - substr_count(strtolower($extension), \"a\");\n        if ($extension_strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplezbzxcj.php:37\n\
    Stack trace:\n#0 /tmp/tmplezbzxcj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplezbzxcj.php\
    \ on line 37\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = 0;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $cap = 0;\n    $sm = 0;\n    for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i])) {\n\
    \        $cap++;\n      } else {\n        $sm++;\n      }\n    }\n    $strength\
    \ = $cap - $sm;\n    if ($strength > $strongest) {\n      $strongest = $strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudwoo9n1.php:45\n\
    Stack trace:\n#0 /tmp/tmpudwoo9n1.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpudwoo9n1.php\
    \ on line 45\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdausppc.php:43\n\
    Stack trace:\n#0 /tmp/tmppdausppc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppdausppc.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = 0;\n        $sm = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        $strength = $cap - $sm;\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmdhem6p.php:45\n\
    Stack trace:\n#0 /tmp/tmpwmdhem6p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwmdhem6p.php\
    \ on line 45\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgw3z_nbc.php:39\n\
    Stack trace:\n#0 /tmp/tmpgw3z_nbc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgw3z_nbc.php\
    \ on line 39\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = array('strength' => 0, 'name' => '');\n   \
    \ foreach ($extensions as $extension) {\n        $strength = 0;\n        for ($i\
    \ = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest['strength']) {\n\
    \            $strongest['strength'] = $strength;\n            $strongest['name']\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest['name'];\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp074wo_di.php:42\n\
    Stack trace:\n#0 /tmp/tmp074wo_di.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp074wo_di.php\
    \ on line 42\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\\
    n\";\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nSlices.\nmy_class.AA\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppvnnwqn_.php:45\nStack trace:\n#0 /tmp/tmppvnnwqn_.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppvnnwqn_.php on line 45\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q1gce8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_9q1gce8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_9q1gce8.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = array();\n    foreach ($extensions as $extension)\
    \ {\n        $ext_strength[$extension] = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ctype_upper($extension[$i])) {\n                $ext_strength[$extension]++;\n\
    \            } else {\n                $ext_strength[$extension]--;\n        \
    \    }\n        }\n    }\n    $max_strength = max($ext_strength);\n    $max_strength_ext\
    \ = array_search($max_strength, $ext_strength);\n    return $class_name . \".\"\
    \ . $max_strength_ext;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6n5g3mj.php:40\n\
    Stack trace:\n#0 /tmp/tmp_6n5g3mj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_6n5g3mj.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp293du7rc.php:43\n\
    Stack trace:\n#0 /tmp/tmp293du7rc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp293du7rc.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_extension_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $extension_strength = 0;\n\
    \    for ($i = 0; $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i]))\
    \ {\n        $extension_strength++;\n      } else {\n        $extension_strength--;\n\
    \      }\n    }\n    if ($extension_strength > $strongest_extension_strength)\
    \ {\n      $strongest_extension_strength = $extension_strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp423uc1t6.php:43\n\
    Stack trace:\n#0 /tmp/tmp423uc1t6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp423uc1t6.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = 0;\n        $sm = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        $current_strength = $cap - $sm;\n        if\
    \ ($current_strength > $strength) {\n            $strength = $current_strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjan2oq5p.php:45\n\
    Stack trace:\n#0 /tmp/tmpjan2oq5p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpjan2oq5p.php\
    \ on line 45\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mkf_p5o.php:43\n\
    Stack trace:\n#0 /tmp/tmp0mkf_p5o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0mkf_p5o.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_strength = 0;\n\
    \  foreach ($extensions as $extension) {\n    $strength = 0;\n    for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i])) {\n\
    \        $strength++;\n      } else if (ctype_lower($extension[$i])) {\n     \
    \   $strength--;\n      }\n    }\n    if ($strength > $strongest_strength) {\n\
    \      $strongest_strength = $strength;\n      $strongest_extension = $extension;\n\
    \    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9vi66hl.php:45\n\
    Stack trace:\n#0 /tmp/tmpw9vi66hl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpw9vi66hl.php\
    \ on line 45\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength += strlen(preg_replace('/[^A-Z]/', '', $extension));\n\
    \        $extension_strength -= strlen(preg_replace('/[^a-z]/', '', $extension));\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4kyy19z.php:40\n\
    Stack trace:\n#0 /tmp/tmpn4kyy19z.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpn4kyy19z.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      $strength = count_uppercase($extension) - count_lowercase($extension);\n\
    \        if ($strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_uppercase()\
    \ in /tmp/tmpzlw8kfei.php:23\nStack trace:\n#0 /tmp/tmpzlw8kfei.php(33): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpzlw8kfei.php(37): candidate('Watashi', Array)\n#2 /tmp/tmpzlw8kfei.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzlw8kfei.php on line 23\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6dji7o2.php:43\n\
    Stack trace:\n#0 /tmp/tmpi6dji7o2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi6dji7o2.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      $strength = preg_match_all('/[A-Z]/', $extension, $matches);\n        $strength\
    \ -= preg_match_all('/[a-z]/', $extension, $matches);\n        if ($strength >\
    \ $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5172eot1.php:40\n\
    Stack trace:\n#0 /tmp/tmp5172eot1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5172eot1.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q1gce8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_9q1gce8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_9q1gce8.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75527ak.php:40\n\
    Stack trace:\n#0 /tmp/tmpg75527ak.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg75527ak.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = 0;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $strength = $cap - $sm;\n\
    \    if ($strength > $strongest) {\n      $strongest = $strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8qs8opr.php:40\n\
    Stack trace:\n#0 /tmp/tmps8qs8opr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmps8qs8opr.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg4wbio_.php:43\n\
    Stack trace:\n#0 /tmp/tmpxg4wbio_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxg4wbio_.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else if (ctype_lower($extension[$i])) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm4bw3sc.php:45\n\
    Stack trace:\n#0 /tmp/tmpgm4bw3sc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgm4bw3sc.php\
    \ on line 45\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_length = strlen($extension);\n        for ($i = 0;\
    \ $i < $extension_length; $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extension_strength++;\n            } else {\n          \
    \      $extension_strength--;\n            }\n        }\n        if ($extension_strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h41pi44.php:44\n\
    Stack trace:\n#0 /tmp/tmp6h41pi44.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6h41pi44.php\
    \ on line 44\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strength = 0;\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strength\
    \ = $curr_strength;\n            $strongest_extension = $extension;\n        }\n\
    \    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdc79rdg.php:40\n\
    Stack trace:\n#0 /tmp/tmpwdc79rdg.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwdc79rdg.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_extension_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $extension_strength = 0;\n\
    \    for ($i = 0; $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i]))\
    \ {\n        $extension_strength++;\n      } else {\n        $extension_strength--;\n\
    \      }\n    }\n    if ($extension_strength > $strongest_extension_strength)\
    \ {\n      $strongest_extension_strength = $extension_strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp423uc1t6.php:43\n\
    Stack trace:\n#0 /tmp/tmp423uc1t6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp423uc1t6.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mkf_p5o.php:43\n\
    Stack trace:\n#0 /tmp/tmp0mkf_p5o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0mkf_p5o.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class_name.$strongest_extension\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1noaqs1y.php:43\n\
    Stack trace:\n#0 /tmp/tmp1noaqs1y.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1noaqs1y.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest = '';\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n        $ext_strength\
    \ = $cap - $sm;\n        if ($ext_strength > $strength) {\n            $strength\
    \ = $ext_strength;\n            $strongest = $extension;\n        }\n    }\n \
    \   return $class_name . '.' . $strongest;\n}\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaetarebg.php:39\n\
    Stack trace:\n#0 /tmp/tmpaetarebg.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpaetarebg.php\
    \ on line 39\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension) -\
    \ preg_match_all('/[a-z]/', $extension);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee4b34ho.php:39\n\
    Stack trace:\n#0 /tmp/tmpee4b34ho.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpee4b34ho.php\
    \ on line 39\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = [];\n    foreach ($extensions as\
    \ $extension) {\n        $extensions_strength[$extension] = get_extension_strength($extension);\n\
    \    }\n    $strongest_extension = array_keys($extensions_strength, max($extensions_strength))[0];\n\
    \    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_extension_strength()\
    \ in /tmp/tmpl0fa65x4.php:21\nStack trace:\n#0 /tmp/tmpl0fa65x4.php(28): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpl0fa65x4.php(32): candidate('Watashi', Array)\n#2 /tmp/tmpl0fa65x4.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl0fa65x4.php on line 21\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy67untow.php:40\n\
    Stack trace:\n#0 /tmp/tmpy67untow.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy67untow.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = array_reduce($extensions, function($acc,\
    \ $extension) {\n        $strength = preg_match_all('/[A-Z]/', $extension) - preg_match_all('/[a-z]/',\
    \ $extension);\n        if ($strength > $acc['strength']) {\n            $acc['extension']\
    \ = $extension;\n            $acc['strength'] = $strength;\n        }\n      \
    \  return $acc;\n    }, array('extension' => '', 'strength' => 0));\n    return\
    \ $class_name . '.' . $strongest_extension['extension'];\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizsm4giv.php:36\n\
    Stack trace:\n#0 /tmp/tmpizsm4giv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpizsm4giv.php\
    \ on line 36\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpox14az3p.php:42\n\
    Stack trace:\n#0 /tmp/tmpox14az3p.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpox14az3p.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $CAP = preg_match_all('/[A-Z]/',\
    \ $extension);\n        $SM = preg_match_all('/[a-z]/', $extension);\n       \
    \ $strength = $CAP - $SM;\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy31shlk4.php:40\n\
    Stack trace:\n#0 /tmp/tmpy31shlk4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy31shlk4.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp293du7rc.php:43\n\
    Stack trace:\n#0 /tmp/tmp293du7rc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp293du7rc.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp293du7rc.php:43\n\
    Stack trace:\n#0 /tmp/tmp293du7rc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp293du7rc.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions = array_map(function($extension) {\n       \
    \ $cap = preg_match_all('/[A-Z]/', $extension);\n        $sm = preg_match_all('/[a-z]/',\
    \ $extension);\n        return [$extension, $cap - $sm];\n    }, $extensions);\n\
    \    usort($extensions, function($a, $b) {\n        return $a[1] < $b[1];\n  \
    \  });\n    return $class_name . '.' . $extensions[0][0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmp_1qpeldv.php on
    line 26

    '
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8j4vlkh.php:40\n\
    Stack trace:\n#0 /tmp/tmpl8j4vlkh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl8j4vlkh.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mkf_p5o.php:43\n\
    Stack trace:\n#0 /tmp/tmp0mkf_p5o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0mkf_p5o.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_extension = \"\";\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return $class_name . \".\" . $max_strength_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9aa0e_j.php:43\n\
    Stack trace:\n#0 /tmp/tmpj9aa0e_j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj9aa0e_j.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_strength =\
    \ 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n    \
    \    for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe9278rn.php:43\n\
    Stack trace:\n#0 /tmp/tmpoe9278rn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoe9278rn.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $extension_strength -= preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gnfcyg8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_gnfcyg8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_gnfcyg8.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $CAP = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $SM = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $CAP - $SM;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf69y48q.php:40\n\
    Stack trace:\n#0 /tmp/tmpjf69y48q.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjf69y48q.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_extension_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $extension_strength = 0;\n\
    \    for ($i = 0; $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i]))\
    \ {\n        $extension_strength++;\n      } else {\n        $extension_strength--;\n\
    \      }\n    }\n    if ($extension_strength > $strongest_extension_strength)\
    \ {\n      $strongest_extension_strength = $extension_strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp423uc1t6.php:43\n\
    Stack trace:\n#0 /tmp/tmp423uc1t6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp423uc1t6.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $extension_strength = $cap - $sm;\n        if ($extension_strength >\
    \ $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q1gce8.php:40\n\
    Stack trace:\n#0 /tmp/tmp_9q1gce8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_9q1gce8.php\
    \ on line 40\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = '';\n  $strongest_strength = 0;\n \
    \ foreach ($extensions as $extension) {\n    $strength = 0;\n    for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i])) {\n\
    \        $strength++;\n      } else {\n        $strength--;\n      }\n    }\n\
    \    if ($strength > $strongest_strength) {\n      $strongest_strength = $strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimtw884o.php:43\n\
    Stack trace:\n#0 /tmp/tmpimtw884o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpimtw884o.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mkf_p5o.php:43\n\
    Stack trace:\n#0 /tmp/tmp0mkf_p5o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0mkf_p5o.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i\
    \ = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$strength++;\n\t\t\t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t\
    }\n\t\tif ($strength > $strongest_extension_strength) {\n\t\t\t$strongest_extension_strength\
    \ = $strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwcwli84.php:43\n\
    Stack trace:\n#0 /tmp/tmpqwcwli84.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpqwcwli84.php\
    \ on line 43\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $current_strength = $cap - $sm;\n        if ($current_strength > $strength)\
    \ {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ungbv3e.php:40\n\
    Stack trace:\n#0 /tmp/tmp3ungbv3e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3ungbv3e.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = array();\n    foreach ($extensions as $extension)\
    \ {\n        $ext_strength[$extension] = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ctype_upper($extension[$i])) {\n                $ext_strength[$extension]++;\n\
    \            } else {\n                $ext_strength[$extension]--;\n        \
    \    }\n        }\n    }\n    $max_strength = max($ext_strength);\n    $max_extension\
    \ = array_search($max_strength, $ext_strength);\n    return $class_name . \".\"\
    \ . $max_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplouvb17e.php:40\n\
    Stack trace:\n#0 /tmp/tmplouvb17e.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplouvb17e.php\
    \ on line 40\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagkznhn9.php:43\n\
    Stack trace:\n#0 /tmp/tmpagkznhn9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpagkznhn9.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = 0;\n        $sm = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        $strength = $cap - $sm;\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmdhem6p.php:45\n\
    Stack trace:\n#0 /tmp/tmpwmdhem6p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwmdhem6p.php\
    \ on line 45\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nSlices.\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmppij25mc2.php:44\nStack trace:\n#0 /tmp/tmppij25mc2.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmppij25mc2.php on line 44\n"
  timestamp: 1659799245
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ww2kb4h.php:43\n\
    Stack trace:\n#0 /tmp/tmp1ww2kb4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1ww2kb4h.php\
    \ on line 43\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0d79vj.php:42\n\
    Stack trace:\n#0 /tmp/tmpgf0d79vj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgf0d79vj.php\
    \ on line 42\n"
  timestamp: 1659730841
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and a list\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u1g2gko.php:43\n\
    Stack trace:\n#0 /tmp/tmp3u1g2gko.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3u1g2gko.php\
    \ on line 43\n"
  timestamp: 1659730841
