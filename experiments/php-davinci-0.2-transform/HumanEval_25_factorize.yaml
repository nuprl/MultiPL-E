name: HumanEval_25_factorize
language: php
prompt: "<?php\n// Return list of prime factors of given integer in the order from\
  \ smallest to largest.\n// Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n// Input number\
  \ should be equal to the product of all factors\n// >>> factorize(8)\n// array(2,\
  \ 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n// array(2,\
  \ 5, 7)\nfunction factorize($n) {\n"
tests: "function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19,\
  \ 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
  \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
  \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $factors = [];\n    $i = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n    \
    \    }\n        $i++;\n    }\n    return $factors;\n}\n", "    $result = [];\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $result[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $result;\n}\n", "    $factors = [];\n    $divisor = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n\
    \            $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return\
    \ $factors;\n}\n", "    $factors = [];\n    $i = 2;\n    while ($n > 1) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n", "    $factors\
    \ = [];\n    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor\
    \ == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n \
    \       }\n        $divisor++;\n    }\n    return $factors;\n}\n", "    $factors\
    \ = [];\n    $divider = 2;\n    while ($n > 1) {\n        while ($n % $divider\
    \ == 0) {\n            $factors[] = $divider;\n            $n /= $divider;\n \
    \       }\n        $divider++;\n    }\n    return $factors;\n}\n", "    $factors\
    \ = [];\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n \
    \           $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return $factors;\n}\n", "    $factors = [];\n    for ($i = 2; $i <=\
    \ $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $factors;\n}\n", "    $factors\
    \ = [];\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n \
    \           $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return $factors;\n}\n", "    $factors = [];\n    $i = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n    \
    \        $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n  \
    \  return $factors;\n}\n", "    $factors = [];\n    $i = 2;\n    while ($n > 1)\
    \ {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n          \
    \  $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n", " \
    \   $result = [];\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i ==\
    \ 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n      \
    \  $i++;\n    }\n    return $result;\n}\n", "    $factors = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n", "    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n",
  "    $factors = [];\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i ==\
    \ 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n     \
    \   $i++;\n    }\n    return $factors;\n}\n", "    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $result;\n}\n", "    $factors = [];\n    $i = 2;\n    while ($n >\
    \ 1) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n       \
    \     $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n",
  "    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i\
    \ == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n  \
    \  }\n    return $factors;\n}\n", "    $factors = [];\n    $divisor = 2;\n   \
    \ while ($n > 1) {\n        while ($n % $divisor == 0) {\n            $factors[]\
    \ = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n \
    \   }\n    return $factors;\n}\n", "    $result = [];\n    $i = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] = $i;\n  \
    \          $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
