name: HumanEval_132_is_nested
language: php
prompt: "<?php\n// Create a function that takes a string as input which contains only\
  \ square brackets.\n// The function should return True if and only if there is a\
  \ valid subsequence of brackets \n// where at least one bracket in the subsequence\
  \ is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested($string) {\n"
tests: "function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\")\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "\t$count = 0;\n\tfor ($i =\
    \ 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == \"[\") {\n\t\t\t$count++;\n\
    \t\t} else if ($string[$i] == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\n", "\t$string = str_split($string);\n\t$stack = [];\n\t$len = count($string);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = array();\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) > 0) {\n                array_pop($stack);\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == \"[\") {\n            $open++;\n        } else if ($string[$i] == \"]\")\
    \ {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return false;\n    } else {\n        return true;\n    }\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\t$length\
    \ = strlen($string);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$char = $string[$i];\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) > 0;\n}\n\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
