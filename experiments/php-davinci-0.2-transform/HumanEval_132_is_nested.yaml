name: HumanEval_132_is_nested
language: php
prompt: "<?php\n// Create a function that takes a string as input which contains only\
  \ square brackets.\n// The function should return True if and only if there is a\
  \ valid subsequence of brackets \n// where at least one bracket in the subsequence\
  \ is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested($string) {\n"
tests: "function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\")\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "\t$count = 0;\n\tfor ($i =\
    \ 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == \"[\") {\n\t\t\t$count++;\n\
    \t\t} else if ($string[$i] == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\n", "\t$string = str_split($string);\n\t$stack = [];\n\t$len = count($string);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = array();\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) > 0) {\n                array_pop($stack);\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == \"[\") {\n            $open++;\n        } else if ($string[$i] == \"]\")\
    \ {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return false;\n    } else {\n        return true;\n    }\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\t$length\
    \ = strlen($string);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$char = $string[$i];\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) > 0;\n}\n\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $brackets = str_split($string);\n\
    \    $open = 0;\n    $close = 0;\n    foreach ($brackets as $bracket) {\n    \
    \    if ($bracket == \"[\") {\n            $open++;\n        } else {\n      \
    \      $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $char = $string[$i];\n        if ($char == '[') {\n       \
    \     array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) > 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } elseif ($string[$i] ==\
    \ ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\\
    n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    $last = array_pop($stack);\n            if ($last === null) {\n         \
    \       return false;\n            }\n            if ($open[array_search($last,\
    \ $open)] !== $string[$i]) {\n                return false;\n            }\n \
    \       }\n    }\n    return count($stack) === 0;\n}\n", "    $stack = [];\n \
    \   for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) > 0) {\n                array_pop($stack);\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return count($stack) > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") .\
    \ \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = array();\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\
    \t\t\tarray_push($stack, $char);\n\t\t} elseif ($char == ']') {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "    $string = str_split($string);\n    $stack = [];\n    foreach\
    \ ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) > 0;\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } elseif ($string[$i]\
    \ == ']') {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } elseif ($string[$i] ==\
    \ ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == \"\
    [\") {\n            array_push($stack, $string[$i]);\n        } else {\n     \
    \       if (empty($stack)) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\t$nested = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open > 0 && $close > 0) {\n\t\t\
    \t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\") ? \"\
    true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\"\
    ;\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $string = str_split($string);\n    $stack = [];\n    foreach\
    \ ($string as $char) {\n        if ($char == \"[\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) > 0) {\n          \
    \      array_pop($stack);\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return count($stack) > 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } elseif ($string[$i]\
    \ == ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == \"[\") {\n          \
    \  array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ > 0 ? false : true;\n}\n", "\t$string = str_split($string);\n\t$stack = [];\n\
    \tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\
    \t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n      \
    \      array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $string = str_split($string);\n    $stack = [];\n    foreach ($string\
    \ as $char) {\n        if ($char == '[') {\n            array_push($stack, $char);\n\
    \        } elseif ($char == ']') {\n            if (count($stack) == 0) {\n  \
    \              return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) > 0 ? false : true;\n\
    }\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) > 0) {\n                array_pop($stack);\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return count($stack) > 0 ? false : true;\n}\n", "    $stack = [];\n    $length\
    \ = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "    $string = str_split($string);\n\
    \    $stack = [];\n    foreach ($string as $char) {\n        if ($char == '[')\
    \ {\n            array_push($stack, $char);\n        } elseif ($char == ']') {\n\
    \            if (empty($stack)) {\n                return false;\n           \
    \ } else {\n                array_pop($stack);\n            }\n        }\n   \
    \ }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == \"[\") {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "  $stack = [];\n  for ($i\
    \ = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack,\
    \ $string[$i]);\n    } else {\n      if (count($stack) == 0) {\n        return\
    \ false;\n      } else {\n        array_pop($stack);\n      }\n    }\n  }\n  return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == \"[\") {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn count($stack) > 0 ? false : true;\n}\n", "    $string = str_split($string);\n\
    \    $stack = [];\n    foreach ($string as $char) {\n        if ($char == \"[\"\
    ) {\n            array_push($stack, $char);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n     \
    \   } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $pairs = [\n\
    \        ']' => '[',\n        '}' => '{',\n        ')' => '('\n    ];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $pairs[$string[$i]]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n   \
    \ for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n", "    $string = str_split($string);\n    $stack\
    \ = [];\n    foreach ($string as $char) {\n        if ($char == '[') {\n     \
    \       array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return true;\n}\n",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $brackets = str_split($string);\n\
    \    $stack = [];\n    for ($i = 0; $i < count($brackets); $i++) {\n        if\
    \ ($brackets[$i] == '[') {\n            array_push($stack, $brackets[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) > 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == \"\
    [\") {\n            array_push($stack, $string[$i]);\n        } else {\n     \
    \       if (count($stack) == 0) {\n                return false;\n           \
    \ } else {\n                array_pop($stack);\n            }\n        }\n   \
    \ }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif ($string[$i] == ']') {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    if (count($stack)\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (empty($stack)) {\n \
    \               return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "\t$stack = [];\n\t$length = strlen($string);\n\tfor ($i = 0; $i\
    \ < $length; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $brackets = str_split($string);\n\
    \    $stack = [];\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '[') {\n            array_push($stack, $bracket);\n        } else {\n   \
    \         if (count($stack) == 0) {\n                return false;\n         \
    \   }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $string = str_split($string);\n    $stack = [];\n    foreach ($string\
    \ as $char) {\n        if ($char == '[') {\n            array_push($stack, $char);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\");\necho\
    \ is_nested(\"[]]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho is_nested(\"\
    []\");\necho is_nested(\"[[][]]\");\necho is_nested(\"[[]][[\");", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if ($string[$i] == '[') {\n            $open++;\n        } else {\n     \
    \       $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $char = $string[$i];\n        if\
    \ ($char == '[') {\n            array_push($stack, $char);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ > 0;\n}\n", "    $string = str_split($string);\n    $stack = [];\n    foreach\
    \ ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (empty($stack)) {\n              \
    \  return false;\n            } else {\n                array_pop($stack);\n \
    \           }\n        }\n    }\n    return true;\n}\n", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    $count++;\n\t\t} elseif ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "    $brackets = str_split($string);\n    $stack = [];\n    foreach ($brackets as\
    \ $bracket) {\n        if ($bracket == '[') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            }\n            array_pop($stack);\n    \
    \    }\n    }\n    return count($stack) > 0;\n}\n", "    $arr = str_split($string);\n\
    \    $count = 0;\n    foreach ($arr as $key => $value) {\n        if ($value ==\
    \ \"[\") {\n            $count++;\n        } else {\n            $count--;\n \
    \       }\n        if ($count < 0) {\n            return false;\n        }\n \
    \   }\n    if ($count == 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i],\
    \ $close)] != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "    $string = str_split($string);\n    $stack = [];\n    foreach ($string\
    \ as $char) {\n        if ($char == '[') {\n            array_push($stack, $char);\n\
    \        } elseif ($char == ']') {\n            if (empty($stack)) {\n       \
    \         return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return true;\n}\n", "  $stack = [];\n  for\
    \ ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n    \
    \  array_push($stack, $string[$i]);\n    } else {\n      if (count($stack) ==\
    \ 0) {\n        return false;\n      } else {\n        array_pop($stack);\n  \
    \    }\n    }\n  }\n  return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n  \
    \          array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $string = str_split($string);\n\
    \    $stack = [];\n    foreach ($string as $char) {\n        if ($char == \"[\"\
    ) {\n            array_push($stack, $char);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    $map = [\n        ']' => '[',\n        '}'\
    \ => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($map[$string[$i]] !=\
    \ $last) {\n                return false;\n            }\n        }\n    }\n \
    \   return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open_brackets = 0;\n\
    \t$close_brackets = 0;\n\t$nested = false;\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$open_brackets++;\n\t\t} else\
    \ {\n\t\t\t$close_brackets++;\n\t\t}\n\t\tif ($open_brackets < $close_brackets)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif ($open_brackets > $close_brackets) {\n\
    \t\t\t$nested = true;\n\t\t}\n\t}\n\tif ($open_brackets != $close_brackets) {\n\
    \t\treturn false;\n\t}\n\treturn $nested;\n}\n", "\t$open = 0;\n\t$close = 0;\n\
    \tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\") {\n\
    \t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n", "    $stack = [];\n    $len = strlen($string);\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n      \
    \      array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n \
    \   for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) > 0) {\n                array_pop($stack);\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if ($string[$i] == '[') {\n            $open++;\n        } else {\n     \
    \       $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open > $close) {\n        return false;\n\
    \    }\n    return true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t\
    } else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } elseif ($string[$i] == ']') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } elseif ($string[$i] == ']')\
    \ {\n            if (count($stack) == 0) {\n                return false;\n  \
    \          } else {\n                array_pop($stack);\n            }\n     \
    \   }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif ($string[$i] == ']') {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    if (count($stack)\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\
    \tarray_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) > 0) {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "    $left = 0;\n    $right = 0;\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == \"[\") {\n\
    \            $left++;\n        } else {\n            $right++;\n        }\n  \
    \      if ($right > $left) {\n            return false;\n        }\n    }\n  \
    \  return $left == $right;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n     \
    \   } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n      \
    \      array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $brackets = str_split($string);\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '[') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack\
    \ = array();\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == \"[\") {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    $map = array_combine($open, $close);\n   \
    \ for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $open = 0;\n    $close = 0;\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \        if ($close > $open) {\n            return false;\n        }\n    }\n\
    \    if ($open == $close) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       $char = $string[$i];\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else if ($char == ']') {\n            if (count($stack) ==\
    \ 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "\t$brackets = str_split($string);\n\
    \t$stack = [];\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"[\"\
    ) {\n\t\t\tarray_push($stack, $bracket);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) > 0;\n}\n", "    $stack = [];\n  \
    \  $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n      \
    \      array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\tfor ($i =\
    \ 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n     \
    \   } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == \"[\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n", "\t$string = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested(\"[[]]\") .\
    \ PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\"\
    ) . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") .\
    \ PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == \"[\") {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\
    \t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) ==\
    \ 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") .\
    \ \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $length\
    \ = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        $char =\
    \ $string[$i];\n        if ($char == '[') {\n            array_push($stack, $char);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) > 0;\n}\n", "    $open = 0;\n    $close = 0;\n    $nested\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n        if ($open < $close) {\n            return false;\n        }\n\
    \        if ($open > $close) {\n            $nested++;\n        }\n    }\n   \
    \ if ($open == $close && $nested > 0) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n", "    $stack = [];\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} elseif ($char == ']') {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close\
    \ = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } elseif (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $string =\
    \ str_split($string);\n    $stack = [];\n    foreach ($string as $char) {\n  \
    \      if ($char == \"[\") {\n            array_push($stack, $char);\n       \
    \ } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return count($stack) == 0;\n}\n\n$string = \"[]\";\necho is_nested($string);",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n      \
    \      array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$count = 0;\n\t$nested = false;\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($count\
    \ > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\treturn $nested;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == \"[\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\tfor ($i =\
    \ 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        $char\
    \ = $string[$i];\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) > 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        $char = $string[$i];\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else if ($char == ']') {\n            if (count($stack) ==\
    \ 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = array();\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\
    \t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) ==\
    \ 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\
    \treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\
    \t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) ==\
    \ 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\
    \treturn false;\n\t}\n}\n", "    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == \"[\") {\n           \
    \ array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ > 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $brackets = str_split($string);\n\
    \    $stack = [];\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '[') {\n            array_push($stack, $bracket);\n        } else {\n   \
    \         if (count($stack) == 0) {\n                return false;\n         \
    \   }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ > 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\") ? \"\
    true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\"\
    ;\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $string = str_split($string);\n    $stack = [];\n    foreach\
    \ ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) > 0) {\n                $last = array_pop($stack);\n\
    \                if ($open[array_search($string[$i], $close)] != $last) {\n  \
    \                  return false;\n                }\n            } else {\n  \
    \              return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == \"[\") {\n            $open++;\n       \
    \ } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    $stack\
    \ = [];\n    $brackets = ['[' => ']'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (array_key_exists($string[$i], $brackets)) {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last_bracket =\
    \ array_pop($stack);\n            if ($brackets[$last_bracket] != $string[$i])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $brackets = str_split($string);\n\
    \    $stack = [];\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '[') {\n            array_push($stack, $bracket);\n        } else {\n   \
    \         if (empty($stack)) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "\t$stack = [];\n\
    \t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\t$pairs = [\n\t\t']'\
    \ => '[',\n\t\t'}' => '{',\n\t\t')' => '('\n\t];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} elseif (in_array($string[$i], $close)) {\n\t\t\tif (empty($stack)) {\n\t\
    \t\t\treturn false;\n\t\t\t} elseif ($stack[count($stack) - 1] == $pairs[$string[$i]])\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn empty($stack);\n}\n", "    $stack = [];\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n      \
    \      array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
