name: HumanEval_160_do_algebra
language: php
prompt: "<?php\n// Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n// the second list is a list of integers. Use the two\
  \ given lists to build the algebric \n// expression and return the evaluation of\
  \ this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ list is equal to the length of operand list minus one.\n// Operand is a list of\
  \ of non-negative integers.\n// Operator list has at least one operator, and operand\
  \ list has at least two operands.\nfunction do_algebra($operator, $operand) {\n"
tests: "function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
  \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "    $result = $operand[0];\n    for ($i\
    \ = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n    \
    \        case '+':\n                $result += $operand[$i + 1];\n           \
    \     break;\n            case '-':\n                $result -= $operand[$i +\
    \ 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result = pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n", "  $result =\
    \ $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", " \
    \ $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $result += $operand[$i + 1];\n \
    \       break;\n      case '-':\n        $result -= $operand[$i + 1];\n      \
    \  break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", " \
    \ $result = array_shift($operand);\n  foreach ($operator as $key => $value) {\n\
    \    switch ($value) {\n      case '+':\n        $result += $operand[$key];\n\
    \        break;\n      case '-':\n        $result -= $operand[$key];\n       \
    \ break;\n      case '*':\n        $result *= $operand[$key];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$key]);\n      \
    \  break;\n      case '**':\n        $result = pow($result, $operand[$key]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", " \
    \ $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $result += $operand[$i + 1];\n \
    \       break;\n      case '-':\n        $result -= $operand[$i + 1];\n      \
    \  break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4,\
    \ 5];\necho do_algebra($operator, $operand);", "  $result = $operand[0];\n  for\
    \ ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $result += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i + 1];\n        break;\n      case '//':\n    \
    \    $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", " \
    \ $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $result += $operand[$i + 1];\n \
    \       break;\n      case '-':\n        $result -= $operand[$i + 1];\n      \
    \  break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
