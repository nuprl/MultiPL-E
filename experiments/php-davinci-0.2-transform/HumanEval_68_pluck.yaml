name: HumanEval_68_pluck
language: php
prompt: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
  \ pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n//\
  \ array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n\
  // Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will\
  \ choose the first zero, which has the smallest index.\n// Constraints:\n// * 1\
  \ <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $evens = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $arr);\n    return [$min, $min_index];\n\
    }\n", "  $evens = array_filter($arr, function($n) {\n    return $n % 2 == 0;\n\
    \  });\n  if (empty($evens)) {\n    return [];\n  }\n  $min = min($evens);\n \
    \ $index = array_search($min, $arr);\n  return [$min, $index];\n}\n", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $key = array_search($min, $even);\n    return [$min,\
    \ $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "  $evens = [];\n  $evens_index = [];\n  $evens_index_min = null;\n  $evens_min\
    \ = null;\n  foreach ($arr as $index => $value) {\n    if ($value % 2 == 0) {\n\
    \      $evens[] = $value;\n      $evens_index[] = $index;\n    }\n  }\n  if (count($evens)\
    \ == 0) {\n    return [];\n  }\n  $evens_min = min($evens);\n  $evens_index_min\
    \ = min($evens_index);\n  return [$evens_min, $evens_index_min];\n}\n", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $evens = [];\n    $evensIndex =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n\
    \    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $smallestEven\
    \ = min($evens);\n    $smallestEvenIndex = array_search($smallestEven, $evens);\n\
    \    return [$smallestEven, $evensIndex[$smallestEvenIndex]];\n}\n", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minKey = array_search($min,\
    \ $arr);\n    return [$min, $minKey];\n}\n", "  $evens = [];\n  foreach ($arr\
    \ as $i => $v) {\n    if ($v % 2 == 0) {\n      $evens[] = [$v, $i];\n    }\n\
    \  }\n  if (empty($evens)) {\n    return [];\n  }\n  usort($evens, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $evens[0];\n}\n", "  $evens = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = [$value,\
    \ $key];\n    }\n  }\n  if (empty($evens)) {\n    return [];\n  }\n  usort($evens,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $evens[0];\n}\n", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $even = [];\n    $evenIndex = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $evenIndex[] = $key;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $index = array_search($min, $even);\n    return [$min, $evenIndex[$index]];\n\
    }\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $indexes[] = $key;\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n", "    $even = [];\n    $index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    // your code here\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "  $evens = array_filter($arr, function($val)\
    \ {\n    return $val % 2 == 0;\n  });\n  if (count($evens) == 0) {\n    return\
    \ [];\n  }\n  $min = min($evens);\n  $min_index = array_search($min, $arr);\n\
    \  return [$min, $min_index];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
