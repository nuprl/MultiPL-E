name: HumanEval_68_pluck
language: php
prompt: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
  \ pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n//\
  \ array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n\
  // Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will\
  \ choose the first zero, which has the smallest index.\n// Constraints:\n// * 1\
  \ <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $evens = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $arr);\n    return [$min, $min_index];\n\
    }\n", "  $evens = array_filter($arr, function($n) {\n    return $n % 2 == 0;\n\
    \  });\n  if (empty($evens)) {\n    return [];\n  }\n  $min = min($evens);\n \
    \ $index = array_search($min, $arr);\n  return [$min, $index];\n}\n", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $key = array_search($min, $even);\n    return [$min,\
    \ $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "  $evens = [];\n  $evens_index = [];\n  $evens_index_min = null;\n  $evens_min\
    \ = null;\n  foreach ($arr as $index => $value) {\n    if ($value % 2 == 0) {\n\
    \      $evens[] = $value;\n      $evens_index[] = $index;\n    }\n  }\n  if (count($evens)\
    \ == 0) {\n    return [];\n  }\n  $evens_min = min($evens);\n  $evens_index_min\
    \ = min($evens_index);\n  return [$evens_min, $evens_index_min];\n}\n", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $evens = [];\n    $evensIndex =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n\
    \    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $smallestEven\
    \ = min($evens);\n    $smallestEvenIndex = array_search($smallestEven, $evens);\n\
    \    return [$smallestEven, $evensIndex[$smallestEvenIndex]];\n}\n", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minKey = array_search($min,\
    \ $arr);\n    return [$min, $minKey];\n}\n", "  $evens = [];\n  foreach ($arr\
    \ as $i => $v) {\n    if ($v % 2 == 0) {\n      $evens[] = [$v, $i];\n    }\n\
    \  }\n  if (empty($evens)) {\n    return [];\n  }\n  usort($evens, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $evens[0];\n}\n", "  $evens = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = [$value,\
    \ $key];\n    }\n  }\n  if (empty($evens)) {\n    return [];\n  }\n  usort($evens,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $evens[0];\n}\n", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $even = [];\n    $evenIndex = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $evenIndex[] = $key;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $index = array_search($min, $even);\n    return [$min, $evenIndex[$index]];\n\
    }\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $indexes[] = $key;\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n", "    $even = [];\n    $index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    // your code here\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "  $evens = array_filter($arr, function($val)\
    \ {\n    return $val % 2 == 0;\n  });\n  if (count($evens) == 0) {\n    return\
    \ [];\n  }\n  $min = min($evens);\n  $min_index = array_search($min, $arr);\n\
    \  return [$min, $min_index];\n}\n", "    $evens = array_filter($arr, function($v)\
    \ {\n        return $v % 2 == 0;\n    });\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n", "  $evens = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n    }\n  }\n\
    \  if (empty($evens)) {\n    return [];\n  }\n  $min = min($evens);\n  $index\
    \ = array_search($min, $arr);\n  return [$min, $index];\n}\n", "    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n  \
    \  $min = min($even);\n    $min_index = array_search($min, $even);\n    return\
    \ [$min, $index[$min_index]];\n}\n", "    $evens = [];\n    $evens_index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $evens_index[] = $key;\n        }\n \
    \   }\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_index[$min_even_index]];\n}\n", "  $evens = array_filter($arr, function($v)\
    \ {\n    return $v % 2 == 0;\n  });\n  if (empty($evens)) {\n    return [];\n\
    \  }\n  $min = min($evens);\n  $index = array_search($min, $arr);\n  return [$min,\
    \ $index];\n}\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $evens = [];\n    $evens_index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_index[] = $key;\n    \
    \    }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even\
    \ = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n   \
    \ return [$min_even, $evens_index[$min_even_index]];\n}\n", "    $evens = [];\n\
    \    $evens_index = [];\n    $evens_index_min = 0;\n    $evens_min = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_index[] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $evens_min = min($evens);\n    $evens_index_min\
    \ = array_search($evens_min, $evens);\n    return [$evens_min, $evens_index[$evens_index_min]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minKey = array_search($min, $arr);\n   \
    \ return [$min, $minKey];\n}\n", "  $evens = [];\n  $evensIndex = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n\
    \      $evensIndex[] = $key;\n    }\n  }\n  if (empty($evens)) {\n    return [];\n\
    \  }\n  $min = min($evens);\n  $index = array_search($min, $evens);\n  return\
    \ [$min, $evensIndex[$index]];\n}\n", "    $evens = [];\n    $index = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $evens[] = $value;\n            $index[] = $key;\n        }\n    }\n  \
    \  if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $evens);\n    return [$min, $index[$min_index]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n\
    \    return [$min, $index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (count($evens) == 0) {\n\
    \        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $evens =\
    \ array_filter($arr, function($item) {\n        return $item % 2 == 0;\n    });\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n", " \
    \   $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "  $evens = [];\n\
    \  $evens_index = [];\n  foreach ($arr as $key => $value) {\n    if ($value %\
    \ 2 == 0) {\n      $evens[] = $value;\n      $evens_index[] = $key;\n    }\n \
    \ }\n  if (empty($evens)) {\n    return [];\n  }\n  $min_even = min($evens);\n\
    \  $min_even_index = array_search($min_even, $evens);\n  return [$min_even, $evens_index[$min_even_index]];\n\
    }\n", "    $evens = array_filter($arr, function($value) {\n        return $value\
    \ % 2 == 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n  \
    \  $min = min($evens);\n    $key = array_search($min, $arr);\n    return [$min,\
    \ $key];\n}\n", "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $evens =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = [$value, $key];\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    usort($evens, function ($a, $b) {\n      \
    \  return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n", "    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $min_index = array_search($min, $even);\n    return [$min,\
    \ $index[$min_index]];\n}\n", "    $even = [];\n    $index = [];\n    $result\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (!empty($even)) {\n        $min = min($even);\n        $key = array_search($min,\
    \ $even);\n        $result[] = $min;\n        $result[] = $index[$key];\n    }\n\
    \    return $result;\n}\n", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = [$value, $key];\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = $evens[0];\n    foreach ($evens as $even) {\n        if ($even[0]\
    \ < $min[0]) {\n            $min = $even;\n        }\n    }\n    return $min;\n\
    }\n", "  $evens = [];\n  $index = 0;\n  foreach ($arr as $value) {\n    if ($value\
    \ % 2 == 0) {\n      $evens[] = $value;\n    }\n    $index++;\n  }\n  if (empty($evens))\
    \ {\n    return [];\n  }\n  $min = min($evens);\n  $key = array_search($min, $arr);\n\
    \  return [$min, $key];\n}\n", "    $evens = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minKey = array_search($min, $arr);\n    return [$min, $minKey];\n\
    }\n", "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $evens =\
    \ array_filter($arr, function($x) { return $x % 2 == 0; });\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n", "    $evens = [];\n    $indexes =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $indexes[] = $key;\n        }\n \
    \   }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $evens);\n    return [$min, $indexes[$min_index]];\n\
    }\n", "  $evens = [];\n  $evens_indices = [];\n  foreach ($arr as $i => $v) {\n\
    \    if ($v % 2 == 0) {\n      $evens[] = $v;\n      $evens_indices[] = $i;\n\
    \    }\n  }\n  if (count($evens) == 0) {\n    return [];\n  }\n  $min_even = min($evens);\n\
    \  $min_even_index = array_search($min_even, $evens);\n  return [$min_even, $evens_indices[$min_even_index]];\n\
    }\n\n$tests = [\n  [[4, 2, 3], [2, 1]],\n  [[1, 2, 3], [2, 1]],\n  [[], []],\n\
    \  [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n  $result\
    \ = pluck($test[0]);\n  if ($result == $test[1]) {\n    echo \"PASSED\\n\";\n\
    \  } else {\n    echo \"FAILED\\n\";\n  }\n}", "  $evens = array_filter($arr,\
    \ function($n) {\n    return $n % 2 == 0;\n  });\n  if (empty($evens)) {\n   \
    \ return [];\n  }\n  $min = min($evens);\n  $min_index = array_search($min, $arr);\n\
    \  return [$min, $min_index];\n}\n", "  $evens = [];\n  $indexes = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n\
    \      $indexes[] = $key;\n    }\n  }\n  if (count($evens) == 0) {\n    return\
    \ [];\n  }\n  $min = min($evens);\n  $min_index = array_search($min, $evens);\n\
    \  return [$min, $indexes[$min_index]];\n}\n", "  $evens = [];\n  $indexes = [];\n\
    \  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[]\
    \ = $value;\n      $indexes[] = $key;\n    }\n  }\n  if (count($evens) == 0) {\n\
    \    return [];\n  }\n  $min = min($evens);\n  $minIndex = array_search($min,\
    \ $evens);\n  return [$min, $indexes[$minIndex]];\n}\n", "    $evens = [];\n \
    \   $indexes = [];\n    foreach ($arr as $index => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $indexes[] = $index;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $indexes[$minIndex]];\n}\n", "    $evens = array_filter($arr, function($val)\
    \ {\n        return $val % 2 == 0;\n    });\n    if (empty($evens)) {\n      \
    \  return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $arr);\n    return [$min, $min_index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\n\n$arr = [1, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\
    \n$arr = [];\n$result = pluck($arr);\nprint_r($result);\n\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\n$result = pluck($arr);\nprint_r($result);", "    $evens = [];\n    $evensIndex\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n     \
    \   }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $evensIndex[$minIndex]];\n}\n", "    $evens = [];\n    $evensIndex = [];\n \
    \   foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n     \
    \       $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n   \
    \ }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $evensIndex[$minIndex]];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $i => $val) {\n        if ($val\
    \ % 2 == 0) {\n            $evens[] = [$val, $i];\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    usort($evens, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n", "    $evens =\
    \ [];\n    $evens_index = [];\n    $evens_min = PHP_INT_MAX;\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evens_index[] = $key;\n            if ($value < $evens_min)\
    \ {\n                $evens_min = $value;\n            }\n        }\n    }\n \
    \   if (empty($evens)) {\n        return [];\n    }\n    $min_index = array_search($evens_min,\
    \ $evens);\n    return [$evens_min, $evens_index[$min_index]];\n}\n", "    $evens\
    \ = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (count($evens) > 0) {\n        $min = min($evens);\n\
    \        $min_index = array_search($min, $evens);\n        return [$min, $evens_index[$min_index]];\n\
    \    }\n    return [];\n}\n", "    $evens = [];\n    $evensIndex = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evensIndex[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $minEven = min($evens);\n    $minEvenIndex\
    \ = array_search($minEven, $evens);\n    return [$minEven, $evensIndex[$minEvenIndex]];\n\
    }\n", "    $even_numbers = [];\n    $even_numbers_indexes = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even_numbers[]\
    \ = $value;\n            $even_numbers_indexes[] = $key;\n        }\n    }\n \
    \   if (count($even_numbers) == 0) {\n        return [];\n    }\n    $min_even_number\
    \ = min($even_numbers);\n    $min_even_number_index = $even_numbers_indexes[array_search($min_even_number,\
    \ $even_numbers)];\n    return [$min_even_number, $min_even_number_index];\n}\n",
  "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n", "    $even = [];\n    $index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = [$value, $key];\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    usort($evens, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n\
    $arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n", "  \
    \  $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n", "  \
    \  $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    return [$min, $indexes[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (count($even) > 0) {\n        $min = min($even);\n        $key\
    \ = array_search($min, $even);\n        return [$min, $index[$key]];\n    }\n\
    \    return [];\n}\n", "  $evens = [];\n  $evens_index = [];\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n\
    \      $evens_index[] = $key;\n    }\n  }\n  if (empty($evens)) {\n    return\
    \ [];\n  }\n  $min = min($evens);\n  $min_index = array_search($min, $evens);\n\
    \  return [$min, $evens_index[$min_index]];\n}\n", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n", "  $evens = [];\n  $evensIndex = [];\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n      $evensIndex[]\
    \ = $key;\n    }\n  }\n  if (empty($evens)) {\n    return [];\n  }\n  $min = min($evens);\n\
    \  $index = array_search($min, $evens);\n  return [$min, $evensIndex[$index]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minKey = array_search($min,\
    \ $arr);\n    return [$min, $minKey];\n}\n", "    $evens = [];\n    $evens_index\
    \ = [];\n    $evens_index_min = [];\n    $evens_min = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $evens_min = min($evens);\n    foreach ($evens\
    \ as $key => $value) {\n        if ($value == $evens_min) {\n            $evens_index_min[]\
    \ = $evens_index[$key];\n        }\n    }\n    $evens_index_min = min($evens_index_min);\n\
    \    return [$evens_min, $evens_index_min];\n}\n", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));", "    $evens = [];\n    $indexes = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $indexes[] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex =\
    \ array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n}\n",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n   \
    \ return [$min, $index[$min_index]];\n}\n", "    $evens = [];\n    $evens_index\
    \ = [];\n    $min_even = null;\n    $min_even_index = null;\n    for ($i = 0;\
    \ $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $evens[]\
    \ = $arr[$i];\n            $evens_index[] = $i;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min_even = $evens[0];\n    $min_even_index\
    \ = $evens_index[0];\n    for ($i = 1; $i < count($evens); $i++) {\n        if\
    \ ($evens[$i] < $min_even) {\n            $min_even = $evens[$i];\n          \
    \  $min_even_index = $evens_index[$i];\n        }\n    }\n    return [$min_even,\
    \ $min_even_index];\n}\n", "    $evens = [];\n    $evens_index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n\
    }\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $indexes[] = $key;\n        }\n    }\n    if (count($evens) == 0) {\n   \
    \     return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n", "  $evens = [];\n \
    \ foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[]\
    \ = [$value, $key];\n    }\n  }\n  if (count($evens) == 0) {\n    return [];\n\
    \  }\n  usort($evens, function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return\
    \ $a[1] - $b[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return $evens[0];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "  $evens = [];\n  $evens_index = [];\n\
    \  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[]\
    \ = $value;\n      $evens_index[] = $key;\n    }\n  }\n  if (count($evens) ==\
    \ 0) {\n    return [];\n  }\n  $min = min($evens);\n  $min_index = array_search($min,\
    \ $evens);\n  return [$min, $evens_index[$min_index]];\n}\n", "  $evens = [];\n\
    \  $evens_index = [];\n  $evens_min = PHP_INT_MAX;\n  $evens_min_index = PHP_INT_MAX;\n\
    \  foreach ($arr as $index => $value) {\n    if ($value % 2 == 0) {\n      $evens[]\
    \ = $value;\n      $evens_index[] = $index;\n    }\n  }\n  if (count($evens) ==\
    \ 0) {\n    return [];\n  }\n  foreach ($evens as $index => $value) {\n    if\
    \ ($value < $evens_min) {\n      $evens_min = $value;\n      $evens_min_index\
    \ = $evens_index[$index];\n    }\n  }\n  return [$evens_min, $evens_min_index];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "    $even = [];\n    $odd = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $even[] = $value;\n        } else {\n            $odd[] = $value;\n   \
    \     }\n    }\n    if (count($even) > 0) {\n        $min = min($even);\n    \
    \    $key = array_search($min, $arr);\n        return [$min, $key];\n    } else\
    \ {\n        return [];\n    }\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $arr);\n    return [$min, $min_index];\n}\n", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $index;\n      \
    \  }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n       \
    \ return [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "    $even = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $index[] = $key;\n        }\n    }\n \
    \   if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n",
  "    $evens = array_filter($arr, function($val) {\n        return $val % 2 == 0;\n\
    \    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n", " \
    \   $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n", "    $even = [];\n    $index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $min_index = array_search($min, $even);\n    return [$min, $index[$min_index]];\n\
    }\n", "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $even = array_filter($arr,\
    \ function($v) { return $v % 2 == 0; });\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $i = array_search($min, $arr);\n   \
    \ return [$min, $i];\n}\n\n$arr = [4, 2, 3];\n$res = pluck($arr);\nprint_r($res);\n\
    \n$arr = [1, 2, 3];\n$res = pluck($arr);\nprint_r($res);\n\n$arr = [];\n$res =\
    \ pluck($arr);\nprint_r($res);\n\n$arr = [5, 0, 3, 0, 4, 2];\n$res = pluck($arr);\n\
    print_r($res);", "    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = [$value, $key];\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    usort($evens, function ($a, $b) {\n        return $a[0] <=>\
    \ $b[0];\n    });\n    return $evens[0];\n}\n", "    $even = [];\n    $index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $min_index = array_search($min, $even);\n    return [$min, $index[$min_index]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    $evens_index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evens_index[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $evens);\n    return [$min, $evens_index[$min_index]];\n\
    }\n", "    if (empty($arr)) {\n        return [];\n    }\n    $even = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $even[$key] = $value;\n        }\n    }\n    if (empty($even)) {\n    \
    \    return [];\n    }\n    asort($even);\n    $even = array_keys($even);\n  \
    \  return [$arr[$even[0]], $even[0]];\n}\n", "    $even_arr = [];\n    $even_index\
    \ = [];\n    $even_min = [];\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value % 2 == 0) {\n            $even_arr[] = $value;\n            $even_index[]\
    \ = $key;\n        }\n    }\n    if (empty($even_arr)) {\n        return [];\n\
    \    }\n    $even_min = min($even_arr);\n    $even_min_index = array_search($even_min,\
    \ $even_arr);\n    return [$even_min, $even_index[$even_min_index]];\n}\n", " \
    \   $evens = array_filter($arr, function($val) {\n        return $val % 2 == 0;\n\
    \    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    $minIndex = array_search($min, $arr);\n    return [$min, $minIndex];\n\
    }\n", "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $evens = array_filter($arr, function($n) {\n      \
    \  return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n", "    $evens = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = [$value,\
    \ $key];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n   \
    \ }\n    usort($evens, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n  \
    \          return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n \
    \   });\n    return $evens[0];\n}\n", "    $evens = [];\n    $evens_index = [];\n\
    \    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n  \
    \          $evens[] = $value;\n            $evens_index[] = $index;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_index[$min_even_index]];\n}\n", "    $evens = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $arr);\n   \
    \ return [$min, $minIndex];\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    $arr = [1, 2, 3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($val) {\n        return $val % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $even_arr = [];\n    $even_index_arr\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even_arr[] = $value;\n            $even_index_arr[] = $key;\n\
    \        }\n    }\n    if (empty($even_arr)) {\n        return [];\n    }\n  \
    \  $min_even = min($even_arr);\n    $min_even_index = array_search($min_even,\
    \ $even_arr);\n    return [$min_even, $even_index_arr[$min_even_index]];\n}\n",
  "    $even = [];\n    $evenIndex = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[] = $value;\n            $evenIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $minIndex = array_search($min, $even);\n    return\
    \ [$min, $evenIndex[$minIndex]];\n}\n", "    $evens = [];\n    $index = 0;\n \
    \   foreach ($arr as $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $smallest = min($evens);\n    foreach ($arr as $value) {\n       \
    \ if ($value == $smallest) {\n            return [$smallest, $index];\n      \
    \  }\n        $index++;\n    }\n}\n", "    $even = [];\n    $index = [];\n   \
    \ foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n       \
    \     $even[] = $value;\n            $index[] = $key;\n        }\n    }\n    if\
    \ (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $evens =\
    \ [];\n    $evens_index = [];\n    $evens_index_min = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $evens_min = min($evens);\n    foreach ($evens\
    \ as $key => $value) {\n        if ($value == $evens_min) {\n            $evens_index_min[]\
    \ = $evens_index[$key];\n        }\n    }\n    $evens_index_min_min = min($evens_index_min);\n\
    \    return [$evens_min, $evens_index_min_min];\n}\n\n$arr = [4, 2, 3];\n$arr\
    \ = [1, 2, 3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($item) {\n        return $item % 2 ==\
    \ 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n    asort($evens);\n\
    \    $smallest = array_shift($evens);\n    $index = array_search($smallest, $arr);\n\
    \    return [$smallest, $index];\n}\n", "    $evens = [];\n    $evens_index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evens_index[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $evens);\n    return [$min, $evens_index[$min_index]];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n", "    $even = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $indexes[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n", "    $evens = [];\n\
    \    $evens_index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_index = array_search($min, $evens);\n    return [$min,\
    \ $evens_index[$min_index]];\n}\n", "    $evens = [];\n    $evens_index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $evens_index[] = $key;\n        }\n \
    \   }\n    if (empty($evens)) {\n        return [];\n    }\n    $smallest_even\
    \ = min($evens);\n    $smallest_even_index = array_search($smallest_even, $evens);\n\
    \    return [$smallest_even, $evens_index[$smallest_even_index]];\n}\n", "   \
    \ $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    return [$min, $evens_index[$min_index]];\n}\n", "\t$even = [];\n\t$index\
    \ = [];\n\tforeach ($arr as $key => $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\
    \t$even[] = $value;\n\t\t\t$index[] = $key;\n\t\t}\n\t}\n\tif (empty($even)) {\n\
    \t\treturn [];\n\t}\n\t$min = min($even);\n\t$key = array_search($min, $even);\n\
    \treturn [$min, $index[$key]];\n}\n", "    $evens = array_filter($arr, function($n)\
    \ {\n        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n   \
    \     return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n", "    $evens = array_filter($arr, function($val)\
    \ {\n        return $val % 2 == 0;\n    });\n    if (empty($evens)) {\n      \
    \  return [];\n    }\n    $min = min($evens);\n    $key = array_search($min, $arr);\n\
    \    return [$min, $key];\n}\n", "    $even = [];\n    $index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    $evens_index\
    \ = [];\n    $evens_index_sorted = [];\n    $evens_sorted = [];\n    $evens_sorted_index\
    \ = [];\n    $evens_sorted_index_sorted = [];\n    $evens_sorted_sorted = [];\n\
    \    $evens_sorted_sorted_index = [];\n    $evens_sorted_sorted_index_sorted =\
    \ [];\n    $evens_sorted_sorted_sorted = [];\n    $evens_sorted_sorted_sorted_index\
    \ = [];\n    $evens_sorted_sorted_sorted_index_sorted = [];\n    $evens_sorted_sorted_sorted_sorted\
    \ = [];\n    $evens_sorted_sorted_sorted_sorted_index = [];\n    $evens_sorted_sorted_sorted_sorted_index_sorted\
    \ = [];\n    $evens_sorted_sorted_sorted_sorted_sorted = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_index\
    \ = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_index_sorted = [];\n  \
    \  $evens_sorted_sorted_sorted_sorted_sorted_sorted = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_sorted_index\
    \ = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted = [];\n\
    \    $evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index\
    \ = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\
    \ = [];\n    $evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted =\
    \ [];\n    $evens", "    $evens = [];\n    $index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n  \
    \      return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $evens);\n    return [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) > 0) {\n\
    \        $min = min($even);\n        $key = array_search($min, $even);\n     \
    \   return [$min, $index[$key]];\n    }\n    return [];\n}\n", "    $evens = [];\n\
    \    $evens_index = [];\n    $evens_index_min = 0;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (count($evens) >\
    \ 0) {\n        $evens_min = min($evens);\n        foreach ($evens as $key =>\
    \ $value) {\n            if ($value == $evens_min) {\n                $evens_index_min\
    \ = $evens_index[$key];\n                break;\n            }\n        }\n  \
    \      return [$evens_min, $evens_index_min];\n    } else {\n        return [];\n\
    \    }\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1,\
    \ 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "  $evens = [];\n  $evens_index = [];\n  $evens_index_min = 0;\n  foreach\
    \ ($arr as $index => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n\
    \      $evens_index[] = $index;\n    }\n  }\n  if (count($evens) == 0) {\n   \
    \ return [];\n  }\n  $evens_min = min($evens);\n  foreach ($evens as $index =>\
    \ $value) {\n    if ($value == $evens_min) {\n      $evens_index_min = $evens_index[$index];\n\
    \      break;\n    }\n  }\n  return [$evens_min, $evens_index_min];\n}\n", " \
    \   $min = null;\n    $minIndex = null;\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 === 0) {\n            if ($min === null || $value\
    \ < $min) {\n                $min = $value;\n                $minIndex = $index;\n\
    \            }\n        }\n    }\n    if ($min === null) {\n        return [];\n\
    \    }\n    return [$min, $minIndex];\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [];\nvar_dump(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));", "    $evens = [];\n   \
    \ $evensIndex = [];\n    $result = [];\n    $min = PHP_INT_MAX;\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evensIndex[] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return $result;\n    }\n    foreach ($evens as $key => $value)\
    \ {\n        if ($value < $min) {\n            $min = $value;\n        }\n   \
    \ }\n    $result[] = $min;\n    $result[] = $evensIndex[array_search($min, $evens)];\n\
    \    return $result;\n}\n", "    $even = [];\n    $odd = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n        } else {\n            $odd[] = $value;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $min_key = array_search($min, $arr);\n    return [$min, $min_key];\n}\n",
  "    $evens = array_filter($arr, function($val) {\n        return $val % 2 == 0;\n\
    \    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n", " \
    \   $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $even[] = $value;\n        } else {\n\
    \            $odd[] = $value;\n        }\n    }\n    if (count($even) > 0) {\n\
    \        $min = min($even);\n        $key = array_search($min, $arr);\n      \
    \  return [$min, $key];\n    } else {\n        return [];\n    }\n}\n\n$arr =\
    \ [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "  $min = null;\n  $min_index = null;\n  foreach ($arr as $index => $value) {\n\
    \    if ($value % 2 == 0) {\n      if ($min == null || $value < $min) {\n    \
    \    $min = $value;\n        $min_index = $index;\n      }\n    }\n  }\n  if ($min\
    \ == null) {\n    return [];\n  }\n  return [$min, $min_index];\n}\n", "    $evens\
    \ = [];\n    $evens_index = [];\n    $evens_index_min = 0;\n    $evens_min = 0;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $evens_index[] = $key;\n        }\n \
    \   }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $evens_min\
    \ = min($evens);\n    $evens_index_min = array_search($evens_min, $evens);\n \
    \   return [$evens_min, $evens_index[$evens_index_min]];\n}\n", "    $evens =\
    \ array_filter($arr, function($val) {\n        return $val % 2 == 0;\n    });\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n", "    $smallest\
    \ = null;\n    $index = null;\n    foreach ($arr as $key => $value) {\n      \
    \  if ($value % 2 == 0) {\n            if ($smallest === null) {\n           \
    \     $smallest = $value;\n                $index = $key;\n            } else\
    \ {\n                if ($value < $smallest) {\n                    $smallest\
    \ = $value;\n                    $index = $key;\n                }\n         \
    \   }\n        }\n    }\n    if ($smallest === null) {\n        return [];\n \
    \   }\n    return [$smallest, $index];\n}\n", "    $evens = [];\n    $evens_index\
    \ = [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (count($evens) == 0) {\n        return $result;\n\
    \    }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    $result[] = $min;\n    $result[] = $evens_index[$min_index];\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5,\
    \ 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $evens = [];\n    $index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $evens);\n    return [$min, $index[$key]];\n}\n", "  $evens = [];\n  $indexes\
    \ = [];\n  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n  \
    \    $evens[] = $value;\n      $indexes[] = $key;\n    }\n  }\n  if (count($evens)\
    \ == 0) {\n    return [];\n  }\n  $min = min($evens);\n  $minIndex = array_search($min,\
    \ $evens);\n  return [$min, $indexes[$minIndex]];\n}\n", "    $evens = [];\n \
    \   $indexes = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $indexes[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $indexes[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr\
    \ = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n\
    $arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $min_key = array_search($min, $arr);\n  \
    \  return [$min, $min_key];\n}\n", "    $even = [];\n    $index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    $evensIndex\
    \ = [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (count($evens) > 0) {\n        $min = min($evens);\n\
    \        $minIndex = array_search($min, $evens);\n        $result[] = $min;\n\
    \        $result[] = $evensIndex[$minIndex];\n    }\n    return $result;\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $even = [];\n    $evenIndex\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $evenIndex[] = $key;\n       \
    \ }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $minIndex = array_search($min, $even);\n    return [$min, $evenIndex[$minIndex]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "  $evens = [];\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n    }\n\
    \  }\n  if (empty($evens)) {\n    return [];\n  }\n  $min = min($evens);\n  $min_key\
    \ = array_search($min, $arr);\n  return [$min, $min_key];\n}\n", "    $evens =\
    \ [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $evensIndex[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $smallest_even = min($evens);\n    $smallest_even_index\
    \ = array_search($smallest_even, $evens);\n    return [$smallest_even, $evens_index[$smallest_even_index]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    $indexes = [];\n\
    \    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n  \
    \          $evens[] = $value;\n            $indexes[] = $index;\n        }\n \
    \   }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    $evensIndex =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $evensIndex[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4,\
    \ 2];\nvar_dump(pluck($arr));", "    $even = [];\n    $index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $minIndex = array_search($min,\
    \ $even);\n    return [$min, $index[$minIndex]];\n}\n", "    $evens = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $evens = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n", "    $even = [];\n    $odd = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \        } else {\n            $odd[] = $value;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $min_key = array_search($min,\
    \ $arr);\n    return [$min, $min_key];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "  $evens = [];\n  $evens_index = [];\n  foreach ($arr as $key => $value) {\n  \
    \  if ($value % 2 == 0) {\n      $evens[] = $value;\n      $evens_index[] = $key;\n\
    \    }\n  }\n  if (empty($evens)) {\n    return [];\n  }\n  $min = min($evens);\n\
    \  $min_index = array_search($min, $evens);\n  return [$min, $evens_index[$min_index]];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $index => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = [$value, $index];\n        }\n \
    \   }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n", "    $evens = array_filter($arr, function($v) {\n        return $v % 2 ==\
    \ 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $indexes[] = $index;\n        }\n    }\n    if (count($evens) == 0) {\n \
    \       return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n\necho implode(', ', pluck([4,\
    \ 2, 3]));\necho \"\\n\";\necho implode(', ', pluck([1, 2, 3]));\necho \"\\n\"\
    ;\necho implode(', ', pluck([]));\necho \"\\n\";\necho implode(', ', pluck([5,\
    \ 0, 3, 0, 4, 2]));\necho \"\\n\";", "    // your code here\n}\n", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n", "  $evens = [];\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = [$value, $key];\n\
    \    }\n  }\n  if (count($evens) == 0) {\n    return [];\n  }\n  $min = $evens[0];\n\
    \  foreach ($evens as $even) {\n    if ($even[0] < $min[0]) {\n      $min = $even;\n\
    \    }\n  }\n  return $min;\n}\n", "    $even = [];\n    $index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n", "    $evens = array_filter($arr, function($x) { return $x % 2 == 0; });\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    $min_key = array_search($min,\
    \ $arr);\n    return [$min, $min_key];\n}\n", "    $evens = [];\n    $min = PHP_INT_MAX;\n\
    \    $index = -1;\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0)\
    \ {\n            $evens[] = $v;\n            if ($v < $min) {\n              \
    \  $min = $v;\n                $index = $i;\n            }\n        }\n    }\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    return [$min, $index];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n", "  $evens = array_filter($arr, function($n)\
    \ { return $n % 2 == 0; });\n  if (count($evens) == 0) {\n    return [];\n  }\n\
    \  $min = min($evens);\n  $index = array_search($min, $arr);\n  return [$min,\
    \ $index];\n}\n", "    $even_arr = [];\n    $min_index = 0;\n    $min_value =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even_arr[] = $value;\n        }\n    }\n    if (count($even_arr)\
    \ == 0) {\n        return [];\n    }\n    $min_value = min($even_arr);\n    $min_index\
    \ = array_search($min_value, $arr);\n    return [$min_value, $min_index];\n}\n",
  "    $evens = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n \
    \   });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n", "    $evens = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $index[$minIndex]];\n}\n", "    $evens = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $min_key = array_search($min, $arr);\n  \
    \  return [$min, $min_key];\n}\n", "    $evens = [];\n    $evens_index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $evens_index[] = $key;\n        }\n \
    \   }\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_index[$min_even_index]];\n}\n", "    $even_arr = [];\n    $even_index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even_arr[] = $value;\n            $even_index[] = $key;\n  \
    \      }\n    }\n    if (count($even_arr) == 0) {\n        return [];\n    }\n\
    \    $min_value = min($even_arr);\n    $min_index = array_search($min_value, $even_arr);\n\
    \    return [$min_value, $even_index[$min_index]];\n}\n", "    $evens = [];\n\
    \    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n    return\
    \ [$min, $evensIndex[$minIndex]];\n}\n", "    $evens = [];\n    $evens_index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evens_index[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $evens_index[$index]];\n\
    }\n", "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $min_index\
    \ = array_search($min, $arr);\n    return [$min, $min_index];\n}\n", "    $evens\
    \ = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $evens_index[$index]];\n}\n", "    $even_arr = [];\n    $even_index =\
    \ [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even_arr[] = $value;\n            $even_index[] =\
    \ $key;\n        }\n    }\n    if (count($even_arr) > 0) {\n        $min_even\
    \ = min($even_arr);\n        $min_even_index = array_search($min_even, $even_arr);\n\
    \        $result = [$min_even, $even_index[$min_even_index]];\n    }\n    return\
    \ $result;\n}\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $indexes[] = $key;\n        }\n    }\n    if (count($evens) == 0)\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n", "    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n  \
    \  $min = min($even);\n    $key = array_search($min, $even);\n    return [$min,\
    \ $index[$key]];\n}\n", "  $evens = [];\n  $evens_index = [];\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n\
    \      $evens_index[] = $key;\n    }\n  }\n  if (empty($evens)) {\n    return\
    \ [];\n  }\n  $min_even = min($evens);\n  $min_even_index = array_search($min_even,\
    \ $evens);\n  return [$min_even, $evens_index[$min_even_index]];\n}\n", "  $evens\
    \ = [];\n  $evens_index = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ % 2 == 0) {\n      $evens[] = $value;\n      $evens_index[] = $key;\n    }\n\
    \  }\n  if (count($evens) == 0) {\n    return [];\n  }\n  $min = min($evens);\n\
    \  $min_index = array_search($min, $evens);\n  return [$min, $evens_index[$min_index]];\n\
    }\n", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $indexes[] = $key;\n        }\n    }\n    if (count($evens) == 0) {\n   \
    \     return [];\n    }\n    $smallest = min($evens);\n    $smallestIndex = array_search($smallest,\
    \ $evens);\n    return [$smallest, $indexes[$smallestIndex]];\n}\n", "    $evens\
    \ = [];\n    $index = 0;\n    foreach ($arr as $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value == $min) {\n            $index = $key;\n\
    \            break;\n        }\n    }\n    return [$min, $index];\n}\n", "   \
    \ $evens = array_filter($arr, function($v) {\n        return $v % 2 == 0;\n  \
    \  });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n", " \
    \   $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_key = array_search($min,\
    \ $arr);\n    return [$min, $min_key];\n}\n", "    $evens = [];\n    $evens_index\
    \ = [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (count($evens) > 0) {\n        $min_even =\
    \ min($evens);\n        $min_even_index = array_search($min_even, $evens);\n \
    \       $result = [$min_even, $evens_index[$min_even_index]];\n    }\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr\
    \ = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "    $evens = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $key = array_search($min, $evens);\n\
    \    return [$min, $index[$key]];\n}\n", "    $evens = array_filter($arr, function($n)\
    \ {\n        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n   \
    \     return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $arr);\n    return [$min, $min_index];\n}\n", "    if (empty($arr)) {\n    \
    \    return [];\n    }\n    $even = [];\n    $odd = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[$key] =\
    \ $value;\n        } else {\n            $odd[$key] = $value;\n        }\n   \
    \ }\n    if (empty($even)) {\n        return [];\n    }\n    asort($even);\n \
    \   $result = array_shift($even);\n    return [$result, array_search($result,\
    \ $arr)];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
