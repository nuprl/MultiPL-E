name: HumanEval_57_monotonic
language: php
prompt: "<?php\n// Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4,\
  \ 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10))\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
  \ 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $monotonic = true;\n    $increasing = $l[0] < $l[1];\n    for ($i\
    \ = 1; $i < count($l) - 1; $i++) {\n        if ($increasing) {\n            if\
    \ ($l[$i] > $l[$i + 1]) {\n                $monotonic = false;\n             \
    \   break;\n            }\n        } else {\n            if ($l[$i] < $l[$i +\
    \ 1]) {\n                $monotonic = false;\n                break;\n       \
    \     }\n        }\n    }\n    return $monotonic;\n}\n", "\t$increasing = true;\n\
    \t$decreasing = true;\n\tfor ($i = 0; $i < count($l) - 1; $i++) {\n\t\tif ($l[$i]\
    \ > $l[$i + 1]) {\n\t\t\t$increasing = false;\n\t\t}\n\t\tif ($l[$i] < $l[$i +\
    \ 1]) {\n\t\t\t$decreasing = false;\n\t\t}\n\t}\n\treturn $increasing || $decreasing;\n\
    }\n", "\t$inc = $dec = true;\n\tfor ($i = 1; $i < count($l); $i++) {\n\t\tif ($l[$i]\
    \ < $l[$i - 1]) {\n\t\t\t$inc = false;\n\t\t}\n\t\tif ($l[$i] > $l[$i - 1]) {\n\
    \t\t\t$dec = false;\n\t\t}\n\t}\n\treturn $inc || $dec;\n}\n", "    $increasing\
    \ = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l) - 1; $i++)\
    \ {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing = false;\n  \
    \      }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing = false;\n\
    \        }\n    }\n    return $increasing || $decreasing;\n}\n", "    $increasing\
    \ = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l) - 1; $i++)\
    \ {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing = false;\n  \
    \      }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing = false;\n\
    \        }\n    }\n    return $increasing || $decreasing;\n}\n", "    $inc = true;\n\
    \    $dec = true;\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i]\
    \ > $l[$i + 1]) {\n            $inc = false;\n        }\n        if ($l[$i] <\
    \ $l[$i + 1]) {\n            $dec = false;\n        }\n    }\n    return $inc\
    \ || $dec;\n}\n", "    $increasing = true;\n    $decreasing = true;\n    for ($i\
    \ = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n     \
    \       $increasing = false;\n        }\n        if ($l[$i] < $l[$i + 1]) {\n\
    \            $decreasing = false;\n        }\n    }\n    return $increasing ||\
    \ $decreasing;\n}\n", "    $i = 0;\n    $j = count($l) - 1;\n    $increasing =\
    \ $l[$i] < $l[$j];\n    while ($i < $j) {\n        if ($increasing) {\n      \
    \      if ($l[$i] > $l[$i + 1]) {\n                return false;\n           \
    \ }\n        } else {\n            if ($l[$i] < $l[$i + 1]) {\n              \
    \  return false;\n            }\n        }\n        $i++;\n    }\n    return true;\n\
    }\n", "    $increasing = true;\n    $decreasing = true;\n    for ($i = 0; $i <\
    \ count($l) - 1; $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing\
    \ = false;\n        }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing\
    \ = false;\n        }\n    }\n    return $increasing || $decreasing;\n}\n", " \
    \   $increasing = true;\n    $decreasing = true;\n    $prev = $l[0];\n    for\
    \ ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] < $prev) {\n          \
    \  $increasing = false;\n        }\n        if ($l[$i] > $prev) {\n          \
    \  $decreasing = false;\n        }\n        $prev = $l[$i];\n    }\n    return\
    \ $increasing || $decreasing;\n}\n", "    $increasing = true;\n    $decreasing\
    \ = true;\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i] >\
    \ $l[$i + 1]) {\n            $increasing = false;\n        }\n        if ($l[$i]\
    \ < $l[$i + 1]) {\n            $decreasing = false;\n        }\n    }\n    return\
    \ $increasing || $decreasing;\n}\n", "    $c = count($l);\n    if ($c < 2) {\n\
    \        return true;\n    }\n    $inc = $l[1] > $l[0];\n    for ($i = 1; $i <\
    \ $c; $i++) {\n        if ($inc) {\n            if ($l[$i] < $l[$i - 1]) {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ ($l[$i] > $l[$i - 1]) {\n                return false;\n            }\n    \
    \    }\n    }\n    return true;\n}\n", "    $increasing = true;\n    $decreasing\
    \ = true;\n    $prev = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n    \
    \    if ($l[$i] < $prev) {\n            $increasing = false;\n        }\n    \
    \    if ($l[$i] > $prev) {\n            $decreasing = false;\n        }\n    \
    \    $prev = $l[$i];\n    }\n    return $increasing || $decreasing;\n}\n", " \
    \   $increasing = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l)\
    \ - 1; $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing =\
    \ false;\n        }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing\
    \ = false;\n        }\n    }\n    return $increasing || $decreasing;\n}\n", " \
    \   $increasing = true;\n    $decreasing = true;\n    $prev = $l[0];\n    for\
    \ ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] < $prev) {\n          \
    \  $increasing = false;\n        }\n        if ($l[$i] > $prev) {\n          \
    \  $decreasing = false;\n        }\n        $prev = $l[$i];\n    }\n    return\
    \ $increasing || $decreasing;\n}\n", "    $increasing = false;\n    $decreasing\
    \ = false;\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i] <\
    \ $l[$i + 1]) {\n            $increasing = true;\n        }\n        if ($l[$i]\
    \ > $l[$i + 1]) {\n            $decreasing = true;\n        }\n    }\n    return\
    \ $increasing && !$decreasing || $decreasing && !$increasing;\n}\n", "    $increasing\
    \ = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l) - 1; $i++)\
    \ {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing = false;\n  \
    \      }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing = false;\n\
    \        }\n    }\n    return $increasing || $decreasing;\n}\n", "  $increasing\
    \ = true;\n  $decreasing = true;\n  for ($i = 0; $i < count($l) - 1; $i++) {\n\
    \    if ($l[$i] > $l[$i + 1]) {\n      $increasing = false;\n    }\n    if ($l[$i]\
    \ < $l[$i + 1]) {\n      $decreasing = false;\n    }\n  }\n  return $increasing\
    \ || $decreasing;\n}\n", "    $inc = true;\n    $dec = true;\n    for ($i = 0;\
    \ $i < count($l) - 1; $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n          \
    \  $inc = false;\n        }\n        if ($l[$i] < $l[$i + 1]) {\n            $dec\
    \ = false;\n        }\n    }\n    return $inc || $dec;\n}\n", "    $increasing\
    \ = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l) - 1; $i++)\
    \ {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing = false;\n  \
    \      }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing = false;\n\
    \        }\n    }\n    return $increasing || $decreasing;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
