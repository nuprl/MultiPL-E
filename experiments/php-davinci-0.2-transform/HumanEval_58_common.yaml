name: HumanEval_58_common
language: php
prompt: "<?php\n// Return sorted unique common elements for two lists.\n// >>> common(array(1,\
  \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n//\
  \ >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1,\
  \ $l2) {\n"
tests: "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
  \ 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
  \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n", "  $result = [];\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  while ($i < count($l1) &&\
    \ $j < count($l2)) {\n    if ($l1[$i] == $l2[$j]) {\n      $result[] = $l1[$i];\n\
    \      $i++;\n      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n      $i++;\n\
    \    } else {\n      $j++;\n    }\n  }\n  return $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $result[] = $l1[$i];\n            }\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($l1 as $v) {\n        if (in_array($v, $l2)) {\n            $result[]\
    \ = $v;\n        }\n    }\n    sort($result);\n    return array_unique($result);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($l1 as $item) {\n        if\
    \ (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n    }\n\
    \    return array_unique($result);\n}\n", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $elem) {\n    \
    \    if (in_array($elem, $l2)) {\n            $result[] = $elem;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j <\
    \ count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $result;\n}\n", "    $result = [];\n    foreach ($l1 as $item) {\n \
    \       if (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n\
    \    }\n    sort($result);\n    return array_unique($result);\n}\n", "\t$result\
    \ = array();\n\tforeach ($l1 as $item) {\n\t\tif (in_array($item, $l2)) {\n\t\t\
    \t$result[] = $item;\n\t\t}\n\t}\n\treturn array_unique($result);\n}\n", "   \
    \ $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_len = count($l1);\n    $l2_len = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $result = [];\n    while ($i < $l1_len && $j <\
    \ $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $result;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    return array_unique($result);\n}\n", "  $l1_unique = array_unique($l1);\n\
    \  $l2_unique = array_unique($l2);\n  $result = array();\n  foreach ($l1_unique\
    \ as $e) {\n    if (in_array($e, $l2_unique)) {\n      $result[] = $e;\n    }\n\
    \  }\n  sort($result);\n  return $result;\n}\n", "\t$result = array();\n\t$l1\
    \ = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \tforeach ($l1 as $value) {\n\t\tif (in_array($value, $l2)) {\n\t\t\t$result[]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $elem) {\n\
    \        if (in_array($elem, $l2)) {\n            $result[] = $elem;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
