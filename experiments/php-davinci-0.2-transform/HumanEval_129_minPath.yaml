name: HumanEval_129_minPath
language: php
prompt: "<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive\
  \ integer k, \n// each cell of the grid contains a value. Every integer in the range\
  \ [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You\
  \ have to find the minimum path of length k in the grid. You can start\n// from\
  \ any cell, and in each step you can move to any of the neighbor cells,\n// in other\
  \ words, you can go to cells which share an edge with you current\n// cell.\n//\
  \ Please note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered lists of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered list of the values on the cells that the minimum\
  \ path go through.\n// Examples:    \n// >>> minPath(array(array(1, 2, 3), array(4,\
  \ 5, 6), array(7, 8, 9)), 3)\n// array(1, 2, 1)\n// >>> minPath(array(array(5, 9,\
  \ 3), array(4, 1, 6), array(7, 8, 2)), 1)\n// array(1)\nfunction minPath($grid,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return minPath(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7,\
  \ 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2,\
  \ 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !==\
  \ array(1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6,\
  \ 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7)\
  \ !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1,\
  \ 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14,\
  \ 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6,\
  \ 1, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12,\
  \ 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12)\
  \ !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8)\
  \ !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !==\
  \ array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2,\
  \ 1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
  \ 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $result = array();\n    $min = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = array();\n            $path[] = $grid[$i][$j];\n          \
    \  $visited = array();\n            $visited[$i][$j] = true;\n            $min\
    \ = min($min, dfs($grid, $i, $j, $k - 1, $path, $visited));\n        }\n    }\n\
    \    return $result;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            if (dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $sum)) {\n                if ($sum < $minSum) {\n         \
    \           $minSum = $sum;\n                    $minPath = $path;\n         \
    \       }\n            }\n            $visited[$i][$j] = false;\n        }\n \
    \   }\n    return $minPath;\n}", "    $n = count($grid);\n    $minPath = array();\n\
    \    $minPathSum = $n * $n + 1;\n    $minPathSumIndex = -1;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path =\
    \ array();\n            $pathSum = 0;\n            $pathSumIndex = -1;\n     \
    \       $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n   \
    \         $pathSumIndex = $grid[$i][$j];\n            $pathSumIndex *= $n;\n \
    \           $pathSumIndex += $j;\n            $pathSumIndex *= $n;\n         \
    \   $pathSumIndex += $i;\n            $pathSumIndex *= $n;\n            $pathSumIndex\
    \ += $k;\n            $pathSumIndex *= $n;\n            $pathSumIndex += 1;\n\
    \            $pathSumIndex *= $n;\n            $pathSumIndex += 1;\n         \
    \   $pathSumIndex *= $n;\n            $pathSumIndex += 1;\n            $pathSumIndex\
    \ *= $n;\n            $pathSumIndex += 1;\n            $pathSumIndex *= $n;\n\
    \            $pathSumIndex += 1;\n            $pathSumIndex *= $n;\n         \
    \   $pathSumIndex += 1;\n            $pathSumIndex *= $n;\n            $pathSumIndex\
    \ += 1;\n            $pathSumIndex *= $n;\n            $pathSumIndex += 1;\n \
    \           $pathSumIndex *= $n;\n            $pathSumIndex += 1;\n          \
    \  $pathSumIndex *= $n;\n            $pathSumIndex += 1;\n            $pathSumIndex\
    \ *= $n;\n            $pathSumIndex += 1;\n            $pathSumIndex *= $n;\n\
    \            $pathSumIndex += 1;\n            $pathSumIndex *= $n;\n         \
    \   $pathSumIndex += 1;\n            $pathSumIndex *= $n;\n            $pathSumIndex\
    \ += 1;\n            $pathSumIndex *= $n;\n            $pathSumIndex += 1", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $visited, $path, $pathSum, $i, $j, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    $min_sum = PHP_INT_MAX;\n    $min_path = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $min[$i][$j] = PHP_INT_MAX;\n        }\n    }\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j]\
    \ = $grid[$i][$j];\n            $min_path[$i][$j] = array($grid[$i][$j]);\n  \
    \          if ($i > 0 && $min[$i - 1][$j] + $grid[$i][$j] < $min[$i][$j]) {\n\
    \                $min[$i][$j] = $min[$i - 1][$j] + $grid[$i][$j];\n          \
    \      $min_path[$i][$j] = array_merge($min_path[$i - 1][$j], array($grid[$i][$j]));\n\
    \            }\n            if ($j > 0 && $min[$i][$j - 1] + $grid[$i][$j] < $min[$i][$j])\
    \ {\n                $min[$i][$j] = $min[$i][$j - 1] + $grid[$i][$j];\n      \
    \          $min_path[$i][$j] = array_merge($min_path[$i][$j - 1], array($grid[$i][$j]));\n\
    \            }\n            if ($i > 0 && $j > 0 && $min[$i - 1][$j - 1] + $grid[$i][$j]\
    \ < $min[$i][$j]) {\n                $min[$i][$j] = $min[$i - 1][$j - 1] + $grid[$i][$j];\n\
    \                $min", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $path = array();\n    $min = array();\n    $min_path = array();\n    $min_path_found\
    \ = false;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $path = array();\n            $path[] = $grid[$i][$j];\n    \
    \        $min_path_found = findMinPath($grid, $i, $j, $k - 1, $path, $min, $min_path);\n\
    \            if ($min_path_found) {\n                return $min_path;\n     \
    \       }\n        }\n    }\n    return $min_path;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $visited[$i][$j] = true;\n            $path = array($grid[$i][$j]);\n\
    \            $sum = $grid[$i][$j];\n            $pathSum = $grid[$i][$j];\n  \
    \          dfs($grid, $visited, $path, $sum, $pathSum, $i, $j, $k, $minPath, $minSum,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $min[$i][$j] = array();\n            $min[$i][$j][0]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($i = 1; $i < $k; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            for ($l = 0; $l < $m; $l++) {\n\
    \                $min[$j][$l][$i] = PHP_INT_MAX;\n                if ($j > 0)\
    \ {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j - 1][$l][$i\
    \ - 1]);\n                }\n                if ($j < $n - 1) {\n            \
    \        $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j + 1][$l][$i - 1]);\n\
    \                }\n                if ($l > 0) {\n                    $min[$j][$l][$i]\
    \ = min($min[$j][$l][$i], $min[$j][$l - 1][$i - 1]);\n                }\n    \
    \            if ($l < $m - 1) {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i],\
    \ $min[$j][$l + 1][$i - 1]);\n                }\n            }\n        }\n  \
    \  }\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = PHP_INT_MAX;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $result[$k - 1] = min($", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min = array_fill(0, $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n\
    \    $visited[0][0] = true;\n    $queue = array(array(0, 0, 0));\n    while (!empty($queue))\
    \ {\n        list($i, $j, $l) = array_shift($queue);\n        if ($l == $k - 1)\
    \ {\n            break;\n        }\n        if ($i > 0 && !$visited[$i - 1][$j])\
    \ {\n            $visited[$i - 1][$j] = true;\n            $queue[] = array($i\
    \ - 1, $j, $l + 1);\n            if ($grid[$i - 1][$j] < $min[$l + 1]) {\n   \
    \             $min[$l + 1] = $grid[$i - 1][$j];\n            }\n        }\n  \
    \      if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i +\
    \ 1][$j] = true;\n            $queue[] = array($i + 1, $j, $l + 1);\n        \
    \    if ($grid[$i + 1][$j] < $min[$l + 1]) {\n                $min[$l + 1] = $grid[$i\
    \ + 1][$j];\n            }\n        }\n        if ($j > 0 && !$visited[$i][$j\
    \ - 1]) {\n            $visited[$i][$j - 1] = true;\n            $queue[] = array($i,\
    \ $j - 1, $l + 1);\n            if ($grid[$i][$j - 1] < $min[$l + 1]) {\n    \
    \            $min[$l + 1] = $grid[$i][$j - 1];\n            }\n        }\n   \
    \     if ($j < $m - 1 && !$visited[$i][$", "    // Your code here\n}\n", "   \
    \ // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n\
    \            dfs($grid, $visited, $i, $j, $path, $pathSum, $minPath, $minPathSum,\
    \ $k);\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0]\
    \ = array($grid[$i][$j]);\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n\
    \        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++)\
    \ {\n                $min = array();\n                if ($i > 0) {\n        \
    \            $min = $dp[$i - 1][$j][$l - 1];\n                }\n            \
    \    if ($i < $n - 1 && ($min == array() || $min > $dp[$i + 1][$j][$l - 1])) {\n\
    \                    $min = $dp[$i + 1][$j][$l - 1];\n                }\n    \
    \            if ($j > 0 && ($min == array() || $min > $dp[$i][$j - 1][$l - 1]))\
    \ {\n                    $min = $dp[$i][$j - 1][$l - 1];\n                }\n\
    \                if ($j < $m - 1 && ($min == array() || $min > $dp[$i][$j + 1][$l\
    \ - 1])) {\n                    $min = $dp[$i][$j + 1][$l - 1];\n            \
    \    }\n                $dp[$i][$j][$l] = array_merge($min, array($grid[$i][$j]));\n\
    \            }\n        }\n    }\n    $min = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($min == array()\
    \ || $min > $dp[$i][$j][$k - 1]) {\n                $min = $dp[$i][", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use print\n    // Example: print \"Hello world!\";\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $path = array();\n\
    \    $pathSum = 0;\n    $visited[0][0] = true;\n    $path[] = $grid[0][0];\n \
    \   $pathSum += $grid[0][0];\n    $queue = array();\n    $queue[] = array(0, 0);\n\
    \    while (!empty($queue)) {\n        $cur = array_shift($queue);\n        $i\
    \ = $cur[0];\n        $j = $cur[1];\n        if (count($path) == $k) {\n     \
    \       if ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n\
    \                $minPath = $path;\n            }\n            $pathSum -= $grid[$i][$j];\n\
    \            array_pop($path);\n            $visited[$i][$j] = false;\n      \
    \      continue;\n        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n\
    \            $visited[$i - 1][$j] = true;\n            $path[] = $grid[$i - 1][$j];\n\
    \            $pathSum += $grid[$i - 1][$j];\n            $queue[] = array($i -\
    \ 1, $j);\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n  \
    \          $visited[$i + 1][$j] = true;\n            $path[] = $grid[$i + 1][$j];\n\
    \            $pathSum += $grid[$i + 1][$j];\n            $queue[] = array($i +\
    \ 1, $j);\n        }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n       \
    \     $visited[$i][$j - 1] = true;\n            $path[] = $grid[$i][$j", "   \
    \ // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $minPath = dfs($grid, $i,\
    \ $j, $k, $path, $pathSum, $visited, $minPath, $minPathSum);\n        }\n    }\n\
    \    return $minPath;\n}", "    // Your code here\n}", "    // Your code here\n\
    }\n", "    // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, 0, 0,\
    \ $k, $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n    return\
    \ $minPath;\n}", "    // Your code here\n}\n", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited[$i][$j] = true;\n           \
    \ $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n         \
    \   if ($k > 1) {\n                $pathSum += minPathHelper($grid, $k - 1, $i,\
    \ $j, $visited, $path);\n            }\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $k - 1, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n", "    $n =\
    \ count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathVal = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathVal = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathVal += $grid[$i][$j];\n            $k--;\n            if ($k\
    \ == 0) {\n                if ($pathVal < $minPathVal) {\n                   \
    \ $minPathVal = $pathVal;\n                    $minPath = $path;\n           \
    \     }\n                continue;\n            }\n            $stack = array(array($i,\
    \ $j));\n            while (!empty($stack)) {\n                list($x, $y) =\
    \ array_pop($stack);\n                if ($x > 0 && !$visited[$x - 1][$y]) {\n\
    \                    $visited[$x - 1][$y] = true;\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $pathVal += $grid[$x - 1][$y];\n \
    \                   $k--;\n                    if ($k == 0) {\n              \
    \          if ($pathVal < $minPathVal) {\n                            $minPathVal\
    \ = $pathVal;\n                            $minPath = $path;\n               \
    \         }\n                        break;\n                    }\n         \
    \           $stack[] = array($x - 1, $y);\n                }\n               \
    \ if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x\
    \ + 1][$y] = true;\n                    $path[] = $grid[$x + 1][$y];\n       \
    \             $pathVal += $grid[$x + 1][$y];\n                    $k--;\n    \
    \                if ($k == 0) {\n                        if ($pathVal < $minPath",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $queue = array(array($i,\
    \ $j));\n            while (!empty($queue)) {\n                $curr = array_shift($queue);\n\
    \                $x = $curr[0];\n                $y = $curr[1];\n            \
    \    if (count($path) == $k) {\n                    if ($pathSum < $minPathSum)\
    \ {\n                        $minPathSum = $pathSum;\n                       \
    \ $minPath = $path;\n                    }\n                    break;\n     \
    \           }\n                if ($x > 0 && !$visited[$x - 1][$y]) {\n      \
    \              $visited[$x - 1][$y] = true;\n                    $path[] = $grid[$x\
    \ - 1][$y];\n                    $pathSum += $grid[$x - 1][$y];\n            \
    \        $queue[] = array($x - 1, $y);\n                }\n                if\
    \ ($x < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x +\
    \ 1][$y] = true;\n                    $path[] = $grid[$x + 1][$y];\n         \
    \           $pathSum += $grid[$x + 1][$y];\n                    $queue[] = array($x\
    \ + 1, $y);\n                }\n                if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n                    $visited[$x][$y - 1] = true;\n                \
    \    $path[] = $grid[$x][", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $visited, $path, $sum,\
    \ $i, $j, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n   \
    \     }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $queue = new\
    \ SplQueue();\n    $queue->enqueue(array(0, 0, 0, array()));\n    $visited[0][0]\
    \ = true;\n    $minPath = array();\n    while (!$queue->isEmpty()) {\n       \
    \ list($x, $y, $len, $path) = $queue->dequeue();\n        if ($len == $k) {\n\
    \            if (empty($minPath) || $path < $minPath) {\n                $minPath\
    \ = $path;\n            }\n            continue;\n        }\n        if (!empty($minPath)\
    \ && $path >= $minPath) {\n            continue;\n        }\n        $path[] =\
    \ $grid[$x][$y];\n        if ($x > 0 && !$visited[$x - 1][$y]) {\n           \
    \ $queue->enqueue(array($x - 1, $y, $len + 1, $path));\n            $visited[$x\
    \ - 1][$y] = true;\n        }\n        if ($x < $n - 1 && !$visited[$x + 1][$y])\
    \ {\n            $queue->enqueue(array($x + 1, $y, $len + 1, $path));\n      \
    \      $visited[$x + 1][$y] = true;\n        }\n        if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n            $queue->enqueue(array($x, $y - 1, $len + 1, $path));\n\
    \            $visited[$x][$y - 1] = true;\n        }\n        if ($y < $m - 1\
    \ && !$visited[$x][$y + 1]) {\n            $queue->enqueue(array($x, $y + 1, $len\
    \ + 1, $path));\n            $visited[$x][$y + 1] = true;\n        }\n    }\n\
    \    return $minPath;\n}\n", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = dfs($grid, $visited, 0, 0, $k, $minPath, $minPathSum);\n  \
    \  return $minPath;\n}", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPaths = array();\n    $minPathsSum =\
    \ array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            $visited[$i][$j] = true;\n            $path = array($grid[$i][$j]);\n\
    \            $pathSum = $grid[$i][$j];\n            $paths = array(array($i, $j));\n\
    \            $pathsSum = array($grid[$i][$j]);\n            $minPath = minPathHelper($grid,\
    \ $visited, $i, $j, $k, $path, $pathSum, $paths, $pathsSum, $minPath, $minSum,\
    \ $minPathSum, $minPaths, $minPathsSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $min = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n   \
    \         $sum = 0;\n            $min_path = minPathHelper($grid, $i, $j, $k,\
    \ $path, $sum);\n            if ($min_path !== false && $sum < $min_sum) {\n \
    \               $min = $min_path;\n                $min_sum = $sum;\n        \
    \    }\n        }\n    }\n    return $min;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n   ", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $min_path = array();\n\
    \    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $min_path, $min_sum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $min_path;\n}", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    $dp[0][0][] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n                $dp[$i][$j]\
    \ = minPathMerge($dp[$i][$j], $dp[$i - 1][$j], $grid[$i][$j]);\n            }\n\
    \            if ($j > 0) {\n                $dp[$i][$j] = minPathMerge($dp[$i][$j],\
    \ $dp[$i][$j - 1], $grid[$i][$j]);\n            }\n        }\n    }\n    return\
    \ $dp[$n - 1][$m - 1][$k - 1];\n}", "    $n = count($grid);\n    $minPath = array();\n\
    \    $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n    $minPath[2]\
    \ = $grid[1][0];\n    $minPath[3] = $grid[1][1];\n    $minPath[4] = $grid[0][2];\n\
    \    $minPath[5] = $grid[1][2];\n    $minPath[6] = $grid[2][0];\n    $minPath[7]\
    \ = $grid[2][1];\n    $minPath[8] = $grid[2][2];\n    $minPath = array_unique($minPath);\n\
    \    sort($minPath);\n    $minPath = array_slice($minPath, 0, $k);\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPath[] = $grid[0][0];\n    $minPathSum = $grid[0][0];\n\
    \    $minPathSum += minPathHelper($grid, $n, $m, $k - 1, 0, 0, $minPath);\n  \
    \  return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSumHelper\
    \ = function($i, $j, $path, $sum) use ($grid, $k, $n, $m, &$visited, &$minPath,\
    \ &$minSum, &$minPathSum) {\n        if ($sum > $minSum) {\n            return;\n\
    \        }\n        if (count($path) == $k) {\n            if ($sum < $minSum)\
    \ {\n                $minSum = $sum;\n                $minPath = $path;\n    \
    \        } else if ($sum == $minSum) {\n                $pathSum = array_sum($path);\n\
    \                if ($pathSum < $minPathSum) {\n                    $minPathSum\
    \ = $pathSum;\n                    $minPath = $path;\n                }\n    \
    \        }\n            return;\n        }\n        if ($i < 0 || $i >= $n ||\
    \ $j < 0 || $j >= $m || $visited[$i][$j]) {\n            return;\n        }\n\
    \        $visited[$i][$j] = true;\n        $path[] = $grid[$i][$j];\n        $minPathSumHelper($i\
    \ - 1, $j, $path, $sum + $grid[$i][$j]);\n        $minPathSumHelper($i + 1, $j,\
    \ $path, $sum + $grid[$i][$j]);\n        $minPathSumHelper($i, $j - 1, $path,\
    \ $sum + $grid[$i][$j]);\n        $minPathSumHelper($i, $j + 1, $path, $sum +\
    \ $grid[$i][$j]);\n        $visited[$i][$j] = false;\n    };\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            $visited[$i][$j] = true;\n            $path = array();\n\
    \            $pathSum = 0;\n            $pathSum = 0;\n            $pathSum =\
    \ 0;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $path", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = $n * $n + 1;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n\
    \            $pathSum = minPathHelper($grid, $n, $i, $j, $k - 1, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n       \
    \     $path[] = $grid[$i][$j];\n            $visited = array();\n            $visited[$i][$j]\
    \ = true;\n            if (findPath($grid, $i, $j, $path, $visited, $k)) {\n \
    \               if (count($minPath) == 0 || $path < $minPath) {\n            \
    \        $minPath = $path;\n                }\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $sum = 0;\n            $path[] = $grid[$i][$j];\n            $sum +=\
    \ $grid[$i][$j];\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $queue = array(array($i, $j));\n\
    \            while (!empty($queue)) {\n                list($x, $y) = array_shift($queue);\n\
    \                if (count($path) == $k) {\n                    if ($sum < $min_sum)\
    \ {\n                        $min = $path;\n                        $min_sum =\
    \ $sum;\n                    } else if ($sum == $min_sum) {\n                \
    \        $min = min($min, $path);\n                    }\n                   \
    \ break;\n                }\n                if ($x > 0 && !$visited[$x - 1][$y])\
    \ {\n                    $visited[$x - 1][$y] = true;\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $sum += $grid[$x - 1][$y];\n     \
    \               $queue[] = array($x - 1, $y);\n                }\n           \
    \     if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x\
    \ + 1][$y] = true;\n                    $path[] = $grid[$x + 1][$y];\n       \
    \             $sum += $grid[$x + 1][$y];\n                    $queue[] = array($x\
    \ + 1, $y);\n                }\n                if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n                    $visited[$x][$y - 1] = true;\n                \
    \    $path[] = $grid[$x][", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $path, $pathSum, $visited, $minPath, $minPathSum);\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if (dfs($grid, $i, $j, $k\
    \ - 1, $path, $pathSum, $visited, $minPath, $minPathSum)) {\n                return\
    \ $minPath;\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min_val = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $min[$i][$j] = array();\n            $min_val[$i][$j]\
    \ = array();\n            for ($l = 0; $l < $k; $l++) {\n                $min[$i][$j][$l]\
    \ = array();\n                $min_val[$i][$j][$l] = array();\n            }\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $min[$i][$j][0] = array($grid[$i][$j]);\n       \
    \     $min_val[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($l = 1;\
    \ $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j\
    \ = 0; $j < $m; $j++) {\n                $min[$i][$j][$l] = array();\n       \
    \         $min_val[$i][$j][$l] = PHP_INT_MAX;\n                if ($i > 0) {\n\
    \                    $tmp = $min[$i - 1][$j][$l - 1];\n                    $tmp[]\
    \ = $grid[$i][$j];\n                    $tmp_val = $min_val[$i - 1][$j][$l - 1]\
    \ + $grid[$i][$j];\n                    if ($tmp_val < $min_val[$i][$j][$l]) {\n\
    \                        $min[$i][$j][$l] = $tmp;\n                        $min_val[$i][$j][$l]\
    \ = $tmp_val;\n                    }\n                }\n                if ($j\
    \ > 0) {\n                    $tmp", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPath = dfs($grid,\
    \ $visited, $minPath, $k, 0, 0, 0);\n    return $minPath;\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n", "    $n = count($grid);\n   \
    \ $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $path[] = $grid[$i][$j];\n           \
    \ $pathSum += $grid[$i][$j];\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n            $visited[$i][$j] = true;\n            if (dfs($grid,\
    \ $i, $j, $k - 1, $path, $pathSum, $visited, $minPath, $minPathSum)) {\n     \
    \           return $minPath;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            dfs($grid, $i,\
    \ $j, $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n       \
    \         $minSum = $sum;\n                $minPath = $path;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            if (dfs($grid,\
    \ $visited, $path, $sum, $i, $j, $k, $n, $m)) {\n                if ($sum < $minSum)\
    \ {\n                    $minSum = $sum;\n                    $minPath = $path;\n\
    \                }\n            }\n            $visited[$i][$j] = false;\n   \
    \     }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $curPath = array();\n            $curSum\
    \ = 0;\n            dfs($grid, $i, $j, $k, $visited, $curPath, $curSum, $minPath,\
    \ $minSum);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n    $minPath[0] =\
    \ $grid[0][0];\n    $visited[0][0] = true;\n    $minPath = minPathHelper($grid,\
    \ $visited, $minPath, $k, 0, 0, 1);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if (dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited)) {\n  \
    \              if ($pathSum < $minPathSum) {\n                    $minPathSum\
    \ = $pathSum;\n                    $minPath = $path;\n                }\n    \
    \        }\n        }\n    }\n    return $minPath;\n}", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $visited, $i, $j, $path, $sum, $k, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $curPath = array();\n            $curSum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $visited, $curPath, $curSum, $minPath, $minSum);\n        }\n  \
    \  }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $n, $m, 0, 0, $k,\
    \ $visited, $minPath, $minPathSum);\n    return $minPath;\n}", "    // Write your\
    \ code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $path = array();\n    $min_path = array();\n    $min_sum = PHP_INT_MAX;\n\
    \    $min_path_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $sum\
    \ = 0;\n            $path_sum = 0;\n            dfs($grid, $i, $j, $k, $path,\
    \ $sum, $path_sum);\n            if ($sum < $min_sum) {\n                $min_sum\
    \ = $sum;\n                $min_path = $path;\n                $min_path_sum =\
    \ $path_sum;\n            } else if ($sum == $min_sum && $path_sum < $min_path_sum)\
    \ {\n                $min_path = $path;\n                $min_path_sum = $path_sum;\n\
    \            }\n        }\n    }\n    return $min_path;\n}\n", "    // Your code\
    \ here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $min", "    // Your code\
    \ here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $sum = 0;\n         \
    \   $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n         \
    \   $sum += $grid[$i][$j];\n            dfs($grid, $visited, $i, $j, $k - 1, $path,\
    \ $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPaths = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $visited[$i][$j] = true;\n            $path = array($grid[$i][$j]);\n\
    \            $sum = $grid[$i][$j];\n            $pathSum = $grid[$i][$j];\n  \
    \          $paths = array(array($i, $j));\n            $minPath = dfs($grid, $i,\
    \ $j, $k - 1, $visited, $path, $sum, $pathSum, $paths, $minPath, $minSum, $minPathSum,\
    \ $minPaths);\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    $minSumPath = array();\n    $minSumPaths = array();\n\
    \    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] =", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $minPath = getMinPath($grid,\
    \ $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n       \
    \ }\n    }\n    return $minPath;\n}", "    // Your code here\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $curPath\
    \ = array();\n            $curSum = 0;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $curPath, $curSum, $minPath, $minSum);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n", "    $n =\
    \ count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $path = array();\n\
    \    $pathSum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n            array_pop($path);\n            $pathSum -= $grid[$i][$j];\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPaths = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n            $path\
    \ = array($grid[$i][$j]);\n            $sum = $grid[$i][$j];\n            $pathSum\
    \ = $grid[$i][$j];\n            $paths = array(array($i, $j));\n            $minPath\
    \ = dfs($grid, $visited, $i, $j, $path, $sum, $pathSum, $paths, $k, $minPath,\
    \ $minSum, $minPathSum, $minPaths);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = $n * $m + 1;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            if (dfs($grid,\
    \ $i, $j, $k - 1, $n, $m, $visited, $path, $sum)) {\n                if ($sum\
    \ < $minSum) {\n                    $minSum = $sum;\n                    $minPath\
    \ = $path;\n                }\n            }\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $visited, $i, $j,\
    \ $path, $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSumHelper = function($grid, $n, $m, $i, $j, $visited, $k, $sum, $path)\
    \ use (&$minPath, &$minSum, &$minPathSum) {\n        if ($k == 0) {\n        \
    \    if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
    \ = $path;\n            } else if ($sum == $minSum) {\n                $pathSum\
    \ = array_sum($path);\n                if ($pathSum < $minPathSum) {\n       \
    \             $minPathSum = $pathSum;\n                    $minPath = $path;\n\
    \                }\n            }\n            return;\n        }\n        $visited[$i][$j]\
    \ = true;\n        $path[] = $grid[$i][$j];\n        if ($i > 0 && !$visited[$i\
    \ - 1][$j]) {\n            $minPathSumHelper($grid, $n, $m, $i - 1, $j, $visited,\
    \ $k - 1, $sum + $grid[$i - 1][$j], $path);\n        }\n        if ($i < $n -\
    \ 1 && !$visited[$i + 1][$j]) {\n            $minPathSumHelper($grid, $n, $m,\
    \ $i + 1, $j, $visited, $k - 1, $sum + $grid[$i + 1][$j], $path);\n        }\n\
    \        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $minPathSumHelper($grid,\
    \ $n, $m, $i, $j - 1, $visited, $k - 1, $sum + $grid[$i][$j - 1], $path);\n  \
    \      }\n        if ($j < $m - 1 &&", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPath[] = $grid[0][0];\n    $minPathSum = $grid[0][0];\n\
    \    $minPathSum += $grid[0][1];\n    $minPathSum += $grid[1][0];\n    $minPathSum\
    \ += $grid[1][1];\n    $minPathSum += $grid[1][2];\n    $minPathSum += $grid[2][1];\n\
    \    $minPathSum += $grid[2][2];\n    $minPathSum += $grid[2][3];\n    $minPathSum\
    \ += $grid[3][2];\n    $minPathSum += $grid[3][3];\n    $minPathSum += $grid[3][4];\n\
    \    $minPathSum += $grid[4][3];\n    $minPathSum += $grid[4][4];\n    $minPathSum\
    \ += $grid[4][5];\n    $minPathSum += $grid[5][4];\n    $minPathSum += $grid[5][5];\n\
    \    $minPathSum += $grid[5][6];\n    $minPathSum += $grid[6][5];\n    $minPathSum\
    \ += $grid[6][6];\n    $minPathSum += $grid[6][7];\n    $minPathSum += $grid[7][6];\n\
    \    $minPathSum += $grid[7][7];\n    $minPathSum += $grid[7][8];\n    $minPathSum\
    \ += $grid[8][7];\n    $minPathSum += $grid[8][8];\n    $minPathSum += $grid[8][9];\n\
    \    $minPathSum += $grid[9][8];\n    $minPathSum += $grid[9][9];\n    $minPathSum\
    \ += $grid[9][10];\n    $minPathSum += $grid[10][9];\n    $minPathSum += $grid[10][10];\n\
    \    $minPathSum += $grid[10][11];\n    $minPathSum += $grid[11][10];\n    $minPathSum\
    \ += $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, 0, 0,\
    \ $k, 0, $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $pathSum = 0;\n\
    \            dfs($grid, $i, $j, $visited, $path, $sum, $pathSum, $k, $minPath,\
    \ $minSum, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            dfs($grid, $i,\
    \ $j, $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n       \
    \         $minSum = $sum;\n                $minPath = $path;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            dfs($grid, $i, $j,\
    \ $k, $path, $pathSum, $visited);\n            if ($pathSum < $minPathSum) {\n\
    \                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min_path = array();\n    $min_path_sum = PHP_INT_MAX;\n\
    \    $min_path_sum_prev = PHP_INT_MAX;\n    $min_path_sum_prev_prev = PHP_INT_MAX;\n\
    \    $min_path_sum_prev_prev_prev = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev = PHP_INT_MAX;\n\
    \    $min_path_sum_prev_prev_prev_prev_prev_prev = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $min_path_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = PHP_INT_MAX;\n    $", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n\
    \            $minPathSum = minPathHelper($grid, $visited, $i, $j, $k - 1, $path,\
    \ $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $queue = new SplQueue();\n    $queue->enqueue(array(0, 0, 0, array()));\n\
    \    $visited[0][0] = true;\n    $minPath = array();\n    while (!$queue->isEmpty())\
    \ {\n        list($x, $y, $len, $path) = $queue->dequeue();\n        if ($len\
    \ == $k) {\n            if (empty($minPath) || $path < $minPath) {\n         \
    \       $minPath = $path;\n            }\n            continue;\n        }\n \
    \       if ($x > 0 && !$visited[$x - 1][$y]) {\n            $visited[$x - 1][$y]\
    \ = true;\n            $queue->enqueue(array($x - 1, $y, $len + 1, array_merge($path,\
    \ array($grid[$x - 1][$y]))));\n        }\n        if ($x < $n - 1 && !$visited[$x\
    \ + 1][$y]) {\n            $visited[$x + 1][$y] = true;\n            $queue->enqueue(array($x\
    \ + 1, $y, $len + 1, array_merge($path, array($grid[$x + 1][$y]))));\n       \
    \ }\n        if ($y > 0 && !$visited[$x][$y - 1]) {\n            $visited[$x][$y\
    \ - 1] = true;\n            $queue->enqueue(array($x, $y - 1, $len + 1, array_merge($path,\
    \ array($grid[$x][$y - 1]))));\n        }\n        if ($y < $m - 1 && !$visited[$x][$y\
    \ + 1]) {\n            $visited[$x][$y + 1] = true;\n            $queue->enqueue(array($x,\
    \ $y + 1, $len + 1, array_merge($path, array($grid[$x][$", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $visited[$i][$j] = true;\n            $path = array($grid[$i][$j]);\n\
    \            $pathSum = $grid[$i][$j];\n            dfs($grid, $visited, $i, $j,\
    \ $path, $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $n, false));\n            dfs($grid, $i, $j,\
    \ $k, $path, $pathSum, $visited);\n            if ($pathSum < $minPathSum) {\n\
    \                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    // Your code\
    \ here\n}", "    // Your code here\n}\n", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($i, $j, $k - 1, $grid,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $min_path = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n\
    \            $path[] = $grid[$i][$j];\n            $visited = array();\n     \
    \       $visited[$i][$j] = true;\n            if (dfs($grid, $i, $j, $k - 1, $path,\
    \ $visited)) {\n                if (count($min_path) == 0 || $path < $min_path)\
    \ {\n                    $min_path = $path;\n                }\n            }\n\
    \        }\n    }\n    return $min_path;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $visited, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = $n * $m * $n * $m;\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $m; $j++) {\n            $path = array();\n          \
    \  $pathSum = 0;\n            $visited = array();\n            for ($x = 0; $x\
    \ < $n; $x++) {\n                $visited[$x] = array();\n                for\
    \ ($y = 0; $y < $m; $y++) {\n                    $visited[$x][$y] = false;\n \
    \               }\n            }\n            $visited[$i][$j] = true;\n     \
    \       $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n   \
    \         $queue = array(array($i, $j));\n            while (count($queue) > 0)\
    \ {\n                $cur = array_shift($queue);\n                $x = $cur[0];\n\
    \                $y = $cur[1];\n                if (count($path) == $k) {\n  \
    \                  if ($pathSum < $minPathSum) {\n                        $minPathSum\
    \ = $pathSum;\n                        $minPath = $path;\n                   \
    \ }\n                    break;\n                }\n                if ($x > 0\
    \ && !$visited[$x - 1][$y]) {\n                    $visited[$x - 1][$y] = true;\n\
    \                    $queue[] = array($x - 1, $y);\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $pathSum += $grid[$x - 1][$y];\n \
    \               }\n                if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n\
    \                    $visited[$x + 1][$y] = true;\n                    $queue[]\
    \ = array($x + 1, $y);\n                    $path[] = $grid[$x + 1][$y];\n   \
    \                 $pathSum += $grid[$x + 1][", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minSumPath = array();\n\
    \    $minSumPaths = array();\n    $path = array();\n    $sum = 0;\n    $paths\
    \ = array();\n    $paths[] = array(0, 0);\n    $visited[0][0] = true;\n    $path[]\
    \ = $grid[0][0];\n    $sum += $grid[0][0];\n    $minPath[] = $grid[0][0];\n  \
    \  $minSumPath[] = $grid[0][0];\n    $minSumPaths[] = array(0, 0);\n    $minSum\
    \ = $sum;\n    while (count($paths) > 0) {\n        $p = array_pop($paths);\n\
    \        $i = $p[0];\n        $j = $p[1];\n        $visited[$i][$j] = false;\n\
    \        $v = array_pop($path);\n        $sum -= $v;\n        if ($sum < $minSum)\
    \ {\n            $minSum = $sum;\n            $minPath = $path;\n            $minSumPath\
    \ = $path;\n            $minSumPaths = $paths;\n        } else if ($sum == $minSum)\
    \ {\n            if ($path < $minPath) {\n                $minPath = $path;\n\
    \            }\n            if ($path < $minSumPath) {\n                $minSumPath\
    \ = $path;\n                $minSumPaths = $paths;\n            }\n        }\n\
    \        if (count($path) < $k) {\n            if ($i > 0 && !$visited[$i - 1][$j])\
    \ {\n                $paths[] = array($i - 1, $j);\n                $visited[$i\
    \ - 1][$j] = true;\n                $path[] = $grid[$i - 1][$j];\n           \
    \     $sum += $grid[$i", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $m; $j++) {\n            $min[$i][$j] = array();\n            $min[$i][$j][0]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($i = 1; $i < $k; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            for ($l = 0; $l < $m; $l++) {\n\
    \                $min[$j][$l][$i] = PHP_INT_MAX;\n                if ($j > 0)\
    \ {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j - 1][$l][$i\
    \ - 1]);\n                }\n                if ($j < $n - 1) {\n            \
    \        $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j + 1][$l][$i - 1]);\n\
    \                }\n                if ($l > 0) {\n                    $min[$j][$l][$i]\
    \ = min($min[$j][$l][$i], $min[$j][$l - 1][$i - 1]);\n                }\n    \
    \            if ($l < $m - 1) {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i],\
    \ $min[$j][$l + 1][$i - 1]);\n                }\n            }\n        }\n  \
    \  }\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = PHP_INT_MAX;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $result[$k - 1] = min($", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPath[] = $grid[0][0];\n\
    \    $minPathSum = $grid[0][0];\n    $minPathSum += minPathHelper($grid, $n, $m,\
    \ $k - 1, 0, 0, $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min_path = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $k - 1, $path, $sum, $min_path, $min_sum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $min_path;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathValue\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue += $grid[$i][$j];\n            minPathHelper($grid, $n,\
    \ $m, $i, $j, $k - 1, $path, $pathValue, $visited, $minPath, $minPathValue);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n    $minPathLength\
    \ = PHP_INT_MAX;\n    $minPathIndex = 0;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n       \
    \     $pathValue = 0;\n            $pathLength = 0;\n            $pathIndex =\
    \ 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue += $grid[$i][$j];\n            $pathLength++;\n      \
    \      $pathIndex += $grid[$i][$j] * pow($n * $m, $k - 1);\n            dfs($grid,\
    \ $i, $j, $visited, $path, $pathValue, $pathLength, $pathIndex, $k, $minPath,\
    \ $minPathValue, $minPathLength, $minPathIndex);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = INF;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path =\
    \ array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathValue\
    \ = PHP_INT_MAX;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue = $grid[$i][$j];\n            if ($k == 1) {\n       \
    \         if ($pathValue < $minPathValue) {\n                    $minPath = $path;\n\
    \                    $minPathValue = $pathValue;\n                }\n        \
    \    } else {\n                $path = minPathHelper($grid, $i, $j, $k - 1, $visited,\
    \ $path, $pathValue);\n                if ($pathValue < $minPathValue) {\n   \
    \                 $minPath = $path;\n                    $minPathValue = $pathValue;\n\
    \                }\n            }\n        }\n    }\n    return $minPath;\n}",
  "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $min = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n    $visited[0][0] = true;\n\
    \    $queue = new SplQueue();\n    $queue->enqueue(array(0, 0, 0));\n    while\
    \ (!$queue->isEmpty()) {\n        list($i, $j, $d) = $queue->dequeue();\n    \
    \    if ($d == $k - 1) {\n            break;\n        }\n        if ($i > 0 &&\
    \ !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n       \
    \     $queue->enqueue(array($i - 1, $j, $d + 1));\n            if ($grid[$i -\
    \ 1][$j] < $min[$d + 1]) {\n                $min[$d + 1] = $grid[$i - 1][$j];\n\
    \            }\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n\
    \            $visited[$i + 1][$j] = true;\n            $queue->enqueue(array($i\
    \ + 1, $j, $d + 1));\n            if ($grid[$i + 1][$j] < $min[$d + 1]) {\n  \
    \              $min[$d + 1] = $grid[$i + 1][$j];\n            }\n        }\n \
    \       if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j -\
    \ 1] = true;\n            $queue->enqueue(array($i, $j - 1, $d + 1));\n      \
    \      if ($grid[$i][$j - 1] < $min[$d + 1]) {\n                $min[$d + 1] =\
    \ $grid[$i][$j - 1];\n            }\n        }\n       ", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            $visited = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n \
    \           $visited[$i][$j] = false;\n            if ($sum < $minSum) {\n   \
    \             $minSum = $sum;\n                $minPath = $path;\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathValue = 0;\n            $visited[$i][$j] = true;\n         \
    \   $path[] = $grid[$i][$j];\n            $pathValue += $grid[$i][$j];\n     \
    \       dfs($grid, $i, $j, $k - 1, $visited, $path, $pathValue, $minPath, $minPathValue);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = $n * $m * $n * $m;\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $m; $j++) {\n            $path = array();\n          \
    \  $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if (dfs($grid, $i, $j, $k\
    \ - 1, $path, $pathSum, $visited, $minPath, $minPathSum)) {\n                return\
    \ $minPath;\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPaths = array();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            $visited[$i][$j]\
    \ = false;\n            $minPaths[] = array($path, $sum);\n        }\n    }\n\
    \    for ($i = 0; $i < $k - 1; $i++) {\n        $newMinPaths = array();\n    \
    \    foreach ($minPaths as $minPath) {\n            $path = $minPath[0];\n   \
    \         $sum = $minPath[1];\n            $last = $path[count($path) - 1];\n\
    \            for ($j = 0; $j < $n; $j++) {\n                for ($l = 0; $l <\
    \ $m; $l++) {\n                    if ($grid[$j][$l] == $last) {\n           \
    \             $visited[$j][$l] = true;\n                        if ($j > 0 &&\
    \ !$visited[$j - 1][$l]) {\n                            $newPath = $path;\n  \
    \                          $newPath[] = $grid[$j - 1][$l];\n                 \
    \           $newSum = $sum + $grid[$j - 1][$l];\n                            $newMinPaths[]\
    \ = array($newPath, $newSum);\n                        }\n                   \
    \     if ($j < $n - 1 && !$visited[$j + 1][$l]) {\n                          \
    \  $newPath = $path;\n                            $newPath[] = $grid[$j + 1][",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathValue = PHP_INT_MAX;\n         \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathValue = $grid[$i][$j];\n\
    \            $minPath = dfs($grid, $i, $j, $k - 1, $visited, $path, $pathValue,\
    \ $minPath, $minPathValue);\n        }\n    }\n    return $minPath;\n}", "   \
    \ // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $min", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $sum = 0;\n         \
    \   $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n         \
    \   $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited, $path,\
    \ $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n        }\n\
    \    }\n    return $minPath;\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $path = array();\n    $min = array();\n    $min_path\
    \ = array();\n    $min_path_len = $n * $m;\n    $min_path_sum = $n * $m * ($n\
    \ * $m + 1) / 2;\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $visited[0][0] = true;\n    $path[] = $grid[0][0];\n    $path_len = 1;\n\
    \    $path_sum = $grid[0][0];\n    $min[] = $grid[0][0];\n    $min_path[] = $grid[0][0];\n\
    \    $min_path_len = 1;\n    $min_path_sum = $grid[0][0];\n    $i = 0;\n    $j\
    \ = 0;\n    while (true) {\n        if ($path_len == $k) {\n            if ($path_sum\
    \ < $min_path_sum) {\n                $min_path = $path;\n                $min_path_len\
    \ = $path_len;\n                $min_path_sum = $path_sum;\n            } else\
    \ if ($path_sum == $min_path_sum) {\n                if ($path_len < $min_path_len)\
    \ {\n                    $min_path = $path;\n                    $min_path_len\
    \ = $path_len;\n                    $min_path_sum = $path_sum;\n             \
    \   } else if ($path_len == $min_path_len) {\n                    $min = $path;\n\
    \                    if ($min < $min_path) {\n                        $min_path\
    \ = $min;\n                        $min_path_len = $path_len;\n              \
    \          $min_path_sum = $path_sum;\n                    }\n               \
    \ }\n            }\n        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n\
    \            $path[] = $grid[$i - 1][$j];\n            $path_len++;\n        \
    \    $path_", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if (dfs($grid, $i, $j, $k\
    \ - 1, $path, $pathSum, $visited, $minPath, $minPathSum)) {\n                return\
    \ $minPath;\n            }\n        }\n    }\n    return $minPath;\n}", "    //\
    \ Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n   \
    \ $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $min[$i][$j] = array();\n            $min[$i][$j][0]\
    \ = array($grid[$i][$j]);\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n\
    \        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++)\
    \ {\n                $min[$i][$j][$l] = array();\n                if ($i > 0)\
    \ {\n                    $min[$i][$j][$l] = minPathHelper($min[$i][$j][$l], $min[$i\
    \ - 1][$j][$l - 1], $grid[$i][$j]);\n                }\n                if ($i\
    \ < $n - 1) {\n                    $min[$i][$j][$l] = minPathHelper($min[$i][$j][$l],\
    \ $min[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                }\n             \
    \   if ($j > 0) {\n                    $min[$i][$j][$l] = minPathHelper($min[$i][$j][$l],\
    \ $min[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                }\n             \
    \   if ($j < $m - 1) {\n                    $min[$i][$j][$l] = minPathHelper($min[$i][$j][$l],\
    \ $min[$i][$j + 1][$l - 1], $grid[$i][$j]);\n                }\n            }\n\
    \        }\n    }\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $result = minPathHelper",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n  \
    \          $visited = array();\n            $visited[$i][$j] = true;\n       \
    \     $k--;\n            if ($k == 0) {\n                if ($sum < $minSum) {\n\
    \                    $minSum = $sum;\n                    $minPath = $path;\n\
    \                }\n                continue;\n            }\n            $queue\
    \ = array();\n            $queue[] = array($i, $j);\n            while (!empty($queue))\
    \ {\n                $cur = array_shift($queue);\n                $x = $cur[0];\n\
    \                $y = $cur[1];\n                if ($x > 0 && !$visited[$x - 1][$y])\
    \ {\n                    $visited[$x - 1][$y] = true;\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $sum += $grid[$x - 1][$y];\n     \
    \               $k--;\n                    if ($k == 0) {\n                  \
    \      if ($sum < $minSum) {\n                            $minSum = $sum;\n  \
    \                          $minPath = $path;\n                        }\n    \
    \                    break;\n                    }\n                    $queue[]\
    \ = array($x - 1, $y);\n                }\n                if ($x < $n - 1 &&\
    \ !$visited[$x + 1][$y]) {\n                    $visited[$x + 1][$y] = true;\n\
    \                    $path[] = $grid[$x + 1][$y];\n                    $sum +=\
    \ $grid[$x + 1][$y];\n                    $k--;\n                    if ($k ==\
    \ 0) {\n                        if ($sum < $minSum) {\n                      \
    \      $minSum = $sum", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if (dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath,\
    \ $minPathSum)) {\n                return $minPath;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array($grid[$i][$j]);\n            $sum = $grid[$i][$j];\n\
    \            $pathSum = $grid[$i][$j];\n            dfs($grid, $visited, $i, $j,\
    \ $path, $sum, $pathSum, $k, $minPath, $minSum, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = minPathHelper($grid, $n, $m, $k, 0, 0, $visited, $minPath, $minPathSum);\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, 0, 0,\
    \ $k, 0, $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minSum = $n * $m * $n\
    \ * $m;\n    $minPathSum = $minSum;\n    $minPath = array();\n    $visited = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited[$i][$j] = true;\n           \
    \ $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n         \
    \   if (findPath($grid, $i, $j, $k - 1, $path, $pathSum, $minPath, $minPathSum,\
    \ $visited)) {\n                $minPath = $path;\n                $minPathSum\
    \ = $pathSum;\n            }\n            $visited[$i][$j] = false;\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $visited, $i, $j,\
    \ $k - 1, $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $min = array();\n    $min_sum = PHP_INT_MAX;\n    $min_path\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = array();\n            $sum = 0;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            $min_path[$i][$j]\
    \ = array();\n            $min_path[$i][$j][] = array($i, $j);\n            $min[$i][$j]\
    \ = $sum;\n            for ($l = 1; $l < $k; $l++) {\n                $min_sum\
    \ = PHP_INT_MAX;\n                $min_path[$i][$j][$l] = array();\n         \
    \       if ($i > 0) {\n                    if ($min[$i - 1][$j] < $min_sum) {\n\
    \                        $min_sum = $min[$i - 1][$j];\n                      \
    \  $min_path[$i][$j][$l] = $min_path[$i - 1][$j][$l - 1];\n                  \
    \  }\n                }\n                if ($j > 0) {\n                    if\
    \ ($min[$i][$j - 1] < $min_sum) {\n                        $min_sum = $min[$i][$j\
    \ - 1];\n                        $min_path[$i][$j][$l] = $min_path[$i][$j - 1][$l\
    \ - 1];\n                    }\n                }\n                if ($i < $n\
    \ - 1) {\n                    if ($min[$i + 1][$j] < $min_sum) {\n           \
    \             $min_sum = $min[$i + 1][$j];\n                        $min_path[$i][$j][$l]\
    \ = $min_path[$i + 1][$j][$l - 1];\n                    }\n                }\n\
    \                if ($j < $m - 1)", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $k, 0, 0, $visited,\
    \ $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $min = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $min[0] = $grid[0][0];\n    $visited[0][0] = true;\n    $queue = array(array(0,\
    \ 0, 0));\n    while (!empty($queue)) {\n        list($x, $y, $l) = array_shift($queue);\n\
    \        if ($l == $k - 1) {\n            break;\n        }\n        if ($x >\
    \ 0 && !$visited[$x - 1][$y]) {\n            $visited[$x - 1][$y] = true;\n  \
    \          $queue[] = array($x - 1, $y, $l + 1);\n            if ($grid[$x - 1][$y]\
    \ < $min[$l + 1]) {\n                $min[$l + 1] = $grid[$x - 1][$y];\n     \
    \       }\n        }\n        if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n  \
    \          $visited[$x + 1][$y] = true;\n            $queue[] = array($x + 1,\
    \ $y, $l + 1);\n            if ($grid[$x + 1][$y] < $min[$l + 1]) {\n        \
    \        $min[$l + 1] = $grid[$x + 1][$y];\n            }\n        }\n       \
    \ if ($y > 0 && !$visited[$x][$y - 1]) {\n            $visited[$x][$y - 1] = true;\n\
    \            $queue[] = array($x, $y - 1, $l + 1);\n            if ($grid[$x][$y\
    \ - 1] < $min[$l + 1]) {\n                $min[$l + 1] = $grid[$x][$y - 1];\n\
    \            }\n        }\n        if ($y < $m - 1 && !$visited[$x][$", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $path, $sum, $k, $minPath, $minSum);\n \
    \           $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathValue\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue += $grid[$i][$j];\n            $k--;\n            if ($k\
    \ == 0) {\n                if ($pathValue < $minPathValue) {\n               \
    \     $minPath = $path;\n                    $minPathValue = $pathValue;\n   \
    \             }\n                continue;\n            }\n            $queue\
    \ = array();\n            $queue[] = array($i, $j);\n            while (!empty($queue))\
    \ {\n                $curr = array_shift($queue);\n                $x = $curr[0];\n\
    \                $y = $curr[1];\n                $neighbors = array();\n     \
    \           if ($x > 0) {\n                    $neighbors[] = array($x - 1, $y);\n\
    \                }\n                if ($x < $n - 1) {\n                    $neighbors[]\
    \ = array($x + 1, $y);\n                }\n                if ($y > 0) {\n   \
    \                 $neighbors[] = array($x, $y - 1);\n                }\n     \
    \           if ($y < $m - 1) {\n                    $neighbors[] = array($x, $y\
    \ + 1);\n                }\n                foreach ($neighbors as $neighbor)\
    \ {\n                    $x = $neighbor[0];\n                    $y = $neighbor[1];\n\
    \                    if (!$visited[$x][$y]) {\n                        $visited[$x][$y]\
    \ = true;\n                        $path[] = $grid[$x][$y];\n                \
    \        $pathValue += $grid[$x][$", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            dfs($grid, $i, $j, $k, $path,\
    \ $sum, $visited, $minPath, $minSum);\n        }\n    }\n    return $minPath;\n\
    }", "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathValue\
    \ = PHP_INT_MAX;\n    $minPathValueIndex = -1;\n    $minPathValueIndexes = array();\n\
    \    $minPathValueIndexes[0] = -1;\n    $minPathValueIndexes[1] = -1;\n    $minPathValueIndexes[2]\
    \ = -1;\n    $minPathValueIndexes[3] = -1;\n    $minPathValueIndexes[4] = -1;\n\
    \    $minPathValueIndexes[5] = -1;\n    $minPathValueIndexes[6] = -1;\n    $minPathValueIndexes[7]\
    \ = -1;\n    $minPathValueIndexes[8] = -1;\n    $minPathValueIndexes[9] = -1;\n\
    \    $minPathValueIndexes[10] = -1;\n    $minPathValueIndexes[11] = -1;\n    $minPathValueIndexes[12]\
    \ = -1;\n    $minPathValueIndexes[13] = -1;\n    $minPathValueIndexes[14] = -1;\n\
    \    $minPathValueIndexes[15] = -1;\n    $minPathValueIndexes[16] = -1;\n    $minPathValueIndexes[17]\
    \ = -1;\n    $minPathValueIndexes[18] = -1;\n    $minPathValueIndexes[19] = -1;\n\
    \    $minPathValueIndexes[20] = -1;\n    $minPathValueIndexes[21] = -1;\n    $minPathValueIndexes[22]\
    \ = -1;\n    $minPathValueIndexes[23] = -1;\n    $minPathValueIndexes[24] = -1;\n\
    \    $minPathValueIndexes[25] = -1;\n    $minPathValueIndexes", "    $n = count($grid);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSumIndex\
    \ = -1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            $path = array();\n            $pathSum = 0;\n            $pathSumIndex\
    \ = -1;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathSumIndex++;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n            $visited[$i][$j] = true;\n            $queue = array();\n\
    \            $queue[] = array($i, $j);\n            while (!empty($queue)) {\n\
    \                $cur = array_shift($queue);\n                $curI = $cur[0];\n\
    \                $curJ = $cur[1];\n                $curPathSum = $pathSum - $path[$pathSumIndex];\n\
    \                $curPathSumIndex = $pathSumIndex - 1;\n                if ($curPathSum\
    \ > $minPathSum) {\n                    continue;\n                }\n       \
    \         if ($curPathSum == $minPathSum) {\n                    $curPath = array_slice($path,\
    \ 0, $pathSumIndex + 1);\n                    if (lexicographicalLess($curPath,\
    \ $minPath)) {\n                        continue;\n                    }\n   \
    \             }\n                if ($pathSumIndex == $k - 1) {\n            \
    \        $minPath = $path;\n                    $minPathSum = $pathSum;\n    \
    \                $minPathSumIndex = $pathSumIndex;\n                    continue;\n\
    \                }\n                $neighbors = array();\n                if\
    \ ($curI > 0) {\n                    $neighbors[] = array($curI - 1, $curJ);\n\
    \                }\n                if ($curI < $n - 1) {\n                  \
    \  $neighbors[] = array($curI + 1, $curJ);\n                }\n              \
    \  if ($curJ > 0) {\n                    $neighbors[] = array($curI,", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n     \
    \       $visited = array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited[$i][$j] = true;\n           \
    \ $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n         \
    \   $visited[$i][$j] = false;\n            if ($pathSum < $minPathSum) {\n   \
    \             $minPath = $path;\n                $minPathSum = $pathSum;\n   \
    \         }\n        }\n    }\n    return $minPath;\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $visited[$i][$j] = true;\n            $path = array($grid[$i][$j]);\n\
    \            $sum = $grid[$i][$j];\n            $pathSum = $grid[$i][$j];\n  \
    \          dfs($grid, $visited, $i, $j, $path, $sum, $pathSum, $k, $minPath, $minSum,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    // Your code here\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $curPath = array();\n            $curSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $curPath[] = $grid[$i][$j];\n            $curSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $curPath, $curSum, $minPath,\
    \ $minSum);\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPaths = array();\n\
    \    $minPathsSum = array();\n    $minPaths[0] = array();\n    $minPathsSum[0]\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $minPaths[0][$grid[$i][$j]] = array($i, $j);\n            $minPathsSum[0]\
    \ += $grid[$i][$j];\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n   \
    \     $minPaths[$l] = array();\n        $minPathsSum[$l] = PHP_INT_MAX;\n    \
    \    for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n\
    \                $minPaths[$l][$grid[$i][$j]] = array($i, $j);\n             \
    \   $minPathsSum[$l] = PHP_INT_MAX;\n                if ($i > 0 && !$visited[$i\
    \ - 1][$j]) {\n                    $sum = $minPathsSum[$l - 1] + $grid[$i][$j]\
    \ - $grid[$i - 1][$j];\n                    if ($sum < $minPathsSum[$l]) {\n \
    \                       $minPaths[$l] = $minPaths[$l - 1];\n                 \
    \       $minPaths[$l][$grid[$i][$j]] = array($i, $j);\n                      \
    \  $minPathsSum[$l] = $sum;\n                    }\n                }\n      \
    \          if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n", "    $N = count($grid);\n\
    \    $visited = array_fill(0, $N, array_fill(0, $N, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, 0, 0,\
    \ $k, $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n            dfs($grid, $i, $j, $path, $pathSum, $visited, $k,\
    \ $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = array();\n    $min_sum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n            $visited[$i][$j] = true;\n     \
    \       $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n       \
    \     $min_path = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n       \
    \     if ($min_path[1] < $min_sum) {\n                $min = $min_path[0];\n \
    \               $min_sum = $min_path[1];\n            }\n        }\n    }\n  \
    \  return $min;\n}", "    // Your code here\n}\n", "    // Your code here\n}",
  "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    $min_val = array();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j] = array();\n\
    \            $min_val[$i][$j] = array();\n            for ($l = 0; $l < $k; $l++)\
    \ {\n                $min[$i][$j][$l] = array();\n                $min_val[$i][$j][$l]\
    \ = array();\n            }\n        }\n    }\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j][0] = array($grid[$i][$j]);\n\
    \            $min_val[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($l\
    \ = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $min[$i][$j][$l] = array();\n   \
    \             $min_val[$i][$j][$l] = PHP_INT_MAX;\n                if ($i > 0)\
    \ {\n                    $tmp = $min[$i - 1][$j][$l - 1];\n                  \
    \  $tmp[] = $grid[$i][$j];\n                    $tmp_val = $min_val[$i - 1][$j][$l\
    \ - 1] + $grid[$i][$j];\n                    if ($tmp_val < $min_val[$i][$j][$l])\
    \ {\n                        $min[$i][$j][$l] = $tmp;\n                      \
    \  $min_val[$i][$j][$l] = $tmp_val;\n                    }\n                }\n\
    \                if ($j > 0) {\n                    $tmp", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSumHelper = function($i, $j, $path, $sum) use ($grid,\
    \ $k, $n, $m, &$visited, &$minPath, &$minSum, &$minPathSum) {\n        if ($sum\
    \ > $minSum) {\n            return;\n        }\n        if (count($path) == $k)\
    \ {\n            if ($sum < $minSum) {\n                $minSum = $sum;\n    \
    \            $minPath = $path;\n            } else if ($sum == $minSum) {\n  \
    \              $pathSum = array_sum($path);\n                if ($pathSum < $minPathSum)\
    \ {\n                    $minPathSum = $pathSum;\n                    $minPath\
    \ = $path;\n                }\n            }\n            return;\n        }\n\
    \        if ($i < 0 || $i >= $n || $j < 0 || $j >= $m || $visited[$i][$j]) {\n\
    \            return;\n        }\n        $visited[$i][$j] = true;\n        $path[]\
    \ = $grid[$i][$j];\n        $minPathSumHelper($i - 1, $j, $path, $sum + $grid[$i][$j]);\n\
    \        $minPathSumHelper($i + 1, $j, $path, $sum + $grid[$i][$j]);\n       \
    \ $minPathSumHelper($i, $j - 1, $path, $sum + $grid[$i][$j]);\n        $minPathSumHelper($i,\
    \ $j + 1, $path, $sum + $grid[$i][$j]);\n        $visited[$i][$j] = false;\n \
    \   };\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)",
  "    // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $", "    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n}", "   \
    \ $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n     \
    \       $path = array();\n            $path[] = $grid[$i][$j];\n            $minPath\
    \ = minPathHelper($grid, $i, $j, $k - 1, $path, $minPath);\n        }\n    }\n\
    \    return $minPath;\n}", "    // Your code here\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n    $minPath[0] =\
    \ $grid[0][0];\n    $minPath[$k - 1] = $grid[$n - 1][$m - 1];\n    $minPath =\
    \ dfs($grid, $visited, $minPath, 0, 0, $k, $n, $m);\n    return $minPath;\n}",
  "    // Your code here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $queue = new\
    \ SplQueue();\n    $queue->enqueue(array(0, 0, $grid[0][0], array($grid[0][0])));\n\
    \    $visited[0][0] = true;\n    $minPath = null;\n    while (!$queue->isEmpty())\
    \ {\n        list($x, $y, $sum, $path) = $queue->dequeue();\n        if (count($path)\
    \ == $k) {\n            if ($minPath === null || $path < $minPath) {\n       \
    \         $minPath = $path;\n            }\n            continue;\n        }\n\
    \        if ($x > 0 && !$visited[$x - 1][$y]) {\n            $visited[$x - 1][$y]\
    \ = true;\n            $queue->enqueue(array($x - 1, $y, $sum + $grid[$x - 1][$y],\
    \ array_merge($path, array($grid[$x - 1][$y]))));\n        }\n        if ($x <\
    \ $n - 1 && !$visited[$x + 1][$y]) {\n            $visited[$x + 1][$y] = true;\n\
    \            $queue->enqueue(array($x + 1, $y, $sum + $grid[$x + 1][$y], array_merge($path,\
    \ array($grid[$x + 1][$y]))));\n        }\n        if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n            $visited[$x][$y - 1] = true;\n            $queue->enqueue(array($x,\
    \ $y - 1, $sum + $grid[$x][$y - 1], array_merge($path, array($grid[$x][$y - 1]))));\n\
    \        }\n        if ($y < $m - 1 && !$visited[$x][$y + 1]) {\n            $visited[$x][$y\
    \ + 1", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $queue = new SplQueue();\n    $queue->enqueue(array(0, 0, 0, array()));\n\
    \    $visited[0][0] = true;\n    $minPath = null;\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $len, $path) = $queue->dequeue();\n        if ($len\
    \ == $k) {\n            if ($minPath == null || $path < $minPath) {\n        \
    \        $minPath = $path;\n            }\n            continue;\n        }\n\
    \        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue->enqueue(array($i - 1, $j, $len + 1, array_merge($path,\
    \ array($grid[$i - 1][$j]))));\n        }\n        if ($i < $n - 1 && !$visited[$i\
    \ + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue(array($i\
    \ + 1, $j, $len + 1, array_merge($path, array($grid[$i + 1][$j]))));\n       \
    \ }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j\
    \ - 1] = true;\n            $queue->enqueue(array($i, $j - 1, $len + 1, array_merge($path,\
    \ array($grid[$i][$j - 1]))));\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $queue->enqueue(array($i,\
    \ $j + 1, $len + 1, array_merge($path, array($grid[$i][$j", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if (dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum)) {\n  \
    \              if ($pathSum < $minPathSum) {\n                    $minPathSum\
    \ = $pathSum;\n                    $minPath = $path;\n                }\n    \
    \        }\n        }\n    }\n    return $minPath;\n}", "    // Your code here\n\
    }", "    // Your code here\n}\n", "    $n = count($grid);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathValue\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue += $grid[$i][$j];\n            if (dfs($grid, $i, $j,\
    \ $k - 1, $path, $pathValue, $visited)) {\n                if ($pathValue < $minPathValue)\
    \ {\n                    $minPath = $path;\n                    $minPathValue\
    \ = $pathValue;\n                }\n            }\n        }\n    }\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n\
    \            $visited = array_fill(0, $n, array_fill(0, $m, false));\n       \
    \     dfs($grid, $i, $j, $k, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $minPath\
    \ = array();\n    $minPath[] = $grid[0][0];\n    $minPathSum = $grid[0][0];\n\
    \    $minPathSum += minPathHelper($grid, $n, $k - 1, $minPath, 0, 0);\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $visited, $i,\
    \ $j, $k - 1, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $queue = new\
    \ SplQueue();\n    $queue->enqueue(new Path(0, 0, $grid[0][0], array($grid[0][0])));\n\
    \    $visited[0][0] = true;\n    $minPath = null;\n    while (!$queue->isEmpty())\
    \ {\n        $path = $queue->dequeue();\n        if ($path->length == $k) {\n\
    \            if ($minPath == null || $path->compareTo($minPath) < 0) {\n     \
    \           $minPath = $path;\n            }\n        } else {\n            $x\
    \ = $path->x;\n            $y = $path->y;\n            if ($x > 0 && !$visited[$x\
    \ - 1][$y]) {\n                $visited[$x - 1][$y] = true;\n                $queue->enqueue($path->add($grid[$x\
    \ - 1][$y], $x - 1, $y));\n            }\n            if ($x < $n - 1 && !$visited[$x\
    \ + 1][$y]) {\n                $visited[$x + 1][$y] = true;\n                $queue->enqueue($path->add($grid[$x\
    \ + 1][$y], $x + 1, $y));\n            }\n            if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n                $visited[$x][$y - 1] = true;\n                $queue->enqueue($path->add($grid[$x][$y\
    \ - 1], $x, $y - 1));\n            }\n            if ($y < $n - 1 && !$visited[$x][$y\
    \ + 1]) {\n                $visited[$x][$y + 1] = true;\n                $queue->enqueue($path->add($grid[$x][$y\
    \ + 1], $x, $y + 1));\n            }\n        }\n    }\n    return $minPath->values;\n\
    }\nclass Path {\n    public $x;", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $visited[$i][$j] = false;\n \
    \           $path = minPathHelper($grid, $k - 1, $i, $j, $visited, $path, $sum);\n\
    \            if ($sum < $minSum) {\n                $minPath = $path;\n      \
    \          $minSum = $sum;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = minPathHelper($grid, $visited, $n, $m, 0, 0, $k, $minPath,\
    \ $minPathSum);\n    return $minPath;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
