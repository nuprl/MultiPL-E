name: HumanEval_62_derivative
language: php
prompt: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] *\
  \ x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n\
  // >>> derivative(array(3, 1, 2, 4, 5))\n// array(1, 4, 12, 20)\n// >>> derivative(array(1,\
  \ 2, 3))\n// array(2, 6)\nfunction derivative($xs) {\n"
tests: "function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
  \ !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $result = array();\n    for ($i = 1; $i < count($xs); $i++) {\n\
    \        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\n", "    $ys\
    \ = array();\n    for ($i = 1; $i < count($xs); $i++) {\n        $ys[] = $i *\
    \ $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys = array();\n    for ($i = 1;\
    \ $i < count($xs); $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n\
    }\n", "    $ys = array();\n    for ($i = 1; $i < count($xs); $i++) {\n       \
    \ $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n}\n", "    $result = array();\n\
    \    $n = count($xs);\n    for ($i = 1; $i < $n; $i++) {\n        $result[] =\
    \ $i * $xs[$i];\n    }\n    return $result;\n}\n", "    $n = count($xs);\n   \
    \ $res = array();\n    for ($i = 1; $i < $n; $i++) {\n        $res[] = $i * $xs[$i];\n\
    \    }\n    return $res;\n}\n", "    $ys = array();\n    $n = count($xs);\n  \
    \  for ($i = 1; $i < $n; $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n    return\
    \ $ys;\n}\n", "    $ys = array();\n    for ($i = 1; $i < count($xs); $i++) {\n\
    \        $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n}\n", "    $n = count($xs);\n\
    \    $ys = array();\n    for ($i = 1; $i < $n; $i++) {\n        $ys[] = $i * $xs[$i];\n\
    \    }\n    return $ys;\n}\n", "    $ys = array();\n    for ($i = 1; $i < count($xs);\
    \ $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys\
    \ = array();\n    for ($i = 1; $i < count($xs); $i++) {\n        $ys[] = $i *\
    \ $xs[$i];\n    }\n    return $ys;\n}\n", "    $n = count($xs);\n    $ys = array();\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n   \
    \ return $ys;\n}\n", "    $ys = array();\n    for ($i = 1; $i < count($xs); $i++)\
    \ {\n        $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys = array();\n\
    \    for ($i = 1; $i < count($xs); $i++) {\n        $ys[] = $i * $xs[$i];\n  \
    \  }\n    return $ys;\n}\n", "    $ys = array();\n    for ($i = 1; $i < count($xs);\
    \ $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys\
    \ = array();\n    for ($i = 1; $i < count($xs); $i++) {\n        $ys[] = $i *\
    \ $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys = array();\n    for ($i = 1;\
    \ $i < count($xs); $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n\
    }\n", "    $ys = array();\n    for ($i = 1; $i < count($xs); $i++) {\n       \
    \ $ys[] = $i * $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys = array();\n \
    \   $n = count($xs);\n    for ($i = 1; $i < $n; $i++) {\n        $ys[] = $i *\
    \ $xs[$i];\n    }\n    return $ys;\n}\n", "    $ys = array();\n    $n = count($xs);\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $ys[] = $i * $xs[$i];\n    }\n   \
    \ return $ys;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
