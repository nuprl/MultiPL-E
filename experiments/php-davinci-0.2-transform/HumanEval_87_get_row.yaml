name: HumanEval_87_get_row
language: php
prompt: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
  \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
  \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
  \ by rows in ascending order.\n// Also, sort coordinates of the row by columns in\
  \ descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6),\
  \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1,\
  \ 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n\
  // >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\n\
  function get_row($lst, $x) {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach\
    \ ($cols as $col => $val) {\n            if ($val == $x) {\n                $result[]\
    \ = [$row, $col];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols\
    \ as $col => $val) {\n            if ($val == $x) {\n                $result[]\
    \ = [$row, $col];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $res = [];\n    foreach ($lst as $row => $row_lst) {\n        foreach ($row_lst\
    \ as $col => $val) {\n            if ($val == $x) {\n                $res[] =\
    \ [$row, $col];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n", "  \
    \  $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols\
    \ as $col => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $col];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as\
    \ $j => $col) {\n            if ($col == $x) {\n                $result[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n",
  "  $result = [];\n  foreach ($lst as $row => $cols) {\n    foreach ($cols as $col\
    \ => $value) {\n      if ($value == $x) {\n        $result[] = [$row, $col];\n\
    \      }\n    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $i => $row) {\n   \
    \     foreach ($row as $j => $col) {\n            if ($col == $x) {\n        \
    \        $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $row_lst) {\n        foreach\
    \ ($row_lst as $col => $value) {\n            if ($value == $x) {\n          \
    \      $result[] = [$row, $col];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
