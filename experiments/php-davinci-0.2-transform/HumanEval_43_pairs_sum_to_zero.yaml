name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n// it\
  \ returns True if there are two distinct elements in the list that\n// sum to zero,\
  \ and False otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n\
  // >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n\
  // >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $n = count($l);\n    if ($n < 2) {\n        return false;\n   \
    \ }\n    $l = array_unique($l);\n    $n = count($l);\n    if ($n < 2) {\n    \
    \    return false;\n    }\n    $l = array_values($l);\n    $i = 0;\n    $j = $n\
    \ - 1;\n    while ($i < $j) {\n        $sum = $l[$i] + $l[$j];\n        if ($sum\
    \ == 0) {\n            return true;\n        }\n        if ($sum < 0) {\n    \
    \        $i++;\n        } else {\n            $j--;\n        }\n    }\n    return\
    \ false;\n}\n", "    $l = array_unique($l);\n    $l = array_values($l);\n    $n\
    \ = count($l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n", "    // your\
    \ code here\n}\n", "  // TODO: implement this function\n  $n = count($l);\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j < $n; $j++) {\n      if\
    \ ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n", "    $count = count($l);\n    if ($count < 2) {\n        return\
    \ false;\n    }\n    $i = 0;\n    while ($i < $count) {\n        $j = $i + 1;\n\
    \        while ($j < $count) {\n            if ($l[$i] + $l[$j] == 0) {\n    \
    \            return true;\n            }\n            $j++;\n        }\n     \
    \   $i++;\n    }\n    return false;\n}\n", "  $count = count($l);\n  if ($count\
    \ < 2) {\n    return false;\n  }\n  for ($i = 0; $i < $count; $i++) {\n    for\
    \ ($j = $i + 1; $j < $count; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n    \
    \    return true;\n      }\n    }\n  }\n  return false;\n}\n", "    $result =\
    \ false;\n    $size = count($l);\n    for ($i = 0; $i < $size; $i++) {\n     \
    \   for ($j = $i + 1; $j < $size; $j++) {\n            if ($l[$i] + $l[$j] ==\
    \ 0) {\n                $result = true;\n            }\n        }\n    }\n   \
    \ return $result;\n}\n", "    // Your code here\n}\n", "    // TODO: implement\
    \ this function\n    $count = 0;\n    $len = count($l);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            if\
    \ ($l[$i] + $l[$j] == 0) {\n                $count++;\n            }\n       \
    \ }\n    }\n    if ($count > 0) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\n", "    // your code here\n    $count = count($l);\n\
    \    $i = 0;\n    $j = 1;\n    while ($i < $count) {\n        while ($j < $count)\
    \ {\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n \
    \           }\n            $j++;\n        }\n        $i++;\n        $j = $i +\
    \ 1;\n    }\n    return false;\n}\n", "    $count = count($l);\n    if ($count\
    \ < 2) {\n        return false;\n    }\n    for ($i = 0; $i < $count; $i++) {\n\
    \        for ($j = $i + 1; $j < $count; $j++) {\n            if ($l[$i] + $l[$j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n", "  $n = count($l);\n  for ($i = 0; $i < $n; $i++) {\n \
    \   for ($j = $i + 1; $j < $n; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n  \
    \      return true;\n      }\n    }\n  }\n  return false;\n}\n", "    if (count($l)\
    \ < 2) {\n        return false;\n    }\n    $l = array_unique($l);\n    foreach\
    \ ($l as $i) {\n        if (in_array(-$i, $l)) {\n            return true;\n \
    \       }\n    }\n    return false;\n}\n", "    // TODO: implement this function\n\
    \    $count = count($l);\n    $i = 0;\n    $j = 0;\n    while ($i < $count) {\n\
    \        $j = $i + 1;\n        while ($j < $count) {\n            if ($l[$i] +\
    \ $l[$j] == 0) {\n                return true;\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n", "    $l = array_unique($l);\n\
    \    $l = array_values($l);\n    $len = count($l);\n    if ($len < 2) {\n    \
    \    return false;\n    }\n    $i = 0;\n    while ($i < $len) {\n        $j =\
    \ $i + 1;\n        while ($j < $len) {\n            if ($l[$i] + $l[$j] == 0)\
    \ {\n                return true;\n            }\n            $j++;\n        }\n\
    \        $i++;\n    }\n    return false;\n}\n", "    // Your code here\n    $count\
    \ = count($l);\n    if ($count < 2) {\n        return false;\n    }\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count; $j++) {\n\
    \            if ($l[$i] + $l[$j] == 0) {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\n", "\t// TODO: implement this\
    \ function\n\t$count = count($l);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tfor\
    \ ($j = $i + 1; $j < $count; $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\
    \treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\t// TODO: implement\
    \ this function\n\t$len = count($l);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\
    for ($j = $i + 1; $j < $len; $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\
    \treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\t// TODO: implement\
    \ me!\n\t$len = count($l);\n\tfor($i = 0; $i < $len; $i++){\n\t\tfor($j = $i+1;\
    \ $j < $len; $j++){\n\t\t\tif($l[$i] + $l[$j] == 0){\n\t\t\t\treturn true;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "    // your code here\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
