name: HumanEval_115_max_fill
language: php
prompt: "<?php\n// You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n// and each 1 in a row represents a single unit of water.\n//\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n// and all buckets have the same capacity.\n// Your task is to use the buckets\
  \ to empty the wells.\n// Output the number of times you need to lower the buckets.\n\
  // Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
  \ 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0,\
  \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>>\
  \ max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n//\
  \ * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length\
  \ <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid,\
  \ $capacity) {\n"
tests: "function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
  \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
  \ 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
  \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
  \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $total;\n}\n",
  "    $count = 0;\n    foreach ($grid as $row) {\n        $count += max_fill_row($row,\
    \ $capacity);\n    }\n    return $count;\n}\n", "    $buckets = 0;\n    $wells\
    \ = count($grid);\n    $units = count($grid[0]);\n    for ($i = 0; $i < $wells;\
    \ $i++) {\n        $buckets += $capacity;\n        for ($j = 0; $j < $units; $j++)\
    \ {\n            if ($grid[$i][$j] === 1) {\n                $buckets--;\n   \
    \         }\n        }\n    }\n    return $buckets;\n}\n", "    $count = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $row_max = array_fill(0,\
    \ $rows, 0);\n    $col_max = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            $row_max[$i]\
    \ = max($row_max[$i], $grid[$i][$j]);\n            $col_max[$j] = max($col_max[$j],\
    \ $grid[$i][$j]);\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n  \
    \      for ($j = 0; $j < $cols; $j++) {\n            $count += min($row_max[$i],\
    \ $col_max[$j]) - $grid[$i][$j];\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] > $max) {\n                $max = $grid[$i][$j];\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n     \
    \   for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] < $max) {\n\
    \                $grid[$i][$j] = $max;\n                $count++;\n          \
    \  }\n        }\n    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_well($grid, $capacity, $i, $j);\n       \
    \     }\n        }\n    }\n    return $max_fill;\n}\n", "    $max_fill = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i\
    \ < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                if ($i > 0 && $grid[$i - 1][$j] == 1) {\n            \
    \        $max_fill += $capacity;\n                    $grid[$i - 1][$j] = 0;\n\
    \                }\n                if ($j > 0 && $grid[$i][$j - 1] == 1) {\n\
    \                    $max_fill += $capacity;\n                    $grid[$i][$j\
    \ - 1] = 0;\n                }\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $wells = count($grid);\n    $length = count($grid[0]);\n\
    \    $buckets = array_fill(0, $wells, $capacity);\n    $filled = array_fill(0,\
    \ $wells, 0);\n    while (true) {\n        $filled = array_fill(0, $wells, 0);\n\
    \        for ($i = 0; $i < $wells; $i++) {\n            for ($j = 0; $j < $length;\
    \ $j++) {\n                if ($grid[$i][$j] == 1 && $buckets[$i] > 0) {\n   \
    \                 $buckets[$i]--;\n                    $filled[$i]++;\n      \
    \          }\n            }\n        }\n        if (max($filled) == 0) {\n   \
    \         break;\n        }\n        $count++;\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_index = 0;\n    $col_index = 0;\n    while ($row_index < $row_count)\
    \ {\n        $col_index = 0;\n        while ($col_index < $col_count) {\n    \
    \        if ($grid[$row_index][$col_index] == 1) {\n                $count++;\n\
    \                $grid[$row_index][$col_index] = 0;\n                $row_index_temp\
    \ = $row_index;\n                $col_index_temp = $col_index;\n             \
    \   while ($capacity > 0) {\n                    $row_index_temp++;\n        \
    \            $col_index_temp++;\n                    if ($row_index_temp < $row_count\
    \ && $col_index_temp < $col_count) {\n                        if ($grid[$row_index_temp][$col_index_temp]\
    \ == 1) {\n                            $grid[$row_index_temp][$col_index_temp]\
    \ = 0;\n                            $capacity--;\n                        }\n\
    \                    } else {\n                        break;\n              \
    \      }\n                }\n            }\n            $col_index++;\n      \
    \  }\n        $row_index++;\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . PHP_EOL;", "    $max_fill = 0;\n   \
    \ $row_count = count($grid);\n    $col_count = count($grid[0]);\n    $row_fill\
    \ = array_fill(0, $row_count, 0);\n    $col_fill = array_fill(0, $col_count, 0);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $row_fill[$i]++;\n\
    \                $col_fill[$j]++;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $row_count; $i++) {\n        $max_fill += max(0, $row_fill[$i] - $capacity);\n\
    \    }\n    for ($j = 0; $j < $col_count; $j++) {\n        $max_fill += max(0,\
    \ $col_fill[$j] - $capacity);\n    }\n    return $max_fill;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . \"\\n\";", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        $row = $grid[$i];\n        $sum = 0;\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            $sum += $row[$j];\n        }\n        $count\
    \ += $sum;\n        if ($sum > 0) {\n            $count += $sum - 1;\n       \
    \ }\n    }\n    for ($j = 0; $j < $cols; $j++) {\n        $sum = 0;\n        for\
    \ ($i = 0; $i < $rows; $i++) {\n            $sum += $grid[$i][$j];\n        }\n\
    \        $count += $sum;\n        if ($sum > 0) {\n            $count += $sum\
    \ - 1;\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n  \
    \  $col_index = 0;\n    while ($row_index < $row_count) {\n        $col_index\
    \ = 0;\n        while ($col_index < $col_count) {\n            if ($grid[$row_index][$col_index]\
    \ == 1) {\n                $count++;\n                $grid[$row_index][$col_index]\
    \ = 0;\n                $col_index++;\n                $capacity--;\n        \
    \        if ($capacity == 0) {\n                    $capacity = $col_count;\n\
    \                    $row_index++;\n                }\n            } else {\n\
    \                $col_index++;\n            }\n        }\n        $row_index++;\n\
    \    }\n    return $count;\n}\n", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $total += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $i, $j, $capacity);\n            }\n  \
    \      }\n    }\n    return $total;\n}\n", "    $count = 0;\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n    $col_index\
    \ = 0;\n    while ($row_index < $row_count) {\n        $col_index = 0;\n     \
    \   while ($col_index < $col_count) {\n            if ($grid[$row_index][$col_index]\
    \ == 1) {\n                $count++;\n                $grid[$row_index][$col_index]\
    \ = 0;\n                $row_index++;\n                $col_index++;\n       \
    \         break;\n            }\n            $col_index++;\n        }\n      \
    \  $row_index++;\n    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    $grid_width_range =\
    \ range(0, $grid_width - 1);\n    $grid_length_range = range(0, $grid_length -\
    \ 1);\n    $grid_width_range_reversed = array_reverse($grid_width_range);\n  \
    \  $grid_length_range_reversed = array_reverse($grid_length_range);\n    $grid_width_range_reversed_length\
    \ = count($grid_width_range_reversed);\n    $grid_length_range_reversed_length\
    \ = count($grid_length_range_reversed);\n    $grid_width_range_reversed_length_minus_one\
    \ = $grid_width_range_reversed_length - 1;\n    $grid_length_range_reversed_length_minus_one\
    \ = $grid_length_range_reversed_length - 1;\n    $grid_width_range_length = count($grid_width_range);\n\
    \    $grid_length_range_length = count($grid_length_range);\n    $grid_width_range_length_minus_one\
    \ = $grid_width_range_length - 1;\n    $grid_length_range_length_minus_one = $grid_length_range_length\
    \ - 1;\n    $grid_width_range_length_minus_two = $grid_width_range_length - 2;\n\
    \    $grid_length_range_length_minus_two = $grid_length_range_length - 2;\n  \
    \  $grid_width_range_length_minus_three = $grid_width_range_length - 3;\n    $grid_length_range_length_minus_three\
    \ = $grid_length_range_length - 3;\n    $grid_width_range_length_minus_four =\
    \ $grid_width_range_length - 4;\n    $grid_length_range_length_minus_four = $grid_length_range_length\
    \ - 4;\n    $grid_width_range_length_minus_five = $grid_width_range_length - 5",
  "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max = max($max, $j);\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $row; $i++) {\n      \
    \  for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n  \
    \              $count += $capacity - $j;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    $max = 0;\n    for ($i = 0; $i < $rows; $i++) {\n      \
    \  for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] === 1) {\n\
    \                $count++;\n            }\n        }\n        $max = max($max,\
    \ $count);\n        $count = 0;\n    }\n    return $max * $capacity;\n}\n", " \
    \   $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $buckets\
    \ = array_fill(0, $rows, $capacity);\n    $filled = array_fill(0, $rows, 0);\n\
    \    $empty = array_fill(0, $rows, 0);\n    $empty_cols = array_fill(0, $cols,\
    \ 0);\n    $filled_cols = array_fill(0, $cols, 0);\n    $empty_rows = array_fill(0,\
    \ $rows, 0);\n    $filled_rows = array_fill(0, $rows, 0);\n    $empty_rows_cols\
    \ = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $filled_rows_cols = array_fill(0,\
    \ $rows, array_fill(0, $cols, 0));\n    for ($i = 0; $i < $rows; $i++) {\n   \
    \     for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $filled[$i]++;\n                $filled_cols[$j]++;\n       \
    \         $filled_rows_cols[$i][$j] = 1;\n            } else {\n             \
    \   $empty[$i]++;\n                $empty_cols[$j]++;\n                $empty_rows_cols[$i][$j]\
    \ = 1;\n            }\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n\
    \        if ($filled[$i] == $cols) {\n            $empty_rows[$i] = 1;\n     \
    \   }\n    }\n    for ($i = 0; $i < $cols; $i++) {\n        if ($filled_cols[$i]\
    \ == $rows) {\n            $empty_cols[$i] = 1;\n        }\n    }\n    while (true)\
    \ {\n        $empty_rows_cols_copy = $empty_rows_cols;\n        $empty_rows_copy\
    \ = $empty_rows;", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $wells[$i] =\
    \ 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $wells[$i] += $grid[$i][$j];\n\
    \        }\n    }\n    while (true) {\n        $max_well = max($wells);\n    \
    \    if ($max_well == 0) {\n            break;\n        }\n        $count++;\n\
    \        for ($i = 0; $i < $rows; $i++) {\n            if ($wells[$i] == $max_well)\
    \ {\n                $wells[$i] -= $capacity;\n            }\n        }\n    }\n\
    \    return $count;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
