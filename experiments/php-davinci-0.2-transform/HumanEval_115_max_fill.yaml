name: HumanEval_115_max_fill
language: php
prompt: "<?php\n// You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n// and each 1 in a row represents a single unit of water.\n//\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n// and all buckets have the same capacity.\n// Your task is to use the buckets\
  \ to empty the wells.\n// Output the number of times you need to lower the buckets.\n\
  // Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
  \ 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0,\
  \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>>\
  \ max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n//\
  \ * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length\
  \ <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid,\
  \ $capacity) {\n"
tests: "function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
  \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
  \ 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
  \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
  \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $total;\n}\n",
  "    $count = 0;\n    foreach ($grid as $row) {\n        $count += max_fill_row($row,\
    \ $capacity);\n    }\n    return $count;\n}\n", "    $buckets = 0;\n    $wells\
    \ = count($grid);\n    $units = count($grid[0]);\n    for ($i = 0; $i < $wells;\
    \ $i++) {\n        $buckets += $capacity;\n        for ($j = 0; $j < $units; $j++)\
    \ {\n            if ($grid[$i][$j] === 1) {\n                $buckets--;\n   \
    \         }\n        }\n    }\n    return $buckets;\n}\n", "    $count = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $row_max = array_fill(0,\
    \ $rows, 0);\n    $col_max = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            $row_max[$i]\
    \ = max($row_max[$i], $grid[$i][$j]);\n            $col_max[$j] = max($col_max[$j],\
    \ $grid[$i][$j]);\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n  \
    \      for ($j = 0; $j < $cols; $j++) {\n            $count += min($row_max[$i],\
    \ $col_max[$j]) - $grid[$i][$j];\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] > $max) {\n                $max = $grid[$i][$j];\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n     \
    \   for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] < $max) {\n\
    \                $grid[$i][$j] = $max;\n                $count++;\n          \
    \  }\n        }\n    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_well($grid, $capacity, $i, $j);\n       \
    \     }\n        }\n    }\n    return $max_fill;\n}\n", "    $max_fill = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i\
    \ < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                if ($i > 0 && $grid[$i - 1][$j] == 1) {\n            \
    \        $max_fill += $capacity;\n                    $grid[$i - 1][$j] = 0;\n\
    \                }\n                if ($j > 0 && $grid[$i][$j - 1] == 1) {\n\
    \                    $max_fill += $capacity;\n                    $grid[$i][$j\
    \ - 1] = 0;\n                }\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $wells = count($grid);\n    $length = count($grid[0]);\n\
    \    $buckets = array_fill(0, $wells, $capacity);\n    $filled = array_fill(0,\
    \ $wells, 0);\n    while (true) {\n        $filled = array_fill(0, $wells, 0);\n\
    \        for ($i = 0; $i < $wells; $i++) {\n            for ($j = 0; $j < $length;\
    \ $j++) {\n                if ($grid[$i][$j] == 1 && $buckets[$i] > 0) {\n   \
    \                 $buckets[$i]--;\n                    $filled[$i]++;\n      \
    \          }\n            }\n        }\n        if (max($filled) == 0) {\n   \
    \         break;\n        }\n        $count++;\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_index = 0;\n    $col_index = 0;\n    while ($row_index < $row_count)\
    \ {\n        $col_index = 0;\n        while ($col_index < $col_count) {\n    \
    \        if ($grid[$row_index][$col_index] == 1) {\n                $count++;\n\
    \                $grid[$row_index][$col_index] = 0;\n                $row_index_temp\
    \ = $row_index;\n                $col_index_temp = $col_index;\n             \
    \   while ($capacity > 0) {\n                    $row_index_temp++;\n        \
    \            $col_index_temp++;\n                    if ($row_index_temp < $row_count\
    \ && $col_index_temp < $col_count) {\n                        if ($grid[$row_index_temp][$col_index_temp]\
    \ == 1) {\n                            $grid[$row_index_temp][$col_index_temp]\
    \ = 0;\n                            $capacity--;\n                        }\n\
    \                    } else {\n                        break;\n              \
    \      }\n                }\n            }\n            $col_index++;\n      \
    \  }\n        $row_index++;\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . PHP_EOL;", "    $max_fill = 0;\n   \
    \ $row_count = count($grid);\n    $col_count = count($grid[0]);\n    $row_fill\
    \ = array_fill(0, $row_count, 0);\n    $col_fill = array_fill(0, $col_count, 0);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $row_fill[$i]++;\n\
    \                $col_fill[$j]++;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $row_count; $i++) {\n        $max_fill += max(0, $row_fill[$i] - $capacity);\n\
    \    }\n    for ($j = 0; $j < $col_count; $j++) {\n        $max_fill += max(0,\
    \ $col_fill[$j] - $capacity);\n    }\n    return $max_fill;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . \"\\n\";", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        $row = $grid[$i];\n        $sum = 0;\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            $sum += $row[$j];\n        }\n        $count\
    \ += $sum;\n        if ($sum > 0) {\n            $count += $sum - 1;\n       \
    \ }\n    }\n    for ($j = 0; $j < $cols; $j++) {\n        $sum = 0;\n        for\
    \ ($i = 0; $i < $rows; $i++) {\n            $sum += $grid[$i][$j];\n        }\n\
    \        $count += $sum;\n        if ($sum > 0) {\n            $count += $sum\
    \ - 1;\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n  \
    \  $col_index = 0;\n    while ($row_index < $row_count) {\n        $col_index\
    \ = 0;\n        while ($col_index < $col_count) {\n            if ($grid[$row_index][$col_index]\
    \ == 1) {\n                $count++;\n                $grid[$row_index][$col_index]\
    \ = 0;\n                $col_index++;\n                $capacity--;\n        \
    \        if ($capacity == 0) {\n                    $capacity = $col_count;\n\
    \                    $row_index++;\n                }\n            } else {\n\
    \                $col_index++;\n            }\n        }\n        $row_index++;\n\
    \    }\n    return $count;\n}\n", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $total += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $i, $j, $capacity);\n            }\n  \
    \      }\n    }\n    return $total;\n}\n", "    $count = 0;\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n    $col_index\
    \ = 0;\n    while ($row_index < $row_count) {\n        $col_index = 0;\n     \
    \   while ($col_index < $col_count) {\n            if ($grid[$row_index][$col_index]\
    \ == 1) {\n                $count++;\n                $grid[$row_index][$col_index]\
    \ = 0;\n                $row_index++;\n                $col_index++;\n       \
    \         break;\n            }\n            $col_index++;\n        }\n      \
    \  $row_index++;\n    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    $grid_width_range =\
    \ range(0, $grid_width - 1);\n    $grid_length_range = range(0, $grid_length -\
    \ 1);\n    $grid_width_range_reversed = array_reverse($grid_width_range);\n  \
    \  $grid_length_range_reversed = array_reverse($grid_length_range);\n    $grid_width_range_reversed_length\
    \ = count($grid_width_range_reversed);\n    $grid_length_range_reversed_length\
    \ = count($grid_length_range_reversed);\n    $grid_width_range_reversed_length_minus_one\
    \ = $grid_width_range_reversed_length - 1;\n    $grid_length_range_reversed_length_minus_one\
    \ = $grid_length_range_reversed_length - 1;\n    $grid_width_range_length = count($grid_width_range);\n\
    \    $grid_length_range_length = count($grid_length_range);\n    $grid_width_range_length_minus_one\
    \ = $grid_width_range_length - 1;\n    $grid_length_range_length_minus_one = $grid_length_range_length\
    \ - 1;\n    $grid_width_range_length_minus_two = $grid_width_range_length - 2;\n\
    \    $grid_length_range_length_minus_two = $grid_length_range_length - 2;\n  \
    \  $grid_width_range_length_minus_three = $grid_width_range_length - 3;\n    $grid_length_range_length_minus_three\
    \ = $grid_length_range_length - 3;\n    $grid_width_range_length_minus_four =\
    \ $grid_width_range_length - 4;\n    $grid_length_range_length_minus_four = $grid_length_range_length\
    \ - 4;\n    $grid_width_range_length_minus_five = $grid_width_range_length - 5",
  "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max = max($max, $j);\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $row; $i++) {\n      \
    \  for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n  \
    \              $count += $capacity - $j;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    $max = 0;\n    for ($i = 0; $i < $rows; $i++) {\n      \
    \  for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] === 1) {\n\
    \                $count++;\n            }\n        }\n        $max = max($max,\
    \ $count);\n        $count = 0;\n    }\n    return $max * $capacity;\n}\n", " \
    \   $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $buckets\
    \ = array_fill(0, $rows, $capacity);\n    $filled = array_fill(0, $rows, 0);\n\
    \    $empty = array_fill(0, $rows, 0);\n    $empty_cols = array_fill(0, $cols,\
    \ 0);\n    $filled_cols = array_fill(0, $cols, 0);\n    $empty_rows = array_fill(0,\
    \ $rows, 0);\n    $filled_rows = array_fill(0, $rows, 0);\n    $empty_rows_cols\
    \ = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $filled_rows_cols = array_fill(0,\
    \ $rows, array_fill(0, $cols, 0));\n    for ($i = 0; $i < $rows; $i++) {\n   \
    \     for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $filled[$i]++;\n                $filled_cols[$j]++;\n       \
    \         $filled_rows_cols[$i][$j] = 1;\n            } else {\n             \
    \   $empty[$i]++;\n                $empty_cols[$j]++;\n                $empty_rows_cols[$i][$j]\
    \ = 1;\n            }\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n\
    \        if ($filled[$i] == $cols) {\n            $empty_rows[$i] = 1;\n     \
    \   }\n    }\n    for ($i = 0; $i < $cols; $i++) {\n        if ($filled_cols[$i]\
    \ == $rows) {\n            $empty_cols[$i] = 1;\n        }\n    }\n    while (true)\
    \ {\n        $empty_rows_cols_copy = $empty_rows_cols;\n        $empty_rows_copy\
    \ = $empty_rows;", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $wells[$i] =\
    \ 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $wells[$i] += $grid[$i][$j];\n\
    \        }\n    }\n    while (true) {\n        $max_well = max($wells);\n    \
    \    if ($max_well == 0) {\n            break;\n        }\n        $count++;\n\
    \        for ($i = 0; $i < $rows; $i++) {\n            if ($wells[$i] == $max_well)\
    \ {\n                $wells[$i] -= $capacity;\n            }\n        }\n    }\n\
    \    return $count;\n}\n", "    $count = 0;\n    foreach ($grid as $row) {\n \
    \       $count += max_fill_row($row, $capacity);\n    }\n    return $count;\n\
    }\n", "    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    $num_fills\
    \ = 0;\n    $bucket = $capacity;\n    for ($i = 0; $i < $num_rows; $i++) {\n \
    \       for ($j = 0; $j < $num_cols; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                if ($bucket > 0) {\n                    $bucket--;\n \
    \               } else {\n                    $num_fills++;\n                \
    \    $bucket = $capacity - 1;\n                }\n            }\n        }\n \
    \   }\n    return $num_fills;\n}\n", "    $count = 0;\n    $grid = array_map(function($row)\
    \ use ($capacity) {\n        return array_map(function($cell) use ($capacity)\
    \ {\n            return $cell * $capacity;\n        }, $row);\n    }, $grid);\n\
    \    while (true) {\n        $grid = array_map(function($row) use ($capacity)\
    \ {\n            return array_map(function($cell) use ($capacity) {\n        \
    \        return $cell - $capacity;\n            }, $row);\n        }, $grid);\n\
    \        $grid = array_map(function($row) use ($capacity) {\n            return\
    \ array_map(function($cell) use ($capacity) {\n                return $cell <\
    \ 0 ? 0 : $cell;\n            }, $row);\n        }, $grid);\n        $grid = array_map(function($row)\
    \ use ($capacity) {\n            return array_map(function($cell) use ($capacity)\
    \ {\n                return $cell > 0 ? 1 : $cell;\n            }, $row);\n  \
    \      }, $grid);\n        $count += $capacity;\n        if (array_sum(array_map('array_sum',\
    \ $grid)) == 0) {\n            break;\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $max = 0;\n    $max_index = 0;\n    $min = 0;\n  \
    \  $min_index = 0;\n    $max_row = 0;\n    $min_row = 0;\n    $max_row_index =\
    \ 0;\n    $min_row_index = 0;\n    $max_row_count = 0;\n    $min_row_count = 0;\n\
    \    $max_row_sum = 0;\n    $min_row_sum = 0;\n    $max_row_max = 0;\n    $min_row_max\
    \ = 0;\n    $max_row_max_index = 0;\n    $min_row_max_index = 0;\n    $max_row_min\
    \ = 0;\n    $min_row_min = 0;\n    $max_row_min_index = 0;\n    $min_row_min_index\
    \ = 0;\n    $max_row_min_count = 0;\n    $min_row_min_count = 0;\n    $max_row_min_sum\
    \ = 0;\n    $min_row_min_sum = 0;\n    $max_row_max_count = 0;\n    $min_row_max_count\
    \ = 0;\n    $max_row_max_sum = 0;\n    $min_row_max_sum = 0;\n    $max_row_min_max\
    \ = 0;\n    $min_row_min_max = 0;\n    $max_row_min_max_index = 0;\n    $min_row_min_max_index\
    \ = 0;\n    $max_row_max_min = 0;\n    $min_row_max_min = 0;\n    $max_row_max_min_index\
    \ = 0;\n    $min_row_max_min_index = 0;\n    $max_row_min_min = 0;\n    $min_row_min_min\
    \ = 0;\n    $max_row_min_min_index = 0;\n    $min_row_min_min_index = 0;\n   \
    \ $max_row_max_max = 0;\n    $min_row_max", "    // your code here\n}\n", "  \
    \  $max_fill = 0;\n    $grid_size = count($grid);\n    $well_size = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_size; $i++) {\n        for ($j = 0; $j < $well_size;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n                $grid[$i][$j] = 0;\n                $grid[$i][$j\
    \ + 1] = 0;\n            }\n        }\n    }\n    return $max_fill;\n}\n", " \
    \   $max_fill = 0;\n    $grid_length = count($grid);\n    for ($i = 0; $i < $grid_length;\
    \ $i++) {\n        $row_length = count($grid[$i]);\n        for ($j = 0; $j <\
    \ $row_length; $j++) {\n            if ($grid[$i][$j] == 1) {\n              \
    \  $max_fill += $capacity;\n                $grid[$i][$j] = 0;\n            }\n\
    \        }\n    }\n    return $max_fill;\n}\n", "    $times = 0;\n    $rows =\
    \ count($grid);\n    $cols = count($grid[0]);\n    $buckets = array_fill(0, $rows,\
    \ 0);\n    $col = 0;\n    while ($col < $cols) {\n        $row = 0;\n        while\
    \ ($row < $rows) {\n            if ($grid[$row][$col] == 1) {\n              \
    \  $buckets[$row]++;\n                if ($buckets[$row] > $capacity) {\n    \
    \                return -1;\n                }\n            }\n            $row++;\n\
    \        }\n        $col++;\n        $times++;\n    }\n    return $times;\n}\n",
  "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_fill = 0;\n \
    \   for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $grid_length = count($grid);\n    for ($i = 0; $i\
    \ < $grid_length; $i++) {\n        $row_length = count($grid[$i]);\n        for\
    \ ($j = 0; $j < $row_length; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $count += $capacity;\n                $grid[$i][$j] = 0;\n  \
    \          }\n        }\n    }\n    return $count;\n}\n", "    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_fill = 0;\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                if ($i > 0 && $grid[$i - 1][$j] === 1) {\n           \
    \         $max_fill -= $capacity;\n                    $grid[$i - 1][$j] = 0;\n\
    \                }\n                if ($j > 0 && $grid[$i][$j - 1] === 1) {\n\
    \                    $max_fill -= $capacity;\n                    $grid[$i][$j\
    \ - 1] = 0;\n                }\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $total = 0;\n\
    \    $buckets = array_fill(0, $rows, 0);\n    $max = 0;\n    for ($i = 0; $i <\
    \ $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            $total\
    \ += $grid[$i][$j];\n            $buckets[$i] += $grid[$i][$j];\n            $max\
    \ = max($max, $buckets[$i]);\n        }\n    }\n    $max = min($max, $capacity);\n\
    \    $min = 0;\n    while ($min < $max) {\n        $mid = floor(($min + $max)\
    \ / 2);\n        $used = 0;\n        for ($i = 0; $i < $rows; $i++) {\n      \
    \      $used += min($buckets[$i], $mid);\n        }\n        if ($used >= $total)\
    \ {\n            $max = $mid;\n        } else {\n            $min = $mid + 1;\n\
    \        }\n    }\n    return $min;\n}\n", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_row = 0;\n    $max_col = 0;\n    for ($i\
    \ = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n       \
    \     if ($grid[$i][$j] == 1) {\n                $max_row = max($max_row, $i);\n\
    \                $max_col = max($max_col, $j);\n            }\n        }\n   \
    \ }\n    for ($i = 0; $i <= $max_row; $i++) {\n        for ($j = 0; $j <= $max_col;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \            }\n        }\n    }\n    return $count;\n}\n", "    $fill = 0;\n\
    \    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    $row_fill\
    \ = array_fill(0, $row_count, 0);\n    $col_fill = array_fill(0, $col_count, 0);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $row_fill[$i]++;\n\
    \                $col_fill[$j]++;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $row_count; $i++) {\n        $fill += $row_fill[$i] / $capacity;\n\
    \        if ($row_fill[$i] % $capacity != 0) {\n            $fill++;\n       \
    \ }\n    }\n    for ($i = 0; $i < $col_count; $i++) {\n        $fill += $col_fill[$i]\
    \ / $capacity;\n        if ($col_fill[$i] % $capacity != 0) {\n            $fill++;\n\
    \        }\n    }\n    return $fill;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity)\
    \ . \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity) . \"\\n\";", "    $max_fill = 0;\n    $max_fill_count\
    \ = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_length; $i++) {\n        $fill = 0;\n        for\
    \ ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $fill++;\n            }\n        }\n        if ($fill > $max_fill)\
    \ {\n            $max_fill = $fill;\n            $max_fill_count = 1;\n      \
    \  } else if ($fill == $max_fill) {\n            $max_fill_count++;\n        }\n\
    \    }\n    return $max_fill * $max_fill_count * $capacity;\n}\n", "    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    $max_fill = 0;\n    for ($i\
    \ = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n       \
    \     if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n   \
    \             $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                for ($k = $i + 1; $k < $rows;\
    \ $k++) {\n                    if ($grid[$k][$j] == 1) {\n                   \
    \     $grid[$k][$j] = 0;\n                        $count += $capacity;\n     \
    \               } else {\n                        break;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n\
    \        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $max_row = max($max_row, $i);\n                $max_col =\
    \ max($max_col, $j);\n            }\n        }\n    }\n    for ($i = 0; $i <=\
    \ $max_row; $i++) {\n        for ($j = 0; $j <= $max_col; $j++) {\n          \
    \  if ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n           \
    \     $count++;\n                $capacity--;\n                if ($capacity ==\
    \ 0) {\n                    $count++;\n                    $capacity = $capacity\
    \ + $cols;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(array(0, 0,\
    \ 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity) . \"\\\
    n\";", "    $row_count = count($grid);\n    $col_count = count($grid[0]);\n  \
    \  $max_fill = 0;\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] == 1) {\n     \
    \           $max_fill += $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\n", "    $height = count($grid);\n    $width = count($grid[0]);\n\
    \    $max_fill = 0;\n    for ($i = 0; $i < $height; $i++) {\n        for ($j =\
    \ 0; $j < $width; $j++) {\n            if ($grid[$i][$j] == 1) {\n           \
    \     $max_fill += $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    // Your code here\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $total = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $total\
    \ += $capacity;\n            }\n        }\n    }\n    return $total;\n}\n", " \
    \   $max_fill = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill_grid($grid,\
    \ $capacity, $i, $j);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_fill\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill_grid($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $wells = count($grid);\n    $well_length = count($grid[0]);\n\
    \    for ($i = 0; $i < $wells; $i++) {\n        for ($j = 0; $j < $well_length;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $capacity--;\n          \
    \      if ($capacity == 0) {\n                    $count += max_fill($grid, $capacity);\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    $grid = array(\n    array(0, 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1,\
    \ 1, 1)\n);\n$capacity = 1;\necho max_fill($grid, $capacity);\n\n$grid = array(\n\
    \    array(0, 0, 1, 1),\n    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0,\
    \ 1, 1, 1)\n);\n$capacity = 2;\necho max_fill($grid, $capacity);\n\n$grid = array(\n\
    \    array(0, 0, 0),\n    array(0, 0, 0)\n);\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $max = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count++;\n          \
    \  }\n        }\n        $max = max($max, $count);\n        $count = 0;\n    }\n\
    \    return $max * $capacity;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity) . PHP_EOL;", "    $result = 0;\n    $max_height\
    \ = 0;\n    foreach ($grid as $row) {\n        $max_height = max($max_height,\
    \ max($row));\n    }\n    for ($i = 0; $i < $max_height; $i++) {\n        $result\
    \ += max_fill_row($grid, $capacity);\n    }\n    return $result;\n}\n", "    $count\
    \ = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0;\
    \ $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $count++;\n                $grid[$i][$j]\
    \ = 0;\n                $capacity--;\n                if ($capacity == 0) {\n\
    \                    return $count;\n                }\n                $i--;\n\
    \                $j--;\n            }\n        }\n    }\n    return $count;\n\
    }\n\n$grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n];\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n\n$grid = [\n    [0, 0, 1,\
    \ 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n];\n$capacity =\
    \ 2;\necho max_fill($grid, $capacity) . PHP_EOL;\n\n$grid = [\n    [0, 0, 0],\n\
    \    [0, 0, 0]\n];\n$capacity = 5;\necho max_fill($grid, $capacity) . PHP_EOL;",
  "    $count = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $grid_length; $i++) {\n        for ($j\
    \ = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j] === 1) {\n   \
    \             $wells[] = [$i, $j];\n            }\n        }\n    }\n    $wells_count\
    \ = count($wells);\n    $buckets = array_fill(0, $wells_count, $capacity);\n \
    \   while (true) {\n        $buckets_count = count($buckets);\n        for ($i\
    \ = 0; $i < $buckets_count; $i++) {\n            if ($buckets[$i] === 0) {\n \
    \               unset($buckets[$i]);\n                unset($wells[$i]);\n   \
    \         }\n        }\n        if (empty($buckets)) {\n            break;\n \
    \       }\n        $buckets = array_values($buckets);\n        $wells = array_values($wells);\n\
    \        $buckets_count = count($buckets);\n        for ($i = 0; $i < $buckets_count;\
    \ $i++) {\n            $buckets[$i]--;\n            $grid[$wells[$i][0]][$wells[$i][1]]\
    \ = 0;\n        }\n        $count++;\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $grid = array_map(function($row)\
    \ use ($col) {\n        return array_pad($row, $col, 0);\n    }, $grid);\n   \
    \ $row_max = array_fill(0, $row, 0);\n    $col_max = array_fill(0, $col, 0);\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n            $col_max[$j]\
    \ = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n    for ($i = 0; $i <\
    \ $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            $count +=\
    \ min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n        }\n    }\n    return\
    \ $count;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n  \
    \  $count = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $capacity--;\n          \
    \      if ($capacity <= 0) {\n                    return $count;\n           \
    \     }\n                $grid = fill($grid, $i, $j, $capacity);\n           \
    \     $capacity = $capacity - count($grid[$i]);\n                if ($capacity\
    \ <= 0) {\n                    return $count;\n                }\n           \
    \ }\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n  \
    \  $col_index = 0;\n    $row_max = 0;\n    $col_max = 0;\n    $row_sum = 0;\n\
    \    $col_sum = 0;\n    $row_max_index = 0;\n    $col_max_index = 0;\n    $row_max_sum\
    \ = 0;\n    $col_max_sum = 0;\n    $row_max_sum_index = 0;\n    $col_max_sum_index\
    \ = 0;\n    $row_max_sum_index_prev = 0;\n    $col_max_sum_index_prev = 0;\n \
    \   $row_max_sum_prev = 0;\n    $col_max_sum_prev = 0;\n    $row_max_index_prev\
    \ = 0;\n    $col_max_index_prev = 0;\n    $row_max_prev = 0;\n    $col_max_prev\
    \ = 0;\n    $row_sum_prev = 0;\n    $col_sum_prev = 0;\n    $row_index_prev =\
    \ 0;\n    $col_index_prev = 0;\n    $row_index_prev_prev = 0;\n    $col_index_prev_prev\
    \ = 0;\n    $row_sum_prev_prev = 0;\n    $col_sum_prev_prev = 0;\n    $row_max_prev_prev\
    \ = 0;\n    $col_max_prev_prev = 0;\n    $row_max_index_prev_prev = 0;\n    $col_max_index_prev_prev\
    \ = 0;\n    $row_max_sum_prev_prev = 0;\n    $col_max_sum_prev_prev = 0;\n   \
    \ $row_max_sum_index_prev_prev = 0;\n    $col_max_sum_index_prev_prev = 0;\n \
    \   $row_max_sum_index_prev_prev_prev = 0;\n    $col_max_sum_index_prev_prev_prev\
    \ = 0", "    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        $row = $grid[$i];\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($row[$j] == 1) {\n           \
    \     $total += $capacity;\n            }\n        }\n    }\n    return $total;\n\
    }\n", "    $wells = count($grid);\n    $units = count($grid[0]);\n    $buckets\
    \ = array_fill(0, $wells, 0);\n    $count = 0;\n    while (true) {\n        $empty\
    \ = true;\n        for ($i = 0; $i < $wells; $i++) {\n            if ($buckets[$i]\
    \ < $capacity) {\n                $empty = false;\n                $buckets[$i]++;\n\
    \                $count++;\n            }\n        }\n        if ($empty) {\n\
    \            break;\n        }\n    }\n    return $count;\n}\n", "    $rows =\
    \ count($grid);\n    $cols = count($grid[0]);\n    $total = 0;\n    for ($i =\
    \ 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n         \
    \   if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n        \
    \    }\n        }\n    }\n    return $total;\n}\n", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    $max_col = 0;\n    for ($i\
    \ = 0; $i < $rows; $i++) {\n        $max_col = 0;\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] === 1) {\n                $max_col =\
    \ $j;\n            }\n        }\n        $count += $max_col;\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $row = 0;\n    $col = 0;\n    while ($row < $rows) {\n        if ($grid[$row][$col]\
    \ == 1) {\n            $count += 1;\n            $grid[$row][$col] = 0;\n    \
    \        $capacity -= 1;\n        }\n        if ($capacity == 0) {\n         \
    \   $capacity = $cols;\n            $count += 1;\n        }\n        $col += 1;\n\
    \        if ($col == $cols) {\n            $col = 0;\n            $row += 1;\n\
    \        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $grid[$i][$j] = 0;\n                $count++;\n   \
    \             $queue = [[$i, $j]];\n                while (count($queue) > 0)\
    \ {\n                    $current = array_shift($queue);\n                   \
    \ $row = $current[0];\n                    $col = $current[1];\n             \
    \       if ($row > 0 && $grid[$row - 1][$col] == 1) {\n                      \
    \  $grid[$row - 1][$col] = 0;\n                        $queue[] = [$row - 1, $col];\n\
    \                    }\n                    if ($row < $row_count - 1 && $grid[$row\
    \ + 1][$col] == 1) {\n                        $grid[$row + 1][$col] = 0;\n   \
    \                     $queue[] = [$row + 1, $col];\n                    }\n  \
    \                  if ($col > 0 && $grid[$row][$col - 1] == 1) {\n           \
    \             $grid[$row][$col - 1] = 0;\n                        $queue[] = [$row,\
    \ $col - 1];\n                    }\n                    if ($col < $col_count\
    \ - 1 && $grid[$row][$col + 1] == 1) {\n                        $grid[$row][$col\
    \ + 1] = 0;\n                        $queue[] = [$row, $col + 1];\n          \
    \          }\n                }\n            }\n        }\n    }\n    return $count\
    \ * $capacity;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    $max = 0;\n    for ($i = 0; $i < $rows; $i++) {\n      \
    \  for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n \
    \               $count++;\n            }\n        }\n        $max = max($max,\
    \ $count);\n        $count = 0;\n    }\n    return $max * $capacity;\n}\n\n$grid\
    \ = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(array(0, 0,\
    \ 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(array(0, 0,\
    \ 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity) . \"\\\
    n\";", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n\
    \                $count++;\n                $row = $i;\n                $col =\
    \ $j;\n                while ($row < $rows && $col < $cols) {\n              \
    \      if ($grid[$row][$col] == 1) {\n                        $grid[$row][$col]\
    \ = 0;\n                        $count++;\n                    }\n           \
    \         $row++;\n                    $col++;\n                }\n          \
    \  }\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    $max = 0;\n    for ($i =\
    \ 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n         \
    \   if ($grid[$i][$j] > $max) {\n                $max = $grid[$i][$j];\n     \
    \       }\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == $max) {\n   \
    \             $grid[$i][$j] = 0;\n                $count++;\n            }\n \
    \       }\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity);\necho \"\\n\";", "    $count = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    $grid_max = $grid_length\
    \ * $grid_width;\n    $grid_filled = 0;\n    $grid_filled_prev = 0;\n    $grid_filled_diff\
    \ = 0;\n    while ($grid_filled < $grid_max) {\n        $grid_filled_prev = $grid_filled;\n\
    \        for ($i = 0; $i < $grid_length; $i++) {\n            for ($j = 0; $j\
    \ < $grid_width; $j++) {\n                if ($grid[$i][$j] == 1) {\n        \
    \            $grid[$i][$j] = 0;\n                    $grid_filled++;\n       \
    \         }\n            }\n        }\n        $grid_filled_diff = $grid_filled\
    \ - $grid_filled_prev;\n        if ($grid_filled_diff > $capacity) {\n       \
    \     $count += ceil($grid_filled_diff / $capacity);\n        } else {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $row = 0;\n    $col\
    \ = 0;\n    while ($row < $rows) {\n        $col = 0;\n        while ($col < $cols)\
    \ {\n            if ($grid[$row][$col] == 1) {\n                $grid[$row][$col]\
    \ = 0;\n                $count++;\n                $row2 = $row;\n           \
    \     $col2 = $col;\n                while ($row2 < $rows && $col2 < $cols &&\
    \ $capacity > 0) {\n                    if ($grid[$row2][$col2] == 1) {\n    \
    \                    $grid[$row2][$col2] = 0;\n                        $capacity--;\n\
    \                    }\n                    $row2++;\n                    $col2++;\n\
    \                }\n            }\n            $col++;\n        }\n        $row++;\n\
    \    }\n    return $count;\n}\n", "    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    for ($i = 0; $i < $row; $i++) {\n        for\
    \ ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n       \
    \         $count += $capacity;\n                $grid[$i][$j] = 0;\n         \
    \   }\n        }\n    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $max_fill_count\
    \ = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    $grid_count = $grid_length * $grid_width;\n    $grid_index = 0;\n    while\
    \ ($grid_index < $grid_count) {\n        $grid_row = floor($grid_index / $grid_width);\n\
    \        $grid_col = $grid_index % $grid_width;\n        $grid_value = $grid[$grid_row][$grid_col];\n\
    \        if ($grid_value > 0) {\n            $grid[$grid_row][$grid_col] -= $capacity;\n\
    \            $max_fill += $capacity;\n            $max_fill_count++;\n       \
    \ }\n        $grid_index++;\n    }\n    return $max_fill_count;\n}\n", "    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    $fill_count = 0;\n    $row_index\
    \ = 0;\n    $col_index = 0;\n    while ($row_index < $rows) {\n        $col_index\
    \ = 0;\n        while ($col_index < $cols) {\n            if ($grid[$row_index][$col_index]\
    \ === 1) {\n                $grid[$row_index][$col_index] = 0;\n             \
    \   $fill_count++;\n                $row_index++;\n                $col_index++;\n\
    \            } else {\n                $col_index++;\n            }\n        }\n\
    \        $row_index++;\n    }\n    return $fill_count;\n}\n", "    $count = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $wells = [];\n \
    \   for ($i = 0; $i < $rows; $i++) {\n        $wells[$i] = 0;\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            $wells[$i] += $grid[$i][$j];\n       \
    \ }\n    }\n    while (true) {\n        $max = max($wells);\n        if ($max\
    \ == 0) {\n            break;\n        }\n        for ($i = 0; $i < $rows; $i++)\
    \ {\n            if ($wells[$i] == $max) {\n                $wells[$i] -= $capacity;\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $max = 0;\n    $max_index = 0;\n    $max_indexes =\
    \ array();\n    $max_indexes_count = 0;\n    $max_indexes_counts = array();\n\
    \    $max_indexes_counts_count = 0;\n    $max_indexes_counts_counts = array();\n\
    \    $max_indexes_counts_counts_count = 0;\n    $max_indexes_counts_counts_counts\
    \ = array();\n    $max_indexes_counts_counts_counts_count = 0;\n    $max_indexes_counts_counts_counts_counts\
    \ = array();\n    $max_indexes_counts_counts_counts_counts_count = 0;\n    $max_indexes_counts_counts_counts_counts_counts\
    \ = array();\n    $max_indexes_counts_counts_counts_counts_counts_count = 0;\n\
    \    $max_indexes_counts_counts_counts_counts_counts_counts = array();\n    $max_indexes_counts_counts_counts_counts_counts_counts_count\
    \ = 0;\n    $max_indexes_counts_counts_counts_counts_counts_counts_counts = array();\n\
    \    $max_indexes_counts_counts_counts_counts_counts_counts_counts_count = 0;\n\
    \    $max_indexes_counts_counts_counts_counts_counts_counts_counts_counts = array();\n\
    \    $max_indexes_counts_counts_counts_counts_counts_counts_counts_counts_count\
    \ = 0;\n    $max_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts\
    \ = array();\n    $max_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts_count\
    \ = 0", "    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n   \
    \ $num_buckets = 0;\n    for ($i = 0; $i < $num_rows; $i++) {\n        for ($j\
    \ = 0; $j < $num_cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $num_buckets += 1;\n            }\n        }\n    }\n    return $num_buckets\
    \ * $capacity;\n}\n", "    $total = 0;\n    $rows = count($grid);\n    $cols =\
    \ count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n               \
    \ $total += $capacity;\n                $grid[$i][$j] = 0;\n                if\
    \ ($i > 0 && $grid[$i - 1][$j] == 1) {\n                    $total -= $capacity;\n\
    \                    $grid[$i - 1][$j] = 0;\n                }\n             \
    \   if ($j > 0 && $grid[$i][$j - 1] == 1) {\n                    $total -= $capacity;\n\
    \                    $grid[$i][$j - 1] = 0;\n                }\n            }\n\
    \        }\n    }\n    return $total;\n}", "    $count = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    $grid_copy = $grid;\n\
    \    $grid_copy_length = count($grid_copy);\n    $grid_copy_width = count($grid_copy[0]);\n\
    \    $grid_copy_sum = 0;\n    for ($i = 0; $i < $grid_copy_length; $i++) {\n \
    \       for ($j = 0; $j < $grid_copy_width; $j++) {\n            $grid_copy_sum\
    \ += $grid_copy[$i][$j];\n        }\n    }\n    while ($grid_copy_sum > 0) {\n\
    \        for ($i = 0; $i < $grid_copy_length; $i++) {\n            for ($j = 0;\
    \ $j < $grid_copy_width; $j++) {\n                if ($grid_copy[$i][$j] > 0)\
    \ {\n                    $grid_copy[$i][$j] = 0;\n                    $grid_copy_sum--;\n\
    \                }\n            }\n        }\n        $count++;\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n\
    \    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    $row_index\
    \ = 0;\n    $col_index = 0;\n    while ($row_index < $row_count) {\n        $col_index\
    \ = 0;\n        while ($col_index < $col_count) {\n            if ($grid[$row_index][$col_index]\
    \ === 1) {\n                $grid[$row_index][$col_index] = 0;\n             \
    \   $count++;\n                $row_index++;\n                $col_index++;\n\
    \            } else {\n                $col_index++;\n            }\n        }\n\
    \        $row_index++;\n    }\n    return $count;\n}\n", "    $total = 0;\n  \
    \  $rows = count($grid);\n    $cols = count($grid[0]);\n    $row = 0;\n    $col\
    \ = 0;\n    $row_max = 0;\n    $col_max = 0;\n    $row_max_index = 0;\n    $col_max_index\
    \ = 0;\n    $row_max_index_prev = 0;\n    $col_max_index_prev = 0;\n    $row_max_prev\
    \ = 0;\n    $col_max_prev = 0;\n    $row_max_index_prev_prev = 0;\n    $col_max_index_prev_prev\
    \ = 0;\n    $row_max_prev_prev = 0;\n    $col_max_prev_prev = 0;\n    $row_max_index_prev_prev_prev\
    \ = 0;\n    $col_max_index_prev_prev_prev = 0;\n    $row_max_prev_prev_prev =\
    \ 0;\n    $col_max_prev_prev_prev = 0;\n    $row_max_index_prev_prev_prev_prev\
    \ = 0;\n    $col_max_index_prev_prev_prev_prev = 0;\n    $row_max_prev_prev_prev_prev\
    \ = 0;\n    $col_max_prev_prev_prev_prev = 0;\n    $row_max_index_prev_prev_prev_prev_prev\
    \ = 0;\n    $col_max_index_prev_prev_prev_prev_prev = 0;\n    $row_max_prev_prev_prev_prev_prev\
    \ = 0;\n    $col_max_prev_prev_prev_prev_prev = 0;\n    $row_max_index_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $col_max_index_prev_prev_prev_prev_prev_prev = 0;\n    $row_max_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $col_max_prev_prev_prev_prev_prev_prev = 0;\n    $row_max_index_prev_prev_prev_prev_prev_prev_prev",
  "    $max_fill = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    $grid_height = array_fill(0, $grid_width, 0);\n    for ($i = 0; $i < $grid_length;\
    \ $i++) {\n        for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $grid_height[$j]++;\n            }\n        }\n   \
    \ }\n    for ($i = 0; $i < $grid_width; $i++) {\n        $max_fill += $grid_height[$i]\
    \ / $capacity;\n        if ($grid_height[$i] % $capacity != 0) {\n           \
    \ $max_fill++;\n        }\n    }\n    return $max_fill;\n}", "    $count = 0;\n\
    \    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for ($i\
    \ = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $total = 0;\n    for\
    \ ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n   \
    \         if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n  \
    \          }\n        }\n    }\n    $max_fill = 0;\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        $fill = 0;\n        for ($j = 0; $j < $cols; $j++) {\n    \
    \        if ($grid[$i][$j] == 1) {\n                $fill += $capacity;\n    \
    \        }\n        }\n        if ($fill > $max_fill) {\n            $max_fill\
    \ = $fill;\n        }\n    }\n    return $total - $max_fill;\n}\n", "    $count\
    \ = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i =\
    \ 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n         \
    \   if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n        \
    \        $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid, $capacity,\
    \ $i, $j);\n            }\n        }\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n  \
    \  for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill($grid, $capacity,\
    \ $i, $j);\n            }\n        }\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n  \
    \  $row_max = array_fill(0, $row_count, 0);\n    $col_max = array_fill(0, $col_count,\
    \ 0);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n    \
    \        $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $count += min($row_max[$i], $col_max[$j], $capacity) -\
    \ $grid[$i][$j];\n        }\n    }\n    return $count;\n}\n", "    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0;\
    \ $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n          \
    \      $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid, $capacity,\
    \ $i, $j);\n            }\n        }\n    }\n    return $max_fill;\n}\n", "  \
    \  $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_max = array_fill(0, $row_count, 0);\n    $col_max = array_fill(0, $col_count,\
    \ 0);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n    \
    \        $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $count += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $wells = count($grid);\n\
    \    $units = count($grid[0]);\n    $buckets = array_fill(0, $wells, $capacity);\n\
    \    $filled = array_fill(0, $wells, 0);\n    for ($i = 0; $i < $units; $i++)\
    \ {\n        for ($j = 0; $j < $wells; $j++) {\n            if ($grid[$j][$i]\
    \ == 1) {\n                if ($buckets[$j] > 0) {\n                    $buckets[$j]--;\n\
    \                    $filled[$j]++;\n                } else {\n              \
    \      $count += $units - $filled[$j];\n                    $filled[$j] = $units;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_index = 0;\n    $col_index = 0;\n    $row_index_max = $row_count - 1;\n\
    \    $col_index_max = $col_count - 1;\n    $row_index_min = 0;\n    $col_index_min\
    \ = 0;\n    $row_index_inc = 1;\n    $col_index_inc = 1;\n    $row_index_inc_max\
    \ = 1;\n    $col_index_inc_max = 1;\n    $row_index_inc_min = 0;\n    $col_index_inc_min\
    \ = 0;\n    while ($row_index_min <= $row_index_max && $col_index_min <= $col_index_max)\
    \ {\n        if ($row_index_inc == $row_index_inc_max && $col_index_inc == $col_index_inc_max)\
    \ {\n            $row_index_inc = $row_index_inc_min;\n            $col_index_inc\
    \ = $col_index_inc_min;\n            $row_index_inc_max = $row_index_inc_min =\
    \ $row_index_inc_max == 1 ? -1 : 1;\n            $col_index_inc_max = $col_index_inc_min\
    \ = $col_index_inc_max == 1 ? -1 : 1;\n            $row_index_min++;\n       \
    \     $col_index_min++;\n            $row_index_max--;\n            $col_index_max--;\n\
    \            $row_index = $row_index_min;\n            $col_index = $col_index_min;\n\
    \        }\n        if ($grid[$row_index][$col_index] == 1) {\n            $grid[$row_index][$col_index]\
    \ = 0;\n            $count++;\n        }\n        $row_index += $row_index_inc;\n\
    \        $col_index += $col_index_inc;\n    }\n    return $count;\n}\n", "   \
    \ $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_row\
    \ = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n          \
    \      $max_row = max($max_row, $i);\n                $max_col = max($max_col,\
    \ $j);\n            }\n        }\n    }\n    for ($i = 0; $i <= $max_row; $i++)\
    \ {\n        for ($j = 0; $j <= $max_col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n            }\n        }\n  \
    \  }\n    return $count;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_fill = 0;\n    $fill = 0;\n    for ($i = 0; $i < $rows; $i++) {\n  \
    \      for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $fill++;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n        $fill = 0;\n    }\n    return $max_fill * $capacity;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $row_count; $i++)\
    \ {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_row = max($max_row, $i);\n                $max_col\
    \ = max($max_col, $j);\n            }\n        }\n    }\n    $row_count = $max_row\
    \ + 1;\n    $col_count = $max_col + 1;\n    for ($i = 0; $i < $row_count; $i++)\
    \ {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count++;\n                $grid[$i][$j] = 0;\n   \
    \             $capacity--;\n                if ($capacity == 0) {\n          \
    \          $count++;\n                    $capacity = $capacity + $col_count -\
    \ $j - 1;\n                }\n            }\n        }\n        $capacity = $capacity\
    \ + $col_count;\n    }\n    return $count;\n}\n", "    $count = 0;\n    $max =\
    \ 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \            }\n        }\n        if ($count > $max) {\n            $max = $count;\n\
    \        }\n        $count = 0;\n    }\n    return $max * $capacity;\n}\n", " \
    \   $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_row\
    \ = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] === 1) {\n         \
    \       $max_row = max($max_row, $i);\n                $max_col = max($max_col,\
    \ $j);\n            }\n        }\n    }\n    for ($i = 0; $i <= $max_row; $i++)\
    \ {\n        for ($j = 0; $j <= $max_col; $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $grid[$i][$j] = $capacity;\n                $count++;\n\
    \            }\n        }\n    }\n    for ($i = 0; $i <= $max_row; $i++) {\n \
    \       for ($j = 0; $j <= $max_col; $j++) {\n            if ($grid[$i][$j] >\
    \ 0) {\n                $grid[$i][$j]--;\n                $count++;\n        \
    \    }\n        }\n    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    for ($i = 0; $i < $grid_length;\
    \ $i++) {\n        for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                for ($k = $i + 1; $k < $grid_length; $k++) {\n       \
    \             if ($grid[$k][$j] == 1) {\n                        $grid[$k][$j]\
    \ = 0;\n                    } else {\n                        break;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max\
    \ = max($max, $j);\n            }\n        }\n    }\n    $count += $max;\n   \
    \ $count += $capacity * ($rows - 1);\n    return $count;\n}\n", "    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_fill = 0;\n    $buckets = [];\n    for\
    \ ($i = 0; $i < $rows; $i++) {\n        $buckets[$i] = 0;\n    }\n    for ($j\
    \ = 0; $j < $cols; $j++) {\n        for ($i = 0; $i < $rows; $i++) {\n       \
    \     if ($grid[$i][$j] === 1) {\n                $buckets[$i]++;\n          \
    \  }\n        }\n        $max_fill += min($buckets);\n    }\n    return $max_fill;\n\
    }\n", "    $max_fill = 0;\n    $max_fill_count = 0;\n    $grid_height = count($grid);\n\
    \    $grid_width = count($grid[0]);\n    for ($i = 0; $i < $grid_height; $i++)\
    \ {\n        for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $max_fill_count++;\n\
    \            }\n        }\n    }\n    return $max_fill - $max_fill_count;\n}\n",
  "    $wells = count($grid);\n    $units = count($grid[0]);\n    $fill_count = 0;\n\
    \    for ($i = 0; $i < $wells; $i++) {\n        for ($j = 0; $j < $units; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $fill_count++;\n \
    \               $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $fill_count;\n\
    }\n", "    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $wells[$i] =\
    \ 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $wells[$i] += $grid[$i][$j];\n\
    \        }\n    }\n    $max = max($wells);\n    $min = min($wells);\n    $total\
    \ = $max * $capacity;\n    $total -= $min * $capacity;\n    $total += $min;\n\
    \    return $total;\n}\n\n$grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n  \
    \  [1, 1, 1, 1]\n];\n$capacity = 1;\necho max_fill($grid, $capacity);\necho \"\
    \\n\";\n\n$grid = [\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n\
    \    [0, 1, 1, 1]\n];\n$capacity = 2;\necho max_fill($grid, $capacity);\necho\
    \ \"\\n\";\n\n$grid = [\n    [0, 0, 0],\n    [0, 0, 0]\n];\n$capacity = 5;\necho\
    \ max_fill($grid, $capacity);\necho \"\\n\";", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $max_row = $row_count\
    \ - 1;\n    $max_col = $col_count - 1;\n    $max_row_col = max($row_count, $col_count);\n\
    \    for ($i = 0; $i < $max_row_col; $i++) {\n        for ($j = 0; $j < $max_row_col;\
    \ $j++) {\n            $row = $i;\n            $col = $j;\n            $row_inc\
    \ = $col_inc = 1;\n            $row_dec = $col_dec = 0;\n            $row_dir\
    \ = $col_dir = 1;\n            $row_max = $max_row;\n            $col_max = $max_col;\n\
    \            while ($row >= 0 && $row <= $row_max && $col >= 0 && $col <= $col_max)\
    \ {\n                if ($grid[$row][$col] == 1) {\n                    $count\
    \ += $capacity;\n                    $grid[$row][$col] = 0;\n                }\n\
    \                if ($row_dir == 1) {\n                    $row += $row_inc;\n\
    \                    $row_inc++;\n                    if ($row == $row_max) {\n\
    \                        $row_dir = -1;\n                        $row_dec++;\n\
    \                    }\n                } else {\n                    $row -=\
    \ $row_dec;\n                    $row_dec++;\n                    if ($row ==\
    \ 0) {\n                        $row_dir = 1;\n                        $row_inc++;\n\
    \                    }\n                }\n                if ($col_dir == 1)\
    \ {\n                    $col += $col_inc;\n                    $col_inc++;\n\
    \                    if ($col == $col_max) {\n                        $col_dir\
    \ = -1;\n                        $col_dec++;\n                    }\n        \
    \        } else {\n                    $col -= $col_dec;\n                   \
    \ $col_dec++;\n                    if ($col == 0) {\n                        $col_dir\
    \ = 1;\n                        $col_inc++;\n                    }\n         \
    \       }\n            }\n        }\n    }\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n  \
    \  $col_index = 0;\n    $row_index_max = $row_count - 1;\n    $col_index_max =\
    \ $col_count - 1;\n    $row_index_min = 0;\n    $col_index_min = 0;\n    $row_index_max_reached\
    \ = false;\n    $col_index_max_reached = false;\n    $row_index_min_reached =\
    \ false;\n    $col_index_min_reached = false;\n    $row_index_max_reached_count\
    \ = 0;\n    $col_index_max_reached_count = 0;\n    $row_index_min_reached_count\
    \ = 0;\n    $col_index_min_reached_count = 0;\n    $row_index_max_reached_count_max\
    \ = $row_count;\n    $col_index_max_reached_count_max = $col_count;\n    $row_index_min_reached_count_max\
    \ = $row_count;\n    $col_index_min_reached_count_max = $col_count;\n    $row_index_max_reached_count_min\
    \ = 0;\n    $col_index_max_reached_count_min = 0;\n    $row_index_min_reached_count_min\
    \ = 0;\n    $col_index_min_reached_count_min = 0;\n    $row_index_max_reached_count_min_reached\
    \ = false;\n    $col_index_max_reached_count_min_reached = false;\n    $row_index_min_reached_count_min_reached\
    \ = false;\n    $col_index_min_reached_count_min_reached = false;\n    $row_index_max_reached_count_max_reached\
    \ = false;\n    $col_index_max_reached_count_max_reached = false;\n    $row_index_",
  "    $max_fill = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_max = $col_max = 0;\n    for ($i = 0; $i < $row_count; $i++) {\n   \
    \     for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $row_max = max($row_max, $i);\n                $col_max\
    \ = max($col_max, $j);\n            }\n        }\n    }\n    for ($i = 0; $i <=\
    \ $row_max; $i++) {\n        for ($j = 0; $j <= $col_max; $j++) {\n          \
    \  if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n         \
    \   }\n        }\n    }\n    return $count;\n}\n\n$grid = array(\n    array(0,\
    \ 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1, 1)\n);\n$capacity = 1;\n\
    echo max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(\n    array(0, 0,\
    \ 1, 1),\n    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0, 1, 1, 1)\n\
    );\n$capacity = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(\n\
    \    array(0, 0, 0),\n    array(0, 0, 0)\n);\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";", "    $total = 0;\n    $rows = count($grid);\n    $cols\
    \ = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        $row = $grid[$i];\n\
    \        $total += max_fill_row($row, $capacity);\n    }\n    return $total;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $grid = array_map(function($row) use ($cols) {\n        return array_pad($row,\
    \ $cols, 0);\n    }, $grid);\n    $grid = array_pad($grid, $rows, array_fill(0,\
    \ $cols, 0));\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j <\
    \ $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid = fill($grid, $i, $j, $capacity);\n            }\n    \
    \    }\n    }\n    return $count;\n}", "    $max_fill = 0;\n    $max_fill_row\
    \ = 0;\n    $max_fill_col = 0;\n    $max_fill_row_count = 0;\n    $max_fill_col_count\
    \ = 0;\n    $max_fill_row_count_prev = 0;\n    $max_fill_col_count_prev = 0;\n\
    \    $max_fill_row_count_prev_prev = 0;\n    $max_fill_col_count_prev_prev = 0;\n\
    \    $max_fill_row_count_prev_prev_prev = 0;\n    $max_fill_col_count_prev_prev_prev\
    \ = 0;\n    $max_fill_row_count_prev_prev_prev_prev = 0;\n    $max_fill_col_count_prev_prev_prev_prev\
    \ = 0;\n    $max_fill_row_count_prev_prev_prev_prev_prev = 0;\n    $max_fill_col_count_prev_prev_prev_prev_prev\
    \ = 0;\n    $max_fill_row_count_prev_prev_prev_prev_prev_prev = 0;\n    $max_fill_col_count_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $max_fill_row_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $max_fill_col_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    $max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $max_fill_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0;\n    $max_fill_row_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $max_fill_col", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    $row = 0;\n    $col = 0;\n    while ($row < $rows) {\n \
    \       $col = 0;\n        while ($col < $cols) {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $grid[$row][$col] = 0;\n                $count++;\n\
    \                $row_above = $row - 1;\n                while ($row_above >=\
    \ 0 && $grid[$row_above][$col] == 1) {\n                    $grid[$row_above][$col]\
    \ = 0;\n                    $row_above--;\n                }\n               \
    \ $row_below = $row + 1;\n                while ($row_below < $rows && $grid[$row_below][$col]\
    \ == 1) {\n                    $grid[$row_below][$col] = 0;\n                \
    \    $row_below++;\n                }\n                $col_left = $col - 1;\n\
    \                while ($col_left >= 0 && $grid[$row][$col_left] == 1) {\n   \
    \                 $grid[$row][$col_left] = 0;\n                    $col_left--;\n\
    \                }\n                $col_right = $col + 1;\n                while\
    \ ($col_right < $cols && $grid[$row][$col_right] == 1) {\n                   \
    \ $grid[$row][$col_right] = 0;\n                    $col_right++;\n          \
    \      }\n            }\n            $col++;\n        }\n        $row++;\n   \
    \ }\n    return $count;\n}\n", "    $total = 0;\n    $rows = count($grid);\n \
    \   $cols = count($grid[0]);\n    $row_max = array_fill(0, $rows, 0);\n    $col_max\
    \ = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n\
    \            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n   \
    \ }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $total += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $total;\n}\n", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $total += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill($grid, $capacity, $i, $j);\n            }\n        }\n \
    \   }\n    return $total;\n}\n", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $row_max = array_fill(0, $rows, 0);\n    $col_max\
    \ = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n\
    \            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n   \
    \ }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $total += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $total;\n}\n", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max = 0;\n    for ($i = 0; $i < $rows; $i++)\
    \ {\n        $max = 0;\n        for ($j = 0; $j < $cols; $j++) {\n           \
    \ if ($grid[$i][$j] == 1) {\n                $max++;\n            }\n        }\n\
    \        $count += $max;\n        if ($max > $capacity) {\n            $count\
    \ += $max - $capacity;\n        }\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $max = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        $count\
    \ = 0;\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count++;\n            }\n        }\n        if ($count\
    \ > $max) {\n            $max = $count;\n        }\n    }\n    return $max * $capacity;\n\
    }\n", "    $max_fill = 0;\n    $grid_length = count($grid);\n    $grid_width =\
    \ count($grid[0]);\n    $grid_height = array_fill(0, $grid_width, 0);\n    for\
    \ ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $grid_height[$j]++;\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $grid_width; $i++) {\n\
    \        $max_fill += min($grid_height[$i], $capacity);\n    }\n    return $max_fill;\n\
    }", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    $max = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j <\
    \ $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max =\
    \ max($max, $j);\n            }\n        }\n    }\n    for ($i = 0; $i < $row;\
    \ $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n            } else {\n      \
    \          if ($j == $max) {\n                    $count += $capacity;\n     \
    \           }\n            }\n        }\n    }\n    return $count;\n}\n", "  \
    \  $max_fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n \
    \   for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $row = 0;\n    $col = 0;\n    $max = 0;\n    $max_row = 0;\n    $max_col\
    \ = 0;\n    while ($row < $rows) {\n        $col = 0;\n        while ($col < $cols)\
    \ {\n            if ($grid[$row][$col] == 1) {\n                $fill++;\n   \
    \             $grid[$row][$col] = 0;\n            }\n            $col++;\n   \
    \     }\n        $row++;\n    }\n    $row = 0;\n    while ($row < $rows) {\n \
    \       $col = 0;\n        while ($col < $cols) {\n            if ($grid[$row][$col]\
    \ == 0) {\n                $max = 0;\n                $max_row = $row;\n     \
    \           $max_col = $col;\n                $row2 = $row;\n                while\
    \ ($row2 < $rows) {\n                    $col2 = $col;\n                    while\
    \ ($col2 < $cols) {\n                        if ($grid[$row2][$col2] == 1) {\n\
    \                            $max++;\n                        }\n            \
    \            $col2++;\n                    }\n                    $row2++;\n \
    \               }\n                if ($max > $capacity) {\n                 \
    \   $fill += $capacity;\n                    $row2 = $row;\n                 \
    \   while ($row2 < $rows) {\n                        $col2 = $col;\n         \
    \               while ($col2 < $cols) {\n                            if ($grid[$row2][$col2]\
    \ == 1) {\n                                $grid[$row2][$col2] = 0;\n        \
    \                        $capacity--;\n                                if ($capacity\
    \ == 0) {\n                                    break 2;\n                    \
    \            }\n                            }\n                            $col2++;\n\
    \                        }\n                        $row2++;\n               \
    \     }\n                } else {\n                    $fill += $max;\n      \
    \              $row2 = $row;\n                    while ($row2 < $rows) {\n  \
    \                      $col2 = $col;\n                        while ($col2 < $cols)\
    \ {", "    $count = 0;\n    $max_row = count($grid);\n    $max_col = count($grid[0]);\n\
    \    $wells = [];\n    $buckets = [];\n    for ($i = 0; $i < $max_row; $i++) {\n\
    \        for ($j = 0; $j < $max_col; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $wells[] = [$i, $j];\n            }\n        }\n    }\n\
    \    $max_wells = count($wells);\n    for ($i = 0; $i < $max_wells; $i++) {\n\
    \        $buckets[] = $capacity;\n    }\n    while (true) {\n        $empty_buckets\
    \ = 0;\n        for ($i = 0; $i < $max_wells; $i++) {\n            $buckets[$i]--;\n\
    \            if ($buckets[$i] == 0) {\n                $empty_buckets++;\n   \
    \         }\n        }\n        if ($empty_buckets == $max_wells) {\n        \
    \    break;\n        }\n        $count++;\n        for ($i = 0; $i < $max_wells;\
    \ $i++) {\n            $buckets[$i] = $capacity;\n        }\n    }\n    return\
    \ $count;\n}\n", "    $max_fill = 0;\n    $grid_length = count($grid);\n    $grid_row_length\
    \ = count($grid[0]);\n    for ($i = 0; $i < $grid_length; $i++) {\n        for\
    \ ($j = 0; $j < $grid_row_length; $j++) {\n            if ($grid[$i][$j] === 1)\
    \ {\n                $max_fill += $capacity;\n                $grid[$i][$j] =\
    \ 0;\n                $grid = fill_neighbors($grid, $i, $j, $capacity);\n    \
    \        }\n        }\n    }\n    return $max_fill;\n}\n", "    $count = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_row = 0;\n\
    \    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n               \
    \ $max_row = max($max_row, $i);\n                $max_col = max($max_col, $j);\n\
    \            }\n        }\n    }\n    $max_row++;\n    $max_col++;\n    $buckets\
    \ = array_fill(0, $max_row, $capacity);\n    $buckets_used = array_fill(0, $max_row,\
    \ 0);\n    $buckets_used[0] = 1;\n    $buckets_used[$max_row - 1] = 1;\n    $buckets[0]\
    \ = 0;\n    $buckets[$max_row - 1] = 0;\n    for ($i = 0; $i < $max_col; $i++)\
    \ {\n        for ($j = 0; $j < $max_row; $j++) {\n            if ($grid[$j][$i]\
    \ == 1) {\n                $buckets[$j]--;\n                if ($buckets[$j] ==\
    \ 0) {\n                    $buckets_used[$j] = 1;\n                }\n      \
    \      }\n        }\n        $count += array_sum($buckets_used);\n    }\n    return\
    \ $count;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n  \
    \  $total = 0;\n    $max = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            $total += $grid[$i][$j];\n       \
    \     $max = max($max, $grid[$i][$j]);\n        }\n    }\n    $min = 0;\n    while\
    \ ($min < $max) {\n        $mid = $min + ($max - $min) / 2;\n        $sum = 0;\n\
    \        for ($i = 0; $i < $rows; $i++) {\n            for ($j = 0; $j < $cols;\
    \ $j++) {\n                $sum += max(0, $grid[$i][$j] - $mid);\n           \
    \ }\n        }\n        if ($sum > $capacity) {\n            $min = $mid + 1;\n\
    \        } else {\n            $max = $mid;\n        }\n    }\n    return $total\
    \ - $min * $rows * $cols;\n}\n", "    $count = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    $wells = [];\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $wells[] = [$i, $j];\n            }\n        }\n  \
    \  }\n    $well_count = count($wells);\n    $well_index = 0;\n    while ($well_index\
    \ < $well_count) {\n        $well = $wells[$well_index];\n        $row = $well[0];\n\
    \        $col = $well[1];\n        $grid[$row][$col] = 0;\n        $count++;\n\
    \        $well_index++;\n        $row_index = $row;\n        $col_index = $col;\n\
    \        while ($row_index < $row_count && $grid[$row_index][$col_index] == 1)\
    \ {\n            $grid[$row_index][$col_index] = 0;\n            $row_index++;\n\
    \        }\n        $row_index = $row;\n        $col_index = $col;\n        while\
    \ ($row_index >= 0 && $grid[$row_index][$col_index] == 1) {\n            $grid[$row_index][$col_index]\
    \ = 0;\n            $row_index--;\n        }\n        $row_index = $row;\n   \
    \     $col_index = $col;\n        while ($col_index < $col_count && $grid[$row_index][$col_index]\
    \ == 1) {\n            $grid[$row_index][$col_index] = 0;\n            $col_index++;\n\
    \        }\n        $row_index = $row;\n        $col_index = $col;\n        while\
    \ ($col_index >= 0 && $grid[$row_index][$col_index] == 1) {\n            $grid[$row_index][$col_index]\
    \ = 0;\n            $", "    $count = 0;\n    $rows = count($grid);\n    $cols\
    \ = count($grid[0]);\n    $max_row = 0;\n    $max_col = 0;\n    $max_row_count\
    \ = 0;\n    $max_col_count = 0;\n    for ($i = 0; $i < $rows; $i++) {\n      \
    \  $row_count = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $row_count++;\n            }\n        }\n        if\
    \ ($row_count > $max_row_count) {\n            $max_row_count = $row_count;\n\
    \            $max_row = $i;\n        }\n    }\n    for ($j = 0; $j < $cols; $j++)\
    \ {\n        $col_count = 0;\n        for ($i = 0; $i < $rows; $i++) {\n     \
    \       if ($grid[$i][$j] == 1) {\n                $col_count++;\n           \
    \ }\n        }\n        if ($col_count > $max_col_count) {\n            $max_col_count\
    \ = $col_count;\n            $max_col = $j;\n        }\n    }\n    $count += $max_row_count;\n\
    \    $count += $max_col_count;\n    $count -= $capacity;\n    return $count;\n\
    }\n", "    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $row_max = array_fill(0, $rows, 0);\n    $col_max = array_fill(0, $cols,\
    \ 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n    \
    \        $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $total += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $total;\n}\n", "    $total = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_max = array_fill(0,\
    \ $row_count, 0);\n    $col_max = array_fill(0, $col_count, 0);\n    for ($i =\
    \ 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n\
    \            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n            $col_max[$j]\
    \ = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n    for ($i = 0; $i <\
    \ $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n       \
    \     $total += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n        }\n\
    \    }\n    return $total * $capacity;\n}\n\n$grid = array(\n    array(0, 0, 1,\
    \ 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1, 1)\n);\n$capacity = 1;\necho\
    \ max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(\n    array(0, 0, 1,\
    \ 1),\n    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0, 1, 1, 1)\n\
    );\n$capacity = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(\n\
    \    array(0, 0, 0),\n    array(0, 0, 0)\n);\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";", "    $max_fill = 0;\n    $grid_length = count($grid);\n\
    \    for ($i = 0; $i < $grid_length; $i++) {\n        $row_length = count($grid[$i]);\n\
    \        for ($j = 0; $j < $row_length; $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n            }\n        }\n    }\n    return $max_fill;\n}\n", "    $fill_count\
    \ = 0;\n    $well_count = count($grid);\n    $well_length = count($grid[0]);\n\
    \    $well_index = 0;\n    $well_depth = 0;\n    $well_depth_max = 0;\n    $well_depth_min\
    \ = 0;\n    $well_depth_diff = 0;\n    $well_depth_diff_max = 0;\n    $well_depth_diff_min\
    \ = 0;\n    $well_depth_diff_min_index = 0;\n    $well_depth_diff_max_index =\
    \ 0;\n    $well_depth_diff_max_index_prev = 0;\n    $well_depth_diff_min_index_prev\
    \ = 0;\n    $well_depth_diff_max_index_prev_prev = 0;\n    $well_depth_diff_min_index_prev_prev\
    \ = 0;\n    $well_depth_diff_max_index_prev_prev_prev = 0;\n    $well_depth_diff_min_index_prev_prev_prev\
    \ = 0;\n    $well_depth_diff_max_index_prev_prev_prev_prev = 0;\n    $well_depth_diff_min_index_prev_prev_prev_prev\
    \ = 0;\n    $well_depth_diff_max_index_prev_prev_prev_prev_prev = 0;\n    $well_depth_diff_min_index_prev_prev_prev_prev_prev\
    \ = 0;\n    $well_depth_diff_max_index_prev_prev_prev_prev_prev_prev = 0;\n  \
    \  $well_depth_diff_min_index_prev_prev_prev_prev_prev_prev = 0;\n    $well_depth_diff_max_index_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $well_depth_diff_min_index_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    $well_depth_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    $well_depth_diff_min_index_prev_prev_prev_", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_neighbors($grid, $i, $j, $capacity);\n  \
    \          }\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n \
    \   $grid = array_reverse($grid);\n    foreach ($grid as $row) {\n        $row\
    \ = array_reverse($row);\n        $row_count = 0;\n        foreach ($row as $well)\
    \ {\n            if ($well == 1) {\n                $row_count++;\n          \
    \  }\n        }\n        $count += $row_count;\n        if ($row_count > $capacity)\
    \ {\n            $count += $row_count - $capacity;\n        }\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n      \
    \          $grid[$i][$j] = 0;\n                $grid = fill($grid, $i, $j, $capacity);\n\
    \            }\n        }\n    }\n    return $count;\n}\n", "    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $total = 0;\n    for ($i = 0; $i < $rows; $i++)\
    \ {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $total += $capacity;\n            }\n        }\n    }\n\
    \    return $total;\n}\n\n$grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n  \
    \  [1, 1, 1, 1]\n];\n\necho max_fill($grid, 1);\necho \"\\n\";\n\n$grid = [\n\
    \    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n];\n\
    \necho max_fill($grid, 2);\necho \"\\n\";\n\n$grid = [\n    [0, 0, 0],\n    [0,\
    \ 0, 0]\n];\n\necho max_fill($grid, 5);\necho \"\\n\";", "    $count = 0;\n  \
    \  $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for ($i\
    \ = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count++;\n          \
    \      $grid[$i][$j] = 0;\n                $grid = fill_neighbours($grid, $i,\
    \ $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $grid[$i][$j]\
    \ = 0;\n                $count++;\n                $count += fill_neighbors($grid,\
    \ $i, $j, $capacity - 1);\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $max = 0;\n    for ($i = 0; $i < count($grid); $i++)\
    \ {\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count++;\n            }\n        }\n        if ($count\
    \ > $max) {\n            $max = $count;\n        }\n        $count = 0;\n    }\n\
    \    return $max * $capacity;\n}\n", "    $fill_count = 0;\n    $well_count =\
    \ count($grid);\n    $well_length = count($grid[0]);\n    $well_index = 0;\n \
    \   while ($well_index < $well_count) {\n        $well = $grid[$well_index];\n\
    \        $water_index = 0;\n        while ($water_index < $well_length) {\n  \
    \          if ($well[$water_index] == 1) {\n                $fill_count++;\n \
    \               $water_index += $capacity;\n            } else {\n           \
    \     $water_index++;\n            }\n        }\n        $well_index++;\n    }\n\
    \    return $fill_count;\n}\n", "    $count = 0;\n    $grid_length = count($grid);\n\
    \    $grid_width = count($grid[0]);\n    for ($i = 0; $i < $grid_length; $i++)\
    \ {\n        for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n            }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n\
    $capacity = 5;\necho max_fill($grid, $capacity);\necho \"\\n\";", "    $count\
    \ = 0;\n    $max = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $max = max($max, $j);\n\
    \            }\n        }\n        $count += $max + 1;\n        $max = 0;\n  \
    \  }\n    return $count * $capacity;\n}\n", "    $count = 0;\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n    $col_index\
    \ = 0;\n    $row_index_max = $row_count - 1;\n    $col_index_max = $col_count\
    \ - 1;\n    $row_index_min = 0;\n    $col_index_min = 0;\n    $row_index_inc =\
    \ 1;\n    $col_index_inc = 1;\n    $row_index_dec = -1;\n    $col_index_dec =\
    \ -1;\n    $row_index_dir = $row_index_inc;\n    $col_index_dir = $col_index_inc;\n\
    \    $row_index_dir_max = $row_index_inc;\n    $col_index_dir_max = $col_index_inc;\n\
    \    $row_index_dir_min = $row_index_dec;\n    $col_index_dir_min = $col_index_dec;\n\
    \    $row_index_dir_inc = $row_index_inc;\n    $col_index_dir_inc = $col_index_inc;\n\
    \    $row_index_dir_dec = $row_index_dec;\n    $col_index_dir_dec = $col_index_dec;\n\
    \    $row_index_dir_next = $row_index_inc;\n    $col_index_dir_next = $col_index_inc;\n\
    \    $row_index_dir_prev = $row_index_dec;\n    $col_index_dir_prev = $col_index_dec;\n\
    \    $row_index_dir_prev_max = $row_index_dec;\n    $col_index_dir_prev_max =\
    \ $col_index_dec;\n    $row_index_dir_prev_min = $row_index_inc;\n    $col_index_dir_prev_min\
    \ = $col_index_inc;\n    $row_index_dir_prev_inc = $row_index_dec;\n    $col_index_dir_prev_inc\
    \ = $col", "    $max_fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_index = 0;\n    $col_index = 0;\n    while ($row_index < $row_count)\
    \ {\n        $col_index = 0;\n        while ($col_index < $col_count) {\n    \
    \        if ($grid[$row_index][$col_index] == 1) {\n                $count++;\n\
    \                $grid[$row_index][$col_index] = 0;\n                $row_index++;\n\
    \                $col_index++;\n                $row_index = $row_index - $capacity;\n\
    \                $col_index = $col_index - $capacity;\n                if ($row_index\
    \ < 0) {\n                    $row_index = 0;\n                }\n           \
    \     if ($col_index < 0) {\n                    $col_index = 0;\n           \
    \     }\n            } else {\n                $col_index++;\n            }\n\
    \        }\n        $row_index++;\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0;\
    \ $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n               \
    \ $count++;\n                $queue = [[$i, $j]];\n                while (!empty($queue))\
    \ {\n                    $cur = array_shift($queue);\n                    $x =\
    \ $cur[0];\n                    $y = $cur[1];\n                    if ($x > 0\
    \ && $grid[$x - 1][$y] == 1) {\n                        $grid[$x - 1][$y] = 0;\n\
    \                        $queue[] = [$x - 1, $y];\n                    }\n   \
    \                 if ($x < $row - 1 && $grid[$x + 1][$y] == 1) {\n           \
    \             $grid[$x + 1][$y] = 0;\n                        $queue[] = [$x +\
    \ 1, $y];\n                    }\n                    if ($y > 0 && $grid[$x][$y\
    \ - 1] == 1) {\n                        $grid[$x][$y - 1] = 0;\n             \
    \           $queue[] = [$x, $y - 1];\n                    }\n                \
    \    if ($y < $col - 1 && $grid[$x][$y + 1] == 1) {\n                        $grid[$x][$y\
    \ + 1] = 0;\n                        $queue[] = [$x, $y + 1];\n              \
    \      }\n                }\n            }\n        }\n    }\n    return $count\
    \ * $capacity;\n}\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $row_max = array_fill(0, $row_count, 0);\n    $col_max\
    \ = array_fill(0, $col_count, 0);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            $row_max[$i] = max($row_max[$i],\
    \ $grid[$i][$j]);\n            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n\
    \        }\n    }\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            $count += min($row_max[$i], $col_max[$j])\
    \ - $grid[$i][$j];\n        }\n    }\n    return $count * $capacity;\n}\n", " \
    \   $total = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_sum = array_fill(0, $row_count, 0);\n    $col_sum = array_fill(0, $col_count,\
    \ 0);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $row_sum[$i] += $grid[$i][$j];\n            $col_sum[$j]\
    \ += $grid[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $row_count; $i++)\
    \ {\n        $total += max(0, $row_sum[$i] - $capacity);\n    }\n    for ($j =\
    \ 0; $j < $col_count; $j++) {\n        $total += max(0, $col_sum[$j] - $capacity);\n\
    \    }\n    return $total;\n}", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $row_max = array_fill(0, $rows, 0);\n    $col_max\
    \ = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n\
    \            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n   \
    \ }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $count += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $count * $capacity;\n}\n", "    $max_fill = 0;\n\
    \    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    $row_fill\
    \ = array_fill(0, $row_count, 0);\n    $col_fill = array_fill(0, $col_count, 0);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $row_fill[$i]++;\n\
    \                $col_fill[$j]++;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $row_count; $i++) {\n        $max_fill += min($row_fill[$i], $capacity);\n\
    \    }\n    for ($j = 0; $j < $col_count; $j++) {\n        $max_fill += min($col_fill[$j],\
    \ $capacity);\n    }\n    return $max_fill;\n}\n", "    $result = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n  \
    \  $col_index = 0;\n    while ($row_index < $row_count) {\n        if ($grid[$row_index][$col_index]\
    \ == 1) {\n            $result += $capacity;\n            $grid[$row_index][$col_index]\
    \ = 0;\n        }\n        if ($col_index == $col_count - 1) {\n            $row_index++;\n\
    \            $col_index = 0;\n        } else {\n            $col_index++;\n  \
    \      }\n    }\n    return $result;\n}\n", "    $grid_height = count($grid);\n\
    \    $grid_width = count($grid[0]);\n    $total_water = 0;\n    $total_buckets\
    \ = 0;\n    for ($i = 0; $i < $grid_height; $i++) {\n        for ($j = 0; $j <\
    \ $grid_width; $j++) {\n            $total_water += $grid[$i][$j];\n        }\n\
    \    }\n    $total_buckets = ceil($total_water / $capacity);\n    return $total_buckets;\n\
    }\n", "    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    $num_buckets\
    \ = 0;\n    for ($i = 0; $i < $num_rows; $i++) {\n        for ($j = 0; $j < $num_cols;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $num_buckets++;\n\
    \            }\n        }\n    }\n    $num_buckets = ceil($num_buckets / $capacity);\n\
    \    return $num_buckets;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_fill = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n               \
    \ $max_fill += $capacity;\n                $grid[$i][$j] = 0;\n              \
    \  $queue = [[$i, $j]];\n                while (!empty($queue)) {\n          \
    \          list($x, $y) = array_shift($queue);\n                    if ($x > 0\
    \ && $grid[$x - 1][$y] == 1) {\n                        $grid[$x - 1][$y] = 0;\n\
    \                        $queue[] = [$x - 1, $y];\n                    }\n   \
    \                 if ($x < $rows - 1 && $grid[$x + 1][$y] == 1) {\n          \
    \              $grid[$x + 1][$y] = 0;\n                        $queue[] = [$x\
    \ + 1, $y];\n                    }\n                    if ($y > 0 && $grid[$x][$y\
    \ - 1] == 1) {\n                        $grid[$x][$y - 1] = 0;\n             \
    \           $queue[] = [$x, $y - 1];\n                    }\n                \
    \    if ($y < $cols - 1 && $grid[$x][$y + 1] == 1) {\n                       \
    \ $grid[$x][$y + 1] = 0;\n                        $queue[] = [$x, $y + 1];\n \
    \                   }\n                }\n            }\n        }\n    }\n  \
    \  return $max_fill;\n}\n", "    $count = 0;\n    foreach ($grid as $row) {\n\
    \        $count += max_fill_row($row, $capacity);\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $max = 0;\n    $max_index = 0;\n    $max_index_array\
    \ = array();\n    foreach ($grid as $key => $value) {\n        $sum = array_sum($value);\n\
    \        if ($sum > $max) {\n            $max = $sum;\n            $max_index\
    \ = $key;\n        }\n    }\n    $max_index_array[] = $max_index;\n    $count\
    \ += $max;\n    $grid[$max_index] = array_fill(0, count($grid[$max_index]), 0);\n\
    \    $max = 0;\n    $max_index = 0;\n    foreach ($grid as $key => $value) {\n\
    \        $sum = array_sum($value);\n        if ($sum > $max) {\n            $max\
    \ = $sum;\n            $max_index = $key;\n        }\n    }\n    $max_index_array[]\
    \ = $max_index;\n    $count += $max;\n    $grid[$max_index] = array_fill(0, count($grid[$max_index]),\
    \ 0);\n    $max = 0;\n    $max_index = 0;\n    foreach ($grid as $key => $value)\
    \ {\n        $sum = array_sum($value);\n        if ($sum > $max) {\n         \
    \   $max = $sum;\n            $max_index = $key;\n        }\n    }\n    $max_index_array[]\
    \ = $max_index;\n    $count += $max;\n    $grid[$max_index] = array_fill(0, count($grid[$max_index]),\
    \ 0);\n    $max = 0;\n    $max_index = 0;\n    foreach ($grid as $key => $value)\
    \ {\n        $sum = array_sum($value);\n        if ($sum > $max) {\n         \
    \   $max = $sum;\n            $max_index = $key;\n        }\n    }\n    $max_index_array[]\
    \ = $max_index;\n    $count += $max;\n    $grid[$max_index] = array_fill(0, count",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $max_row = $row_count - 1;\n    $max_col = $col_count - 1;\n    $row = 0;\n\
    \    $col = 0;\n    while ($row <= $max_row) {\n        if ($grid[$row][$col]\
    \ == 1) {\n            $grid[$row][$col] = 0;\n            $count++;\n       \
    \ }\n        if ($col == $max_col) {\n            $row++;\n            $col =\
    \ 0;\n        } else {\n            $col++;\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_max = array_fill(0, $row_count, 0);\n    $col_max = array_fill(0, $col_count,\
    \ 0);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n    \
    \        $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $count += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $count;\n}\necho max_fill(array(array(0, 0, 1, 0),\
    \ array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\\
    n\";\necho max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5) . \"\\n\";", " \
    \   $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ $max_row = 0;\n    $max_col = 0;\n    $max_row_count = 0;\n    $max_col_count\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        $row_count = 0;\n      \
    \  for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n \
    \               $row_count++;\n            }\n        }\n        if ($row_count\
    \ > $max_row_count) {\n            $max_row_count = $row_count;\n            $max_row\
    \ = $i;\n        }\n    }\n    for ($j = 0; $j < $cols; $j++) {\n        $col_count\
    \ = 0;\n        for ($i = 0; $i < $rows; $i++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $col_count++;\n            }\n        }\n        if\
    \ ($col_count > $max_col_count) {\n            $max_col_count = $col_count;\n\
    \            $max_col = $j;\n        }\n    }\n    if ($max_row_count > $max_col_count)\
    \ {\n        $count += $max_row_count;\n        for ($i = 0; $i < $rows; $i++)\
    \ {\n            if ($i != $max_row) {\n                $count += $capacity;\n\
    \            }\n        }\n    } else {\n        $count += $max_col_count;\n \
    \       for ($j = 0; $j < $cols; $j++) {\n            if ($j != $max_col) {\n\
    \                $count += $capacity;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n", "    $max_fill = 0;\n    $grid_length = count($grid);\n    $grid_width\
    \ = count($grid[0]);\n    $grid_length_width = $grid_length * $grid_width;\n \
    \   $grid_length_width_capacity = $grid_length_width * $capacity;\n    $grid_length_width_capacity_max_fill\
    \ = $grid_length_width_capacity + $max_fill;\n    while ($max_fill < $grid_length_width_capacity_max_fill)\
    \ {\n        $max_fill++;\n        $grid_length_width_capacity_max_fill = $grid_length_width_capacity\
    \ + $max_fill;\n        for ($i = 0; $i < $grid_length; $i++) {\n            for\
    \ ($j = 0; $j < $grid_width; $j++) {\n                if ($grid[$i][$j] == 1)\
    \ {\n                    $grid[$i][$j] = 0;\n                    if ($i + 1 <\
    \ $grid_length) {\n                        $grid[$i + 1][$j] = 1;\n          \
    \          }\n                    if ($j + 1 < $grid_width) {\n              \
    \          $grid[$i][$j + 1] = 1;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\n", "    $wells = count($grid);\n\
    \    $units = count($grid[0]);\n    $result = 0;\n    $buckets = array_fill(0,\
    \ $wells, 0);\n    for ($i = 0; $i < $units; $i++) {\n        for ($j = 0; $j\
    \ < $wells; $j++) {\n            if ($grid[$j][$i] == 1) {\n                $buckets[$j]++;\n\
    \            }\n        }\n        $result += max($buckets);\n    }\n    return\
    \ $result;\n}\n", "    $count = 0;\n    $grid_size = count($grid);\n    $well_size\
    \ = count($grid[0]);\n    $well_count = $grid_size * $well_size;\n    $wells =\
    \ [];\n    for ($i = 0; $i < $grid_size; $i++) {\n        for ($j = 0; $j < $well_size;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $wells[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    $well_count = count($wells);\n  \
    \  while (count($wells) > 0) {\n        $count++;\n        $wells_to_remove =\
    \ [];\n        foreach ($wells as $well) {\n            if ($grid[$well[0]][$well[1]]\
    \ > 0) {\n                $grid[$well[0]][$well[1]] -= $capacity;\n          \
    \      if ($grid[$well[0]][$well[1]] <= 0) {\n                    $wells_to_remove[]\
    \ = $well;\n                }\n            }\n        }\n        foreach ($wells_to_remove\
    \ as $well) {\n            $wells = array_filter($wells, function($w) use ($well)\
    \ {\n                return $w[0] != $well[0] || $w[1] != $well[1];\n        \
    \    });\n        }\n    }\n    return $count;\n}\n\n$grid = [\n    [0, 0, 1,\
    \ 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n];\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = [\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n \
    \   [1, 1, 1, 1],\n    [0, 1, 1, 1]\n];\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = [\n    [0, 0, 0],\n    [0, 0, 0]", "    $count\
    \ = 0;\n    $grid = array_reverse($grid);\n    $wells = array_map('array_sum',\
    \ $grid);\n    foreach ($wells as $well) {\n        $count += floor($well / $capacity);\n\
    \        $count += $well % $capacity > 0 ? 1 : 0;\n    }\n    return $count;\n\
    }\n", "    $max_fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    $max_val = 0;\n    for ($i = 0; $i\
    \ < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ > $max_val) {\n                $max_val = $grid[$i][$j];\n                $max_row\
    \ = $i;\n                $max_col = $j;\n            }\n        }\n    }\n   \
    \ $count += $max_val;\n    $grid[$max_row][$max_col] = 0;\n    $max_val = 0;\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n\
    \        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] > $max_val)\
    \ {\n                $max_val = $grid[$i][$j];\n                $max_row = $i;\n\
    \                $max_col = $j;\n            }\n        }\n    }\n    $count +=\
    \ $max_val;\n    $grid[$max_row][$max_col] = 0;\n    $max_val = 0;\n    $max_row\
    \ = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] > $max_val) {\n    \
    \            $max_val = $grid[$i][$j];\n                $max_row = $i;\n     \
    \           $max_col = $j;\n            }\n        }\n    }\n    $count += $max_val;\n\
    \    $grid[$max_row][$max_col] = 0;\n    $max_val = 0;\n    $max_row =", "   \
    \ $max_fill = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        $max_fill\
    \ += max_fill_row($grid[$i], $capacity);\n    }\n    return $max_fill;\n}\n",
  "    $fill = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] == 1) {\n     \
    \           $wells[] = [$i, $j];\n            }\n        }\n    }\n    $well_count\
    \ = count($wells);\n    for ($i = 0; $i < $well_count; $i++) {\n        $well\
    \ = $wells[$i];\n        $row = $well[0];\n        $col = $well[1];\n        $fill\
    \ += $capacity;\n        for ($j = $i + 1; $j < $well_count; $j++) {\n       \
    \     $well = $wells[$j];\n            $row2 = $well[0];\n            $col2 =\
    \ $well[1];\n            if ($row2 == $row) {\n                $fill += $capacity;\n\
    \            } else {\n                break;\n            }\n        }\n    }\n\
    \    return $fill;\n}\n", "    $count = 0;\n    $row = count($grid);\n    $col\
    \ = count($grid[0]);\n    $max = 0;\n    for ($i = 0; $i < $row; $i++) {\n   \
    \     for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $count++;\n            }\n        }\n        $max = max($max,\
    \ $count);\n        $count = 0;\n    }\n    return $max * $capacity;\n}", "  \
    \  $total = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_max = array_fill(0, $row_count, 0);\n    $col_max = array_fill(0, $col_count,\
    \ 0);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n    \
    \        $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $total += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $total * $capacity;\n}\n", "    $count = 0;\n  \
    \  $row = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0; $i < $row;\
    \ $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n            }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n\
    $capacity = 5;\necho max_fill($grid, $capacity);\necho \"\\n\";", "    $count\
    \ = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    $grid_height = max(array_map('max', $grid));\n    for ($i = 0; $i < $grid_height;\
    \ $i++) {\n        for ($j = 0; $j < $grid_length; $j++) {\n            for ($k\
    \ = 0; $k < $grid_width; $k++) {\n                if ($grid[$j][$k] > 0) {\n \
    \                   $grid[$j][$k]--;\n                    $count++;\n        \
    \        }\n            }\n        }\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $buckets\
    \ = array_fill(0, $rows, $capacity);\n    $col = 0;\n    while ($col < $cols)\
    \ {\n        $row = 0;\n        while ($row < $rows) {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $buckets[$row]--;\n                $count++;\n    \
    \        }\n            $row++;\n        }\n        $col++;\n    }\n    return\
    \ $count;\n}\n", "    $result = 0;\n    $len = count($grid);\n    $width = count($grid[0]);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        for ($j = 0; $j < $width; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $result += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i - 1 >= 0 && $grid[$i\
    \ - 1][$j] == 1) {\n                    $grid[$i - 1][$j] = 0;\n             \
    \   }\n                if ($i + 1 < $len && $grid[$i + 1][$j] == 1) {\n      \
    \              $grid[$i + 1][$j] = 0;\n                }\n                if ($j\
    \ - 1 >= 0 && $grid[$i][$j - 1] == 1) {\n                    $grid[$i][$j - 1]\
    \ = 0;\n                }\n                if ($j + 1 < $width && $grid[$i][$j\
    \ + 1] == 1) {\n                    $grid[$i][$j + 1] = 0;\n                }\n\
    \            }\n        }\n    }\n    return $result;\n}\n\necho max_fill(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\\
    n\";\necho max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5) . \"\\n\";", " \
    \   $times = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $times += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $times;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_row\
    \ = 0;\n    $max_col = 0;\n    $max_row_count = 0;\n    $max_col_count = 0;\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        $row_count = 0;\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n          \
    \      $row_count++;\n            }\n        }\n        if ($row_count > $max_row_count)\
    \ {\n            $max_row_count = $row_count;\n            $max_row = $i;\n  \
    \      }\n    }\n    for ($j = 0; $j < $cols; $j++) {\n        $col_count = 0;\n\
    \        for ($i = 0; $i < $rows; $i++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $col_count++;\n            }\n        }\n        if ($col_count\
    \ > $max_col_count) {\n            $max_col_count = $col_count;\n            $max_col\
    \ = $j;\n        }\n    }\n    if ($max_row_count > $max_col_count) {\n      \
    \  for ($i = 0; $i < $rows; $i++) {\n            if ($grid[$i][$max_col] == 1)\
    \ {\n                $count++;\n            }\n        }\n    } else {\n     \
    \   for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$max_row][$j] == 1)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n\
    \        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $max_row = max($max_row, $i);\n                $max_col =\
    \ max($max_col, $j);\n            }\n        }\n    }\n    for ($i = 0; $i <=\
    \ $max_row; $i++) {\n        for ($j = 0; $j <= $max_col; $j++) {\n          \
    \  if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n         \
    \   }\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    $row = 0;\n    $col = 0;\n\
    \    $max = 0;\n    $max_row = 0;\n    $max_col = 0;\n    $grid_copy = $grid;\n\
    \    while ($row < $rows) {\n        $col = 0;\n        while ($col < $cols) {\n\
    \            if ($grid[$row][$col] == 1) {\n                $grid_copy[$row][$col]\
    \ = 0;\n                $count++;\n            }\n            $col++;\n      \
    \  }\n        $row++;\n    }\n    $row = 0;\n    while ($row < $rows) {\n    \
    \    $col = 0;\n        while ($col < $cols) {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $grid_copy[$row][$col] = 1;\n                $count++;\n\
    \                $grid_copy = fill_grid($grid_copy, $capacity);\n            \
    \    $grid_copy = empty_grid($grid_copy);\n                $grid_copy = fill_grid($grid_copy,\
    \ $capacity);\n                $grid_copy = empty_grid($grid_copy);\n        \
    \        $grid_copy = fill_grid($grid_copy, $capacity);\n                $grid_copy\
    \ = empty_grid($grid_copy);\n                $grid_copy = fill_grid($grid_copy,\
    \ $capacity);\n                $grid_copy = empty_grid($grid_copy);\n        \
    \        $grid_copy = fill_grid($grid_copy, $capacity);\n                $grid_copy\
    \ = empty_grid($grid_copy);\n                $grid_copy = fill_grid($grid_copy,\
    \ $capacity);\n                $grid_copy = empty_grid($grid_copy);\n        \
    \        $grid_copy = fill_grid($grid_copy, $capacity);\n                $grid_copy\
    \ = empty_grid($grid_copy);\n                $grid_copy = fill_grid($grid_copy,\
    \ $capacity);\n                $grid_copy = empty_grid($grid_copy);\n        \
    \        $grid_copy = fill_grid($grid_copy,", "    $rows = count($grid);\n   \
    \ $cols = count($grid[0]);\n    $count = 0;\n    for ($i = 0; $i < $rows; $i++)\
    \ {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $count++;\n                $grid[$i][$j] = 0;\n      \
    \          $queue = [[$i, $j]];\n                while (count($queue) > 0) {\n\
    \                    $curr = array_shift($queue);\n                    $curr_i\
    \ = $curr[0];\n                    $curr_j = $curr[1];\n                    if\
    \ ($curr_i > 0 && $grid[$curr_i - 1][$curr_j] == 1) {\n                      \
    \  $grid[$curr_i - 1][$curr_j] = 0;\n                        array_push($queue,\
    \ [$curr_i - 1, $curr_j]);\n                    }\n                    if ($curr_i\
    \ < $rows - 1 && $grid[$curr_i + 1][$curr_j] == 1) {\n                       \
    \ $grid[$curr_i + 1][$curr_j] = 0;\n                        array_push($queue,\
    \ [$curr_i + 1, $curr_j]);\n                    }\n                    if ($curr_j\
    \ > 0 && $grid[$curr_i][$curr_j - 1] == 1) {\n                        $grid[$curr_i][$curr_j\
    \ - 1] = 0;\n                        array_push($queue, [$curr_i, $curr_j - 1]);\n\
    \                    }\n                    if ($curr_j < $cols - 1 && $grid[$curr_i][$curr_j\
    \ + 1] == 1) {\n                        $grid[$curr_i][$curr_j + 1] = 0;\n   \
    \                     array_push($queue, [$curr_i, $curr_j + 1]);\n          \
    \          }\n                }\n            }\n        }\n    }\n    return $count\
    \ * $capacity", "    $count = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $grid_copy = $grid;\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid_copy[$i][$j]\
    \ == 1) {\n                $count++;\n                $grid_copy = fill($grid_copy,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $wells = count($grid);\n    $units = count($grid[0]);\n  \
    \  $buckets = array_fill(0, $wells, $capacity);\n    for ($i = 0; $i < $units;\
    \ $i++) {\n        for ($j = 0; $j < $wells; $j++) {\n            if ($grid[$j][$i]\
    \ == 1) {\n                $buckets[$j]--;\n                if ($buckets[$j] <\
    \ 0) {\n                    $count++;\n                    $buckets[$j] = $capacity\
    \ - 1;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] === 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i -\
    \ 1][$j] === 1) {\n                    $grid[$i - 1][$j] = 0;\n              \
    \  }\n                if ($j > 0 && $grid[$i][$j - 1] === 1) {\n             \
    \       $grid[$i][$j - 1] = 0;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max\
    \ = max($max, $i);\n            }\n        }\n    }\n    return $max * $capacity;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n\
    \                $count++;\n                $queue = [[$i, $j]];\n           \
    \     while (count($queue) > 0) {\n                    $current = array_shift($queue);\n\
    \                    $row = $current[0];\n                    $col = $current[1];\n\
    \                    if ($row > 0 && $grid[$row - 1][$col] == 1) {\n         \
    \               $grid[$row - 1][$col] = 0;\n                        $queue[] =\
    \ [$row - 1, $col];\n                    }\n                    if ($row < $rows\
    \ - 1 && $grid[$row + 1][$col] == 1) {\n                        $grid[$row + 1][$col]\
    \ = 0;\n                        $queue[] = [$row + 1, $col];\n               \
    \     }\n                    if ($col > 0 && $grid[$row][$col - 1] == 1) {\n \
    \                       $grid[$row][$col - 1] = 0;\n                        $queue[]\
    \ = [$row, $col - 1];\n                    }\n                    if ($col < $cols\
    \ - 1 && $grid[$row][$col + 1] == 1) {\n                        $grid[$row][$col\
    \ + 1] = 0;\n                        $queue[] = [$row, $col + 1];\n          \
    \          }\n                }\n            }\n        }\n    }\n    return $count\
    \ * $capacity;\n}\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $max_height = 0;\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        $max_height = max($max_height, max($grid[$i]));\n    }\n  \
    \  for ($i = 0; $i < $max_height; $i++) {\n        for ($j = 0; $j < $row_count;\
    \ $j++) {\n            for ($k = 0; $k < $col_count; $k++) {\n               \
    \ if ($grid[$j][$k] > 0) {\n                    $grid[$j][$k]--;\n           \
    \         $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $row_max = array_fill(0, $row_count, 0);\n    $col_max\
    \ = array_fill(0, $col_count, 0);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            $row_max[$i] = max($row_max[$i],\
    \ $grid[$i][$j]);\n            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n\
    \        }\n    }\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            $count += min($row_max[$i], $col_max[$j])\
    \ - $grid[$i][$j];\n        }\n    }\n    return $count * $capacity;\n}\n", " \
    \   $max_fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $row_count = array_fill(0, $rows, 0);\n    $col_count = array_fill(0, $cols,\
    \ 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $row_count[$i]++;\n\
    \                $col_count[$j]++;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $rows; $i++) {\n        $count += max(0, $row_count[$i] - $capacity);\n\
    \    }\n    for ($i = 0; $i < $cols; $i++) {\n        $count += max(0, $col_count[$i]\
    \ - $capacity);\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n\
    $capacity = 5;\necho max_fill($grid, $capacity);\necho \"\\n\";", "    $rows =\
    \ count($grid);\n    $cols = count($grid[0]);\n    $total = 0;\n    for ($i =\
    \ 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n         \
    \   if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n        \
    \    }\n        }\n    }\n    return $total;\n}\n", "    $grid = array_map(function($row)\
    \ {\n        return array_map(function($cell) {\n            return $cell * $capacity;\n\
    \        }, $row);\n    }, $grid);\n    $grid = array_map(function($row) {\n \
    \       return array_map(function($cell) {\n            return $cell - $cell %\
    \ 2;\n        }, $row);\n    }, $grid);\n    $grid = array_map(function($row)\
    \ {\n        return array_map(function($cell) {\n            return $cell / 2;\n\
    \        }, $row);\n    }, $grid);\n    $grid = array_map(function($row) {\n \
    \       return array_map(function($cell) {\n            return $cell + $cell %\
    \ 2;\n        }, $row);\n    }, $grid);\n    $grid = array_map(function($row)\
    \ {\n        return array_map(function($cell) {\n            return $cell / 2;\n\
    \        }, $row);\n    }, $grid);\n    $grid = array_map(function($row) {\n \
    \       return array_map(function($cell) {\n            return $cell + $cell %\
    \ 2;\n        }, $row);\n    }, $grid);\n    $grid = array_map(function($row)\
    \ {\n        return array_map(function($cell) {\n            return $cell / 2;\n\
    \        }, $row);\n    }, $grid);\n    $grid = array_map(function($row) {\n \
    \       return array_map(function($cell) {\n            return $cell + $cell %\
    \ 2;\n        }, $row);\n    }, $grid);\n    $grid = array_map(function($row)\
    \ {\n        return array_map(function($cell) {\n            return $cell / 2;\n\
    \        }, $row);\n    }, $grid);\n    $grid = array_map(function($row) {\n \
    \       return array_map(function($cell) {\n            return $cell + $cell %\
    \ 2;\n        }, $row);\n    }, $grid);\n    $grid = array_map(function($row)\
    \ {\n        return array_map(function($cell) {\n            return $cell / 2;\n\
    \       ", "    $wells = count($grid);\n    $width = count($grid[0]);\n    $fill\
    \ = 0;\n    $buckets = 0;\n    for ($i = 0; $i < $wells; $i++) {\n        for\
    \ ($j = 0; $j < $width; $j++) {\n            if ($grid[$i][$j] === 1) {\n    \
    \            $fill++;\n                if ($fill === $capacity) {\n          \
    \          $buckets++;\n                    $fill = 0;\n                }\n  \
    \          }\n        }\n    }\n    return $buckets;\n}\n", "    $fill_count =\
    \ 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for\
    \ ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $fill_count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0) {\n         \
    \           $grid[$i - 1][$j] = 0;\n                }\n                if ($i\
    \ < $row_count - 1) {\n                    $grid[$i + 1][$j] = 0;\n          \
    \      }\n                if ($j > 0) {\n                    $grid[$i][$j - 1]\
    \ = 0;\n                }\n                if ($j < $col_count - 1) {\n      \
    \              $grid[$i][$j + 1] = 0;\n                }\n            }\n    \
    \    }\n    }\n    return $fill_count;\n}\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_index = 0;\n  \
    \  $col_index = 0;\n    while ($row_index < $row_count) {\n        $col_index\
    \ = 0;\n        while ($col_index < $col_count) {\n            if ($grid[$row_index][$col_index]\
    \ == 1) {\n                $count++;\n                $grid[$row_index][$col_index]\
    \ = 0;\n                $col_index++;\n                $capacity--;\n        \
    \        if ($capacity == 0) {\n                    break;\n                }\n\
    \            } else {\n                $col_index++;\n            }\n        }\n\
    \        $row_index++;\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n\
    $capacity = 5;\necho max_fill($grid, $capacity);\necho \"\\n\";", "    $num_rows\
    \ = count($grid);\n    $num_cols = count($grid[0]);\n    $num_buckets = 0;\n \
    \   $num_buckets_per_row = 0;\n    for ($i = 0; $i < $num_rows; $i++) {\n    \
    \    $num_buckets_per_row = 0;\n        for ($j = 0; $j < $num_cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $num_buckets_per_row++;\n\
    \            }\n        }\n        $num_buckets += ceil($num_buckets_per_row /\
    \ $capacity);\n    }\n    return $num_buckets;\n}\n", "    $count = 0;\n    $max\
    \ = 0;\n    $max_index = 0;\n    $max_row = 0;\n    $max_col = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ > $max) {\n                $max = $grid[$i][$j];\n                $max_index\
    \ = $j;\n                $max_row = $i;\n                $max_col = $j;\n    \
    \        }\n        }\n    }\n    $count += $max;\n    $grid[$max_row][$max_col]\
    \ = 0;\n    $max = 0;\n    $max_index = 0;\n    $max_row = 0;\n    $max_col =\
    \ 0;\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] > $max) {\n                $max = $grid[$i][$j];\n\
    \                $max_index = $j;\n                $max_row = $i;\n          \
    \      $max_col = $j;\n            }\n        }\n    }\n    $count += $max;\n\
    \    $grid[$max_row][$max_col] = 0;\n    $max = 0;\n    $max_index = 0;\n    $max_row\
    \ = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $row_count; $i++) {\n       \
    \ for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] > $max)\
    \ {\n                $max = $grid[$i][$j];\n                $max_index = $j;\n\
    \                $max_row = $i;\n                $max_col = $j;\n            }\n\
    \        }", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n\
    \                $count++;\n                $bucket = $capacity;\n           \
    \     $bucket = fill_bucket($grid, $i, $j, $bucket);\n                while ($bucket\
    \ > 0) {\n                    $bucket = fill_bucket($grid, $i, $j, $bucket);\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $max_fill_count = 0;\n\
    \    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n    $grid_size\
    \ = $grid_length * $grid_width;\n    $grid_index = 0;\n    $grid_index_max = $grid_size\
    \ - 1;\n    while ($grid_index <= $grid_index_max) {\n        $grid_row = floor($grid_index\
    \ / $grid_width);\n        $grid_column = $grid_index % $grid_width;\n       \
    \ $grid_value = $grid[$grid_row][$grid_column];\n        if ($grid_value === 1)\
    \ {\n            $grid[$grid_row][$grid_column] = 0;\n            $max_fill +=\
    \ $capacity;\n            $max_fill_count++;\n        }\n        $grid_index++;\n\
    \    }\n    return $max_fill_count;\n}\n$grid = array(\n    array(0, 0, 1, 0),\n\
    \    array(0, 1, 0, 0),\n    array(1, 1, 1, 1)\n);\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n$grid = array(\n    array(0, 0, 1, 1),\n    array(0,\
    \ 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0, 1, 1, 1)\n);\n$capacity = 2;\n\
    echo max_fill($grid, $capacity) . \"\\n\";\n$grid = array(\n    array(0, 0, 0),\n\
    \    array(0, 0, 0)\n);\n$capacity = 5;\necho max_fill($grid, $capacity) . \"\\\
    n\";", "    $count = 0;\n    $max_fill = 0;\n    $max_fill_index = 0;\n    $max_fill_row\
    \ = 0;\n    $max_fill_col = 0;\n    $max_fill_row_count = 0;\n    $max_fill_col_count\
    \ = 0;\n    $max_fill_row_index = 0;\n    $max_fill_col_index = 0;\n    $max_fill_row_index_count\
    \ = 0;\n    $max_fill_col_index_count = 0;\n    $max_fill_row_index_count_max\
    \ = 0;\n    $max_fill_col_index_count_max = 0;\n    $max_fill_row_index_count_max_index\
    \ = 0;\n    $max_fill_col_index_count_max_index = 0;\n    $max_fill_row_index_count_max_index_count\
    \ = 0;\n    $max_fill_col_index_count_max_index_count = 0;\n    $max_fill_row_index_count_max_index_count_max\
    \ = 0;\n    $max_fill_col_index_count_max_index_count_max = 0;\n    $max_fill_row_index_count_max_index_count_max_index\
    \ = 0;\n    $max_fill_col_index_count_max_index_count_max_index = 0;\n    $max_fill_row_index_count_max_index_count_max_index_count\
    \ = 0;\n    $max_fill_col_index_count_max_index_count_max_index_count = 0;\n \
    \   $max_fill_row_index_count_max_index_count_max_index_count_max = 0;\n    $max_fill_col_index_count_max_index_count_max_index_count_max\
    \ = 0;\n    $max_fill_row_index_count_max_index_count_max_index_count_max_index\
    \ = 0;\n    $max_fill_col_index_count_max_index_count_max_index_count_max_index",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_row\
    \ = 0;\n    $max_col = 0;\n    $max_row_count = 0;\n    $max_col_count = 0;\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        $row_count = 0;\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n          \
    \      $row_count++;\n            }\n        }\n        if ($row_count > $max_row_count)\
    \ {\n            $max_row_count = $row_count;\n            $max_row = $i;\n  \
    \      }\n    }\n    for ($j = 0; $j < $cols; $j++) {\n        $col_count = 0;\n\
    \        for ($i = 0; $i < $rows; $i++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $col_count++;\n            }\n        }\n        if ($col_count\
    \ > $max_col_count) {\n            $max_col_count = $col_count;\n            $max_col\
    \ = $j;\n        }\n    }\n    if ($max_row_count > $max_col_count) {\n      \
    \  $count += $max_row_count;\n        for ($i = 0; $i < $rows; $i++) {\n     \
    \       if ($i != $max_row) {\n                $count += $capacity;\n        \
    \    }\n        }\n    } else {\n        $count += $max_col_count;\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($j != $max_col) {\n          \
    \      $count += $capacity;\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_index = 0;\n    $col_index = 0;\n    $row_max = 0;\n    $col_max = 0;\n\
    \    $row_min = $capacity;\n    $col_min = $capacity;\n    while ($row_index <\
    \ $row_count) {\n        $col_index = 0;\n        while ($col_index < $col_count)\
    \ {\n            if ($grid[$row_index][$col_index] == 1) {\n                $row_max\
    \ = max($row_max, $row_index);\n                $col_max = max($col_max, $col_index);\n\
    \                $row_min = min($row_min, $row_index);\n                $col_min\
    \ = min($col_min, $col_index);\n            }\n            $col_index++;\n   \
    \     }\n        $row_index++;\n    }\n    $row_index = $row_min;\n    while ($row_index\
    \ <= $row_max) {\n        $col_index = $col_min;\n        while ($col_index <=\
    \ $col_max) {\n            if ($grid[$row_index][$col_index] == 1) {\n       \
    \         $count++;\n            }\n            $col_index++;\n        }\n   \
    \     $row_index++;\n    }\n    return $count;\n}", "    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $fill = 0;\n    $i = 0;\n    $j = 0;\n    while\
    \ ($i < $rows) {\n        $j = 0;\n        while ($j < $cols) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $fill += $capacity;\n              \
    \  $grid[$i][$j] = 0;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return $fill;\n}\n", "    $count = 0;\n    $max = 0;\n    $max_index\
    \ = 0;\n    $max_index_array = [];\n    $grid_length = count($grid);\n    $grid_length_2\
    \ = count($grid[0]);\n    for ($i = 0; $i < $grid_length; $i++) {\n        for\
    \ ($j = 0; $j < $grid_length_2; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $count++;\n            }\n        }\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $max_index = $i;\n        }\n   \
    \     $max_index_array[] = $max_index;\n        $count = 0;\n    }\n    $max_index_array\
    \ = array_unique($max_index_array);\n    $max_index_array = array_values($max_index_array);\n\
    \    $max_index_array_length = count($max_index_array);\n    $count = 0;\n   \
    \ for ($i = 0; $i < $max_index_array_length; $i++) {\n        for ($j = 0; $j\
    \ < $grid_length_2; $j++) {\n            if ($grid[$max_index_array[$i]][$j] ==\
    \ 1) {\n                $count++;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid\
    \ = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1,\
    \ 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid\
    \ = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $buckets = array_fill(0, $rows, $capacity);\n    $count = 0;\n    while (true)\
    \ {\n        $filled = false;\n        for ($i = 0; $i < $rows; $i++) {\n    \
    \        for ($j = 0; $j < $cols; $j++) {\n                if ($grid[$i][$j] ==\
    \ 1 && $buckets[$i] > 0) {\n                    $buckets[$i]--;\n            \
    \        $grid[$i][$j] = 0;\n                    $filled = true;\n           \
    \     }\n            }\n        }\n        if (!$filled) {\n            break;\n\
    \        }\n        $count++;\n    }\n    return $count;\n}\n", "    $count =\
    \ 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    $well_count\
    \ = $row_count * $col_count;\n    $wells = [];\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            $wells[]\
    \ = $grid[$i][$j];\n        }\n    }\n    while (array_sum($wells) > 0) {\n  \
    \      $count++;\n        for ($i = 0; $i < $well_count; $i++) {\n           \
    \ if ($wells[$i] > 0) {\n                $wells[$i] -= $capacity;\n          \
    \      if ($wells[$i] < 0) {\n                    $wells[$i] = 0;\n          \
    \      }\n            }\n        }\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i =\
    \ 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n         \
    \   if ($grid[$i][$j] == 1) {\n                $count++;\n                $grid[$i][$j]\
    \ = 0;\n                $bucket = $capacity;\n                while ($bucket >\
    \ 0) {\n                    if ($i - 1 >= 0 && $grid[$i - 1][$j] == 1) {\n   \
    \                     $grid[$i - 1][$j] = 0;\n                        $bucket--;\n\
    \                    }\n                    if ($i + 1 < $rows && $grid[$i + 1][$j]\
    \ == 1) {\n                        $grid[$i + 1][$j] = 0;\n                  \
    \      $bucket--;\n                    }\n                    if ($j - 1 >= 0\
    \ && $grid[$i][$j - 1] == 1) {\n                        $grid[$i][$j - 1] = 0;\n\
    \                        $bucket--;\n                    }\n                 \
    \   if ($j + 1 < $cols && $grid[$i][$j + 1] == 1) {\n                        $grid[$i][$j\
    \ + 1] = 0;\n                        $bucket--;\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return $count;\n}\n\n$grid\
    \ = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(array(0, 0,\
    \ 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n\n$grid = array(array(0, 0,\
    \ 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity)", "  \
    \  // Your code here\n}\n", "    $count = 0;\n    foreach ($grid as $row) {\n\
    \        $count += max_fill_row($row, $capacity);\n    }\n    return $count;\n\
    }\n", "    $max_fill = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $capacity, $i, $j);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $max = 0;\n    for ($i = 0; $i < count($grid); $i++)\
    \ {\n        $max = max($max, max($grid[$i]));\n    }\n    for ($i = 0; $i < $max;\
    \ $i++) {\n        $count += count(array_filter($grid, function($row) use ($i)\
    \ {\n            return $row[$i] == 1;\n        }));\n    }\n    return $count;\n\
    }\n", "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max_fill\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
