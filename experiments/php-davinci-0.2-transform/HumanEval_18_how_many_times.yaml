name: HumanEval_18_how_many_times
language: php
prompt: "<?php\n// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n//\
  \ >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\"\
  )\n// 3\nfunction how_many_times($string, $substring) {\n"
tests: "function candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
  \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if (substr($string, $i, strlen($substring)) == $substring) {\n       \
    \     $count++;\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n\
    \    $string_length = strlen($string);\n    $substring_length = strlen($substring);\n\
    \    for ($i = 0; $i < $string_length; $i++) {\n        if (substr($string, $i,\
    \ $substring_length) == $substring) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n", "  $count = 0;\n  $string_length = strlen($string);\n\
    \  $substring_length = strlen($substring);\n  for ($i = 0; $i < $string_length;\
    \ $i++) {\n    if (substr($string, $i, $substring_length) == $substring) {\n \
    \     $count++;\n    }\n  }\n  return $count;\n}\n", "    $count = 0;\n    $pos\
    \ = 0;\n    while (($pos = strpos($string, $substring, $pos)) !== false) {\n \
    \       $count++;\n        $pos++;\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $offset = 0;\n    while (($offset = strpos($string, $substring, $offset))\
    \ !== false) {\n        $count++;\n        $offset++;\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $pos = 0;\n    while (($pos = strpos($string, $substring,\
    \ $pos)) !== false) {\n        $count++;\n        $pos++;\n    }\n    return $count;\n\
    }\n", "\t$count = 0;\n\t$i = 0;\n\twhile ($i < strlen($string)) {\n\t\tif (substr($string,\
    \ $i, strlen($substring)) == $substring) {\n\t\t\t$count++;\n\t\t\t$i += strlen($substring);\n\
    \t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $count;\n}\n", "\t$count = 0;\n\
    \t$pos = 0;\n\twhile (($pos = strpos($string, $substring, $pos)) !== false) {\n\
    \t\t$count++;\n\t\t$pos++;\n\t}\n\treturn $count;\n}\n", "    $count = 0;\n  \
    \  $string_length = strlen($string);\n    $substring_length = strlen($substring);\n\
    \    for ($i = 0; $i < $string_length; $i++) {\n        if (substr($string, $i,\
    \ $substring_length) == $substring) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n", "    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (substr($string, $i, strlen($substring)) == $substring)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\n", "\t$count\
    \ = 0;\n\t$string_length = strlen($string);\n\t$substring_length = strlen($substring);\n\
    \tfor ($i = 0; $i < $string_length; $i++) {\n\t\tif (substr($string, $i, $substring_length)\
    \ == $substring) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho how_many_times(\"\
    \", \"a\") . \"\\n\";\necho how_many_times(\"aaa\", \"a\") . \"\\n\";\necho how_many_times(\"\
    aaaa\", \"aa\") . \"\\n\";", "    $count = 0;\n    $string_length = strlen($string);\n\
    \    $substring_length = strlen($substring);\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        if (substr($string, $i, $substring_length) == $substring) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n", "    $count\
    \ = 0;\n    $pos = 0;\n    while (($pos = strpos($string, $substring, $pos)) !==\
    \ false) {\n        $count++;\n        $pos += strlen($substring);\n    }\n  \
    \  return $count;\n}\n", "    $count = 0;\n    $start = 0;\n    while (($start\
    \ = strpos($string, $substring, $start)) !== false) {\n        $count++;\n   \
    \     $start++;\n    }\n    return $count;\n}\n", "    $count = 0;\n    $string_length\
    \ = strlen($string);\n    $substring_length = strlen($substring);\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        if (substr($string, $i, $substring_length)\
    \ == $substring) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   if (substr($string, $i, strlen($substring)) == $substring) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n  \
    \  $start = 0;\n    while ($start < strlen($string)) {\n        $pos = strpos($string,\
    \ $substring, $start);\n        if ($pos === false) {\n            break;\n  \
    \      }\n        $count++;\n        $start = $pos + 1;\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $pos = 0;\n    while (($pos = strpos($string, $substring,\
    \ $pos)) !== false) {\n        $count++;\n        $pos++;\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   if ($string[$i] == $substring[0]) {\n            $is_substring = true;\n \
    \           for ($j = 0; $j < strlen($substring); $j++) {\n                if\
    \ ($string[$i + $j] != $substring[$j]) {\n                    $is_substring =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if ($is_substring) {\n                $count++;\n            }\n     \
    \   }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $substring_length\
    \ = strlen($substring);\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if (substr($string, $i, $substring_length) == $substring) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
