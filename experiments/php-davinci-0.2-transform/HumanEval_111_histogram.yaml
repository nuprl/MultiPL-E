name: HumanEval_111_histogram
language: php
prompt: "<?php\n// Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n// of the letter with the most repetition and containing\
  \ the corresponding count.\n// If several letters have the same occurrence, return\
  \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"\
  b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\"\
  \ => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>>\
  \ histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\n\
  function histogram($test) {\n"
tests: "function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\"\
  ) !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
  \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"b\" => 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"\
  r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $letters = explode(\" \", $test);\n    $count = array_count_values($letters);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "    $arr = explode(\" \", $test);\n\
    \    $count = array_count_values($arr);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "    $test = explode(\" \", $test);\n    $histogram = array();\n    foreach\
    \ ($test as $value) {\n        if (array_key_exists($value, $histogram)) {\n \
    \           $histogram[$value]++;\n        } else {\n            $histogram[$value]\
    \ = 1;\n        }\n    }\n    $max = max($histogram);\n    $result = array();\n\
    \    foreach ($histogram as $key => $value) {\n        if ($value == $max) {\n\
    \            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "\t$letters = explode(\" \", $test);\n\t$counts = array();\n\tforeach ($letters\
    \ as $letter) {\n\t\tif (array_key_exists($letter, $counts)) {\n\t\t\t$counts[$letter]\
    \ += 1;\n\t\t} else {\n\t\t\t$counts[$letter] = 1;\n\t\t}\n\t}\n\t$max = max($counts);\n\
    \t$max_letters = array();\n\tforeach ($counts as $letter => $count) {\n\t\tif\
    \ ($count == $max) {\n\t\t\t$max_letters[$letter] = $count;\n\t\t}\n\t}\n\treturn\
    \ $max_letters;\n}\n", "    $test = explode(\" \", $test);\n    $count = array_count_values($test);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "    $test = explode(\" \", $test);\n    $count = array_count_values($test);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $result = array_filter($result,\
    \ function ($value) use ($max) {\n        return $value == $max;\n    });\n  \
    \  return $result;\n}\n", "    $letters = explode(\" \", $test);\n    $letterCount\
    \ = array();\n    foreach ($letters as $letter) {\n        if (isset($letterCount[$letter]))\
    \ {\n            $letterCount[$letter]++;\n        } else {\n            $letterCount[$letter]\
    \ = 1;\n        }\n    }\n    $max = max($letterCount);\n    $maxLetters = array();\n\
    \    foreach ($letterCount as $letter => $count) {\n        if ($count == $max)\
    \ {\n            $maxLetters[$letter] = $count;\n        }\n    }\n    return\
    \ $maxLetters;\n}\n", "    $test = explode(\" \", $test);\n    $histogram = array();\n\
    \    foreach ($test as $letter) {\n        if (!array_key_exists($letter, $histogram))\
    \ {\n            $histogram[$letter] = 1;\n        } else {\n            $histogram[$letter]++;\n\
    \        }\n    }\n    $max = max($histogram);\n    $max_letters = array();\n\
    \    foreach ($histogram as $letter => $count) {\n        if ($count == $max)\
    \ {\n            $max_letters[$letter] = $count;\n        }\n    }\n    return\
    \ $max_letters;\n}", "    $letters = explode(\" \", $test);\n    $count = array_count_values($letters);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "    $test = explode(\" \", $test);\n\
    \    $histogram = array();\n    foreach ($test as $key => $value) {\n        if\
    \ (array_key_exists($value, $histogram)) {\n            $histogram[$value]++;\n\
    \        } else {\n            $histogram[$value] = 1;\n        }\n    }\n   \
    \ return $histogram;\n}\n\n$test = \"a b c\";\n$test2 = \"a b b a\";\n$test3 =\
    \ \"a b c a b\";\n$test4 = \"b b b b a\";\n$test5 = \"\";\n\necho \"Test 1: \"\
    \ . $test . \"\\n\";\nprint_r(histogram($test));\necho \"Test 2: \" . $test2 .\
    \ \"\\n\";\nprint_r(histogram($test2));\necho \"Test 3: \" . $test3 . \"\\n\"\
    ;\nprint_r(histogram($test3));\necho \"Test 4: \" . $test4 . \"\\n\";\nprint_r(histogram($test4));\n\
    echo \"Test 5: \" . $test5 . \"\\n\";\nprint_r(histogram($test5));\n", "\t$test\
    \ = explode(\" \", $test);\n\t$result = array();\n\tforeach ($test as $key =>\
    \ $value) {\n\t\tif (isset($result[$value])) {\n\t\t\t$result[$value]++;\n\t\t\
    } else {\n\t\t\t$result[$value] = 1;\n\t\t}\n\t}\n\t$max = max($result);\n\tforeach\
    \ ($result as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($result[$key]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "    $test = explode(\" \", $test);\n   \
    \ $result = array();\n    foreach ($test as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n", "    $array = explode(\"\
    \ \", $test);\n    $count = array_count_values($array);\n    $max = max($count);\n\
    \    $result = array();\n    foreach ($count as $key => $value) {\n        if\
    \ ($value == $max) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    return $result;\n}\n", "\t$letters = explode(\" \", $test);\n\t$counts =\
    \ array();\n\tforeach ($letters as $letter) {\n\t\tif (isset($counts[$letter]))\
    \ {\n\t\t\t$counts[$letter]++;\n\t\t} else {\n\t\t\t$counts[$letter] = 1;\n\t\t\
    }\n\t}\n\t$max = 0;\n\tforeach ($counts as $count) {\n\t\tif ($count > $max) {\n\
    \t\t\t$max = $count;\n\t\t}\n\t}\n\t$result = array();\n\tforeach ($counts as\
    \ $letter => $count) {\n\t\tif ($count == $max) {\n\t\t\t$result[$letter] = $count;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "    $test = explode(\" \", $test);\n   \
    \ $count = array_count_values($test);\n    $max = max($count);\n    $result =\
    \ array();\n    foreach ($count as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "    $letters = explode(\" \", $test);\n    $count = array_count_values($letters);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "  $letters = explode(\" \", $test);\n  $counts = array();\n  foreach ($letters\
    \ as $letter) {\n    if (array_key_exists($letter, $counts)) {\n      $counts[$letter]\
    \ += 1;\n    } else {\n      $counts[$letter] = 1;\n    }\n  }\n  $max = max($counts);\n\
    \  $max_letters = array();\n  foreach ($counts as $letter => $count) {\n    if\
    \ ($count == $max) {\n      $max_letters[$letter] = $count;\n    }\n  }\n  return\
    \ $max_letters;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
