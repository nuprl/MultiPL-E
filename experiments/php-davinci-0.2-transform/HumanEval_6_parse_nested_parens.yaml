name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((()))\
  \ () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \            $max_depth = max($max_depth, count($paren_stack));\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_array_len = count($paren_array);\n    $paren_array_result\
    \ = array();\n    for ($i = 0; $i < $paren_array_len; $i++) {\n        $paren_array_result[$i]\
    \ = 0;\n        $paren_array_len_inner = strlen($paren_array[$i]);\n        $paren_array_result_inner\
    \ = 0;\n        for ($j = 0; $j < $paren_array_len_inner; $j++) {\n          \
    \  if ($paren_array[$i][$j] == \"(\") {\n                $paren_array_result_inner++;\n\
    \            } else if ($paren_array[$i][$j] == \")\") {\n                $paren_array_result_inner--;\n\
    \            }\n            if ($paren_array_result_inner > $paren_array_result[$i])\
    \ {\n                $paren_array_result[$i] = $paren_array_result_inner;\n  \
    \          }\n        }\n    }\n    return $paren_array_result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nested_parens = array();\n    foreach\
    \ ($paren_array as $paren_group) {\n        $max_nested_parens[] = get_max_nested_parens($paren_group);\n\
    \    }\n    return $max_nested_parens;\n}\n", "    $paren_array = explode(\" \"\
    , $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i\
    \ = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] ==\
    \ \"(\") {\n                $nesting++;\n            } elseif ($paren_group[$i]\
    \ == \")\") {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        array_push($max_nesting, $max_nesting_in_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"1\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"2\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \"\", $paren_string);\n    $paren_string = str_replace(\"1\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"2\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n            if ($paren_count == 0) {\n\
    \                $paren_max_array[] = $paren_max;\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $max_count = 0;\n    $max_count_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n        } else {\n            $paren_count--;\n      \
    \  }\n        if ($paren_count > $max_count) {\n            $max_count = $paren_count;\n\
    \        }\n        if ($paren_count == 0) {\n            $max_count_array[] =\
    \ $max_count;\n            $max_count = 0;\n        }\n    }\n    return $max_count_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_count_array = parse_nested_parens($paren_string);\n\
    print_r($max_count_array);", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \" ( \", $paren_string);\n  $paren_string = str_replace(\")\", \" ) \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_level = 0;\n    $max_level = 0;\n    $max_level_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            array_push($paren_stack, $paren);\n            $paren_level++;\n\
    \            if ($paren_level > $max_level) {\n                $max_level = $paren_level;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $paren_level--;\n            array_push($max_level_array, $max_level);\n\
    \            $max_level = 0;\n        }\n    }\n    return $max_level_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_level_array = parse_nested_parens($paren_string);\n\
    print_r($max_level_array);", "    $paren_string = trim($paren_string);\n    $paren_arr\
    \ = explode(\" \", $paren_string);\n    $max_level = 0;\n    $result = array();\n\
    \    foreach ($paren_arr as $paren_group) {\n        $level = 0;\n        $len\
    \ = strlen($paren_group);\n        for ($i = 0; $i < $len; $i++) {\n         \
    \   if ($paren_group[$i] == \"(\") {\n                $level++;\n            }\
    \ else {\n                $level--;\n            }\n        }\n        $result[]\
    \ = $level;\n    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strlen', $paren_string);\n \
    \   return $paren_string;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    $paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    $paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())", "  $paren_groups\
    \ = explode(' ', $paren_string);\n  $max_nesting = array();\n  foreach ($paren_groups\
    \ as $group) {\n    $max_nesting[] = count_nested_parens($group);\n  }\n  return\
    \ $max_nesting;\n}\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_array = array_map('intval', $paren_array);\n    return $paren_array;\n\
    }\n", "  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_count = 0;\n  $max_count = 0;\n  $max_count_array\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n\
    \      $paren_count++;\n    } else {\n      $paren_count--;\n    }\n    if ($paren_count\
    \ > $max_count) {\n      $max_count = $paren_count;\n    }\n    if ($paren_count\
    \ == 0) {\n      array_push($max_count_array, $max_count);\n      $max_count =\
    \ 0;\n    }\n  }\n  return $max_count_array;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    $paren_stack = array();\n\
    \    $paren_count = array();\n    $paren_count_index = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n\
    \            $paren_count[$paren_count_index] = count($paren_stack);\n       \
    \     $paren_count_index++;\n        }\n    }\n    return $paren_count;\n}\n\n\
    $paren_string = \"(()()) ((())) () ((())()())\";\n$paren_count = parse_nested_parens($paren_string);\n\
    print_r($paren_count);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $nesting = 0;\n        $max_nesting_level = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $nesting++;\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_level) {\n                $max_nesting_level = $nesting;\n  \
    \          }\n        }\n        $max_nesting[] = $max_nesting_level;\n    }\n\
    \    return $max_nesting;\n}\n", "  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string =", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_level = 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n     \
    \       if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_level--;\n        }\n    }\n    return $paren_max_level;\n}\n", " \
    \   $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n", "  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  $paren_depth_array =\
    \ array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n \
    \     $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n      array_push($paren_stack, $paren);\n    } elseif\
    \ ($paren == ')') {\n      array_pop($paren_stack);\n      $current_depth--;\n\
    \      if (empty($paren_stack)) {\n        array_push($paren_depth_array, $max_depth);\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n      }\n    }\n  }\n \
    \ return $paren_depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $nesting = 0;\n        $max_nesting_level = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\")\
    \ {\n                $nesting++;\n            } elseif ($paren_group[$i] == \"\
    )\") {\n                $nesting--;\n            }\n            if ($nesting >\
    \ $max_nesting_level) {\n                $max_nesting_level = $nesting;\n    \
    \        }\n        }\n        $max_nesting[] = $max_nesting_level;\n    }\n \
    \   return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    $result = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (empty($paren_stack)) {\n                array_push($result, $max_depth);\n\
    \                $max_depth = 0;\n                $current_depth = 0;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \          if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } else {\n            $paren_count--;\n            if\
    \ ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n  \
    \              $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $nested_parens =\
    \ array();\n    foreach ($paren_array as $paren_group) {\n        $nested_parens[]\
    \ = parse_nested_parens_helper($paren_group);\n    }\n    return $nested_parens;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $result = array();\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \       array_push($stack, $paren);\n        } else if ($paren == \")\") {\n \
    \           array_pop($stack);\n            $depth--;\n            if (count($stack)\
    \ == 0) {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $max_count = 0;\n    $max_count_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n        } else {\n            $paren_count--;\n      \
    \  }\n        if ($paren_count > $max_count) {\n            $max_count = $paren_count;\n\
    \        }\n        if ($paren_count == 0) {\n            $max_count_array[] =\
    \ $max_count;\n            $max_count = 0;\n        }\n    }\n    return $max_count_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_array = str_split($paren_string);\n  $paren_stack = array();\n  $max_nesting\
    \ = 0;\n  $nesting_array = array();\n  $paren_count = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      array_push($paren_stack, $paren);\n\
    \      $paren_count++;\n    } else {\n      array_pop($paren_stack);\n      $paren_count--;\n\
    \    }\n    if ($paren_count > $max_nesting) {\n      $max_nesting = $paren_count;\n\
    \    }\n    if ($paren_count == 0) {\n      array_push($nesting_array, $max_nesting);\n\
    \      $max_nesting = 0;\n    }\n  }\n  return $nesting_array;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $result[] = parse_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } elseif ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $nesting = 0;\n        $max_nesting_group = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\")\
    \ {\n                $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_group) {\n           \
    \     $max_nesting_group = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_group;\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_levels = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $paren_levels[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_parens($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_map('strlen', $paren_array);\n    return $paren_array;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    $paren_count_array = array();\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $max_paren_count) {\n                $max_paren_count = $paren_count;\n  \
    \          }\n        } else {\n            $paren_count_array[] = $paren_count;\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_level =\
    \ 0;\n    $max_level = 0;\n    $max_level_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n  \
    \          if ($paren_level > $max_level) {\n                $max_level = $paren_level;\n\
    \            }\n            array_push($paren_stack, $paren);\n        } elseif\
    \ ($paren == ')') {\n            $paren_level--;\n            array_pop($paren_stack);\n\
    \            if (empty($paren_stack)) {\n                array_push($max_level_array,\
    \ $max_level);\n                $max_level = 0;\n            }\n        }\n  \
    \  }\n    return $max_level_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_depth = 0;\n        $depth = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n                if ($depth > $max_depth)\
    \ {\n                    $max_depth = $depth;\n                }\n           \
    \ } else if ($paren_group[$i] == \")\") {\n                $depth--;\n       \
    \     }\n        }\n        array_push($max_depth_array, $max_depth);\n    }\n\
    \    return $max_depth_array;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$max_depth_array = parse_nested_parens($paren_string);\nprint_r($max_depth_array);",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = explode(' ', $paren_string);\n  return $paren_string;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_depth = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth_so_far = 0;\n  \
    \      for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n                if ($depth > $max_depth_so_far)\
    \ {\n                    $max_depth_so_far = $depth;\n                }\n    \
    \        } else if ($paren_group[$i] == \")\") {\n                $depth--;\n\
    \            }\n        }\n        $max_depth[] = $max_depth_so_far;\n    }\n\
    \    return $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $current_depth = 0;\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n            $current_depth++;\n    \
    \        if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $current_depth--;\n            if (empty($paren_stack)) {\n          \
    \      array_push($result, $max_depth);\n                $max_depth = 0;\n   \
    \             $current_depth = 0;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $paren_string = trim($paren_string);\n    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $max_nesting_level = 0;\n     \
    \   for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(')\
    \ {\n                $nesting++;\n            } else if ($group[$i] == ')') {\n\
    \                $nesting--;\n            }\n            if ($nesting > $max_nesting_level)\
    \ {\n                $max_nesting_level = $nesting;\n            }\n        }\n\
    \        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_level = 0;\n \
    \   $level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $level++;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \       array_push($paren_stack, $paren);\n        } elseif ($paren == \")\")\
    \ {\n            array_pop($paren_stack);\n            $level--;\n           \
    \ if (count($paren_stack) == 0) {\n                array_push($max_level_array,\
    \ $max_level);\n                $max_level = 0;\n            }\n        }\n  \
    \  }\n    return $max_level_array;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_depth = array();\n    $paren_depth_index = 0;\n    $paren_depth_max\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            array_push($paren_stack, $paren);\n            $paren_depth_max++;\n\
    \        } else {\n            array_pop($paren_stack);\n            $paren_depth_max--;\n\
    \        }\n        if ($paren_depth_max == 0) {\n            $paren_depth[$paren_depth_index]\
    \ = count($paren_stack);\n            $paren_depth_index++;\n            $paren_depth_max\
    \ = 0;\n        }\n    }\n    return $paren_depth;\n}\n", "    $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"()\", $paren_string);\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode('\
    \ ', $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_values($paren_string);\n    $paren_string = array_map('trim', $paren_string);\n\
    \    $paren_string = array_map('strtolower', $paren_string);\n    $paren_string\
    \ = array_map('strval', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), '('), array_fill(0, count($paren_string),\
    \ '1'), $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), ')'), array_fill(0, count($paren_string), '-1'), $paren_string);\n\
    \    $paren_string = array_map('intval', $paren_string);\n    $paren_string =\
    \ array_map('strval', $paren_string);\n    $paren_string = array_map('trim', $paren_string);\n\
    \    $paren_string = array_map('strtolower', $paren_string);\n    $paren_string\
    \ = array_map('strval', $paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtol", " \
    \   $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ array_push($max_nesting, $max_nesting_in_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_groups as $group) {\n        $paren_levels[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n \
    \   foreach ($paren_array as $paren_group) {\n        $paren_group = trim($paren_group);\n\
    \        $paren_group_len = strlen($paren_group);\n        $max_nesting = 0;\n\
    \        $current_nesting = 0;\n        for ($i = 0; $i < $paren_group_len; $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $current_nesting++;\n\
    \                if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $current_nesting--;\n            }\n        }\n\
    \        array_push($result, $max_nesting);\n    }\n    return $result;\n}\n",
  "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = array();\n    foreach ($paren_groups as $group) {\n       \
    \ $max_nesting[] = parse_nested_parens_helper($group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $paren_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            if ($depth\
    \ == 0) {\n                array_push($paren_depth_array, $max_depth);\n     \
    \           $max_depth = 0;\n            }\n        }\n    }\n    return $paren_depth_array;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $max_count = 0;\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n \
    \       } else {\n            array_pop($paren_stack);\n            $max_count\
    \ = max($max_count, count($paren_stack));\n        }\n    }\n    return $max_count;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $paren_count_index = 0;\n    foreach ($paren_arr as $paren) {\n\
    \        if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \        } else {\n            array_pop($paren_stack);\n            $paren_count[$paren_count_index]\
    \ = count($paren_stack);\n            $paren_count_index++;\n        }\n    }\n\
    \    return $paren_count;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    $paren_count_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $max_paren_count) {\n                $max_paren_count = $paren_count;\n\
    \            }\n        } else {\n            $paren_count_array[] = $paren_count;\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \      array_push($max_depth_array, $max_depth);\n            $max_depth = 0;\n\
    \        }\n    }\n    return $max_depth_array;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_depth = 0;\n    $depth_array = array();\n    foreach\
    \ ($paren_array as $paren_group) {\n        $depth = 0;\n        for ($i = 0;\
    \ $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\"\
    ) {\n                $depth++;\n            } else if ($paren_group[$i] == \"\
    )\") {\n                $depth--;\n            }\n        }\n        $depth_array[]\
    \ = $depth;\n    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n       \
    \     $stack[] = $paren;\n            $depth++;\n            if ($depth > $max_depth)\
    \ {\n                $max_depth = $depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \                $depth--;\n            } else {\n                $result[] =\
    \ 0;\n                $depth = 0;\n                $max_depth = 0;\n         \
    \   }\n        }\n    }\n    $result[] = $max_depth;\n    return $result;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $depth++;\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        } elseif ($paren == ')')\
    \ {\n            $max_depth_array[] = $max_depth;\n            $max_depth = 0;\n\
    \            $depth--;\n        }\n    }\n    return $max_depth_array;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   $output_array = array();\n    foreach ($paren_array as $paren) {\n       \
    \ if ($paren == '(') {\n            $paren_stack[] = $paren;\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } else {\n            if ($paren ==\
    \ ')') {\n                array_pop($paren_stack);\n                $current_depth--;\n\
    \            }\n        }\n        if (empty($paren_stack)) {\n            $output_array[]\
    \ = $max_depth;\n            $max_depth = 0;\n            $current_depth = 0;\n\
    \        }\n    }\n    return $output_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $", "    $paren_array = explode(\" \", $paren_string);\n    $max_depth\
    \ = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $max_depth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $depth++;\n\
    \                if ($depth > $max_depth) {\n                    $max_depth =\
    \ $depth;\n                }\n            } else if ($paren[$i] == \")\") {\n\
    \                $depth--;\n            }\n        }\n        $max_depth_array[]\
    \ = $max_depth;\n    }\n    return $max_depth_array;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $paren_levels = [];\n    $max_level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $max_level = max($max_level, count($paren_stack));\n        }\n \
    \   }\n    return $max_level;\n}\n\necho parse_nested_parens(\"(()()) ((())) ()\
    \ ((())()())\");", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"2\", $paren_string);\n    $paren_string = str_replace(\"0\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"2\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \"\", $paren_string);\n    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \"\", $paren_string);\n    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \"\", $paren_string);\n    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \"\", $paren_string);\n    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \"\", $paren_string);\n    $paren_string = str_replace(\"1\", \"0\", $paren_string",
  "    $paren_array = explode(\" \", $paren_string);\n    $paren_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_depth[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_depth;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_nested_paren($paren);\n    }\n    return $result;\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  return $paren_array;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $stack = new SplStack();\n\
    \    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $stack->push($paren);\n\
    \            $depth++;\n            if ($depth > $max_depth) {\n             \
    \   $max_depth = $depth;\n            }\n        } else {\n            if ($stack->isEmpty())\
    \ {\n                $result[] = $max_depth;\n                $max_depth = 0;\n\
    \                $depth = 0;\n            } else {\n                $stack->pop();\n\
    \                $depth--;\n            }\n        }\n    }\n    $result[] = $max_depth;\n\
    \    return $result;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    $result = parse_nested_parens($paren_string);\nprint_r($result);", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $max_paren_count = 0;\n    $paren_count_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        $paren_count++;\n            if ($paren_count > $max_paren_count) {\n\
    \                $max_paren_count = $paren_count;\n            }\n        } else\
    \ if ($paren == \")\") {\n            $paren_count_array[] = $paren_count;\n \
    \           $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = count($paren_array);\n    $paren_level = 0;\n    $paren_max_level\
    \ = 0;\n    $paren_max_level_array = array();\n    for ($i = 0; $i < $paren_count;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_level++;\n\
    \            if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } else {\n            $paren_level--;\n\
    \            $paren_max_level_array[] = $paren_max_level;\n            $paren_max_level\
    \ = 0;\n        }\n    }\n    return $paren_max_level_array;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_max_level_array = parse_nested_parens($paren_string);\n\
    print_r($paren_max_level_array);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\)\\s*/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\)\\s*/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    $max_depth_array\
    \ = [];\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            $max_depth = max($max_depth, $current_depth);\n\
    \            array_push($paren_stack, $paren);\n        } elseif ($paren == ')')\
    \ {\n            $current_depth--;\n            array_pop($paren_stack);\n   \
    \         if (empty($paren_stack)) {\n                array_push($max_depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $max_depth_array;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n ", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $stack = array();\n   \
    \ $max_depth = 0;\n    $depth = 0;\n    foreach ($paren_string as $paren) {\n\
    \        if ($paren == '(') {\n            $depth++;\n            if ($depth >\
    \ $max_depth) {\n                $max_depth = $depth;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $depth--;\n        }\n        if ($depth\
    \ == 0) {\n            $stack[] = $max_depth;\n            $max_depth = 0;\n \
    \       }\n    }\n    return $stack;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    return $paren_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',",
  "  $paren_array = explode(\" \", $paren_string);\n  $max_depth = array();\n  foreach\
    \ ($paren_array as $paren_group) {\n    $depth = 0;\n    $max_depth_in_group =\
    \ 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $depth++;\n      } else if ($paren_group[$i] == \")\")\
    \ {\n        $depth--;\n      }\n      if ($depth > $max_depth_in_group) {\n \
    \       $max_depth_in_group = $depth;\n      }\n    }\n    $max_depth[] = $max_depth_in_group;\n\
    \  }\n  return $max_depth;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_levels = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $paren_levels[] = parse_parens($paren_group);\n    }\n    return $paren_levels;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_nesting =\
    \ 0;\n    $nesting_level = 0;\n    $nesting_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $nesting_level++;\n            if ($nesting_level > $max_nesting)\
    \ {\n                $max_nesting = $nesting_level;\n            }\n        }\
    \ elseif ($paren == ')') {\n            array_pop($paren_stack);\n           \
    \ $nesting_level--;\n            if (empty($paren_stack)) {\n                array_push($nesting_array,\
    \ $max_nesting);\n                $max_nesting = 0;\n            }\n        }\n\
    \    }\n    return $nesting_array;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $paren_depth = array();\n    $paren_depth_index\
    \ = 0;\n    $paren_depth_max = 0;\n    $paren_depth_max_index = 0;\n    $paren_depth_max_index_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev = 0;\n    $paren_depth_max_index_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $paren_depth = array();\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_index = 0;\n    foreach ($paren_array as $paren_char)\
    \ {\n        if ($paren_char == '(') {\n            array_push($paren_stack, $paren_char);\n\
    \            $paren_depth[$paren_depth_index]++;\n            $paren_depth_max\
    \ = max($paren_depth_max, $paren_depth[$paren_depth_index]);\n        } elseif\
    \ ($paren_char == ')') {\n            if (count($paren_stack) > 0) {\n       \
    \         array_pop($paren_stack);\n                $paren_depth[$paren_depth_index]--;\n\
    \            } else {\n                $paren_depth_index++;\n            }\n\
    \        }\n    }\n    return $paren_depth;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_nested_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n     \
    \       $paren_count++;\n            if ($paren_count > $paren_max) {\n      \
    \          $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == \")\") {\n            $paren_count--;\n            if ($paren_count == 0)\
    \ {\n                array_push($paren_max_array, $paren_max);\n             \
    \   $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "  $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_count\
    \ = 0;\n  $max_paren_count = 0;\n  $paren_count_array = array();\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == \"(\") {\n      $paren_count++;\n      if ($paren_count\
    \ > $max_paren_count) {\n        $max_paren_count = $paren_count;\n      }\n \
    \   } elseif ($paren == \")\") {\n      $paren_count_array[] = $paren_count;\n\
    \      $paren_count--;\n    }\n  }\n  return $paren_count_array;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_depth = array();\n    foreach ($paren_array as $paren_group) {\n   \
    \     $max_depth[] = get_max_depth($paren_group);\n    }\n    return $max_depth;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $depth = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n\
    \            if ($paren_group[$i] == \"(\") {\n                $depth++;\n   \
    \         } else if ($paren_group[$i] == \")\") {\n                $depth--;\n\
    \            }\n        }\n        array_push($max_depth_array, $depth);\n   \
    \ }\n    return $max_depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $nested_parens = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $nested_parens[] = parse_parens($paren_group);\n    }\n    return $nested_parens;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $paren_depth = array();\n    foreach ($paren_array as $paren) {\n       \
    \ if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n    \
    \        $max_depth = max($max_depth, count($paren_stack));\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n        }\n     \
    \   array_push($paren_depth, $max_depth);\n    }\n    return $paren_depth;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $max_depth = 0;\n    $depth = 0;\n    $paren_depth_array = array();\n   \
    \ foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n         \
    \   $depth++;\n            if ($depth > $max_depth) {\n                $max_depth\
    \ = $depth;\n            }\n        } elseif ($paren == ')') {\n            $depth--;\n\
    \        } else {\n            echo \"Invalid character $paren\\n\";\n       \
    \     return;\n        }\n        if ($depth == 0) {\n            $paren_depth_array[]\
    \ = $max_depth;\n            $max_depth = 0;\n        }\n    }\n    return $paren_depth_array;\n\
    }\n", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $max_depth = array();\n    foreach ($paren_array as $paren_group) {\n     \
    \   $depth = 0;\n        $max_depth_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $depth++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $depth--;\n\
    \            }\n            if ($depth > $max_depth_in_group) {\n            \
    \    $max_depth_in_group = $depth;\n            }\n        }\n        $max_depth[]\
    \ = $max_depth_in_group;\n    }\n    return $max_depth;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $result = array();\n    $current_level = 0;\n    $max_level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $current_level++;\n\
    \            if ($current_level > $max_level) {\n                $max_level =\
    \ $current_level;\n            }\n        } else {\n            $result[] = $max_level;\n\
    \            $max_level = 0;\n            $current_level = 0;\n        }\n   \
    \ }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_depth = array();\n    $paren_depth_max = 0;\n    $paren_depth_max_index\
    \ = 0;\n    $paren_depth_index = 0;\n    $paren_depth_count = 0;\n    $paren_depth_count_max\
    \ = 0;\n    $paren_depth_count_max_index = 0;\n    $paren_depth_count_index =\
    \ 0;\n    $paren_depth_count_index_max = 0;\n    $paren_depth_count_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max = 0;\n    $paren_depth_count_index_max_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max = 0;\n    $paren_depth_count_index_max_index_max_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max = 0;\n\
    \    $paren_depth_count_index_max_index_max_index_max_index_max_index = 0;\n \
    \   $paren_depth_count_index_max_index_max_index_max_index_max_index_max = 0;\n\
    \    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s*\\(\\s*/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s*\\)\\s*/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s*\\(\\s*\\)\\s*/', '()', $paren_string);\n    $paren_string = preg_replace('/\\\
    s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*/', '(())', $paren_string);\n    $paren_string =\
    \ preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*/', '((()))', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\\
    )\\s*\\)\\s*\\)\\s*/', '(((())))', $paren_string);\n    $paren_string = preg_replace('/\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '((((()))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '(((((())))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\\
    s*/', '((((((()))))))', $paren_string);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            array_push($paren_depth,\
    \ $max_depth);\n            $current_depth--;\n            $max_depth = 0;\n \
    \       }\n    }\n    return $paren_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_count = array();\n    $paren_count_index = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_count[$paren_count_index] = count($paren_stack);\n       \
    \     $paren_count_index++;\n        }\n    }\n    return $paren_count;\n}\n",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);", "    $paren_string = trim($paren_string);\n   \
    \ $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+\\)/', '()', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\(\\s+/', ' (', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)\\s+/', ') ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\\
    )\\s+\\(/', ') (', $paren_string);\n    $paren_string = preg_replace('/\\s+\\\
    (\\s+\\)/', ' ()', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+\\\
    )\\s+/', '() ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(\\\
    s+\\)/', ' ()', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+\\\
    )\\s+/', '() ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(\\\
    s+\\)/', ' ()', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+\\\
    )\\s+/', '() ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(\\\
    s+\\)/', ' ()', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+\\\
    )\\s+/', '() ', $paren_string);", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_array = str_split($paren_string);\n  $stack = array();\n  $max_depth\
    \ = 0;\n  $depth = 0;\n  $result = array();\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      array_push($stack, $paren);\n      $depth++;\n\
    \      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n   \
    \ } else {\n      array_pop($stack);\n      $depth--;\n      if (empty($stack))\
    \ {\n        array_push($result, $max_depth);\n        $max_depth = 0;\n     \
    \ }\n    }\n  }\n  return $result;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$result = parse_nested_parens($paren_string);\nprint_r($result);", "    $paren_string\
    \ = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $paren_groups_count = count($paren_groups);\n    $paren_groups_max_nesting\
    \ = array();\n    for ($i = 0; $i < $paren_groups_count; $i++) {\n        $paren_groups_max_nesting[$i]\
    \ = 0;\n        $paren_group_len = strlen($paren_groups[$i]);\n        $paren_group_nesting\
    \ = 0;\n        for ($j = 0; $j < $paren_group_len; $j++) {\n            if ($paren_groups[$i][$j]\
    \ == '(') {\n                $paren_group_nesting++;\n            } else if ($paren_groups[$i][$j]\
    \ == ')') {\n                $paren_group_nesting--;\n            }\n        \
    \    if ($paren_group_nesting > $paren_groups_max_nesting[$i]) {\n           \
    \     $paren_groups_max_nesting[$i] = $paren_group_nesting;\n            }\n \
    \       }\n    }\n    return $paren_groups_max_nesting;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \   ", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n        } else {\n    \
    \        $paren_count--;\n        }\n        if ($paren_count > $max_count) {\n\
    \            $max_count = $paren_count;\n        }\n        if ($paren_count ==\
    \ 0) {\n            $max_count_array[] = $max_count;\n            $max_count =\
    \ 0;\n        }\n    }\n    return $max_count_array;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } else {\n      \
    \      $paren_count--;\n            if ($paren_count == 0) {\n               \
    \ $paren_max_array[] = $paren_max;\n                $paren_max = 0;\n        \
    \    }\n        }\n    }\n    return $paren_max_array;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $max_count = 0;\n    $max_count_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        $paren_count++;\n        } else {\n            $paren_count--;\n    \
    \    }\n        if ($paren_count > $max_count) {\n            $max_count = $paren_count;\n\
    \        }\n        if ($paren_count == 0) {\n            array_push($max_count_array,\
    \ $max_count);\n            $max_count = 0;\n        }\n    }\n    return $max_count_array;\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  $current_depth = 0;\n  $paren_depth_array = array();\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth\
    \ > $max_depth) {\n        $max_depth = $current_depth;\n      }\n      array_push($paren_stack,\
    \ $paren);\n    } elseif ($paren == ')') {\n      $current_depth--;\n      array_pop($paren_stack);\n\
    \      if (empty($paren_stack)) {\n        array_push($paren_depth_array, $max_depth);\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n      }\n    }\n  }\n \
    \ return $paren_depth_array;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_depth_array = parse_nested_parens($paren_string);\nprint_r($paren_depth_array);",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $max_nesting_array\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $paren_group\
    \ = trim($paren_group);\n        $paren_group_length = strlen($paren_group);\n\
    \        $nesting = 0;\n        $max_nesting = 0;\n        for ($i = 0; $i < $paren_group_length;\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } else if ($paren_group[$i] == \"\
    )\") {\n                $nesting--;\n            }\n        }\n        $max_nesting_array[]\
    \ = $max_nesting;\n    }\n    return $max_nesting_array;\n}\n", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $max_nesting[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('( ', '(', $paren_string);\n    $paren_string = str_replace('\
    \ )', ')', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('( ', '(', $paren_string);\n\
    \    $paren_string = str_replace(' )', ')', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $result = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n", "  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = array();\n  foreach ($paren_groups as $paren_group) {\n    $max_nesting[]\
    \ = parse_nested_parens_helper($paren_group);\n  }\n  return $max_nesting;\n}\n",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);", "    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_groups as $paren_group) {\n     \
    \   $max_nesting[] = parse_nested_parens_helper($paren_group);\n    }\n    return\
    \ $max_nesting;\n}\n", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $", " \
    \   $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n            } else\
    \ {\n                $depth--;\n            }\n            if ($depth > $max_depth_in_group)\
    \ {\n                $max_depth_in_group = $depth;\n            }\n        }\n\
    \        $max_depth[] = $max_depth_in_group;\n    }\n    return $max_depth;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\")\
    \ {\n                $current_depth++;\n                if ($current_depth > $max_depth)\
    \ {\n                    $max_depth = $current_depth;\n                }\n   \
    \         } else if ($paren_group[$i] == \")\") {\n                $current_depth--;\n\
    \            }\n        }\n        $max_depth_array[] = $max_depth;\n    }\n \
    \   return $max_depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_levels = array();\n    foreach ($paren_array as $paren_group) {\n  \
    \      $level = 0;\n        $max_level = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $level++;\n\
    \                if ($level > $max_level) {\n                    $max_level =\
    \ $level;\n                }\n            } else if ($paren_group[$i] == \")\"\
    ) {\n                $level--;\n            }\n        }\n        $max_levels[]\
    \ = $max_level;\n    }\n    return $max_levels;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n     \
    \       $paren_count++;\n            if ($paren_count > $paren_max) {\n      \
    \          $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == \")\") {\n            $paren_count--;\n            if ($paren_count == 0)\
    \ {\n                array_push($paren_max_array, $paren_max);\n             \
    \   $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $output_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (count($paren_stack) == 0) {\n                array_push($output_array,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $output_array;\n}\n", "  \
    \  $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    return strlen($paren_string);\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $max_nesting_array\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $nesting =\
    \ 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $nesting++;\n            } else\
    \ if ($paren_group[$i] == \")\") {\n                $nesting--;\n            }\n\
    \        }\n        if ($nesting > $max_nesting) {\n            $max_nesting =\
    \ $nesting;\n        }\n        array_push($max_nesting_array, $nesting);\n  \
    \  }\n    return $max_nesting_array;\n}\n", "    $paren_array = explode(\" \"\
    , $paren_string);\n    $max_depth = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $depth = 0;\n        $max_depth_in_group = 0;\n        for ($i =\
    \ 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"\
    (\") {\n                $depth++;\n            } else if ($paren_group[$i] ==\
    \ \")\") {\n                $depth--;\n            }\n            if ($depth >\
    \ $max_depth_in_group) {\n                $max_depth_in_group = $depth;\n    \
    \        }\n        }\n        $max_depth[] = $max_depth_in_group;\n    }\n  \
    \  return $max_depth;\n}\n", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_array = str_split($paren_string);\n  $paren_stack = array();\n  $max_depth\
    \ = 0;\n  $paren_depth = array();\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      array_push($paren_stack, $paren);\n      $max_depth\
    \ = max($max_depth, count($paren_stack));\n    } elseif ($paren == ')') {\n  \
    \    array_pop($paren_stack);\n    }\n    array_push($paren_depth, $max_depth);\n\
    \  }\n  return $paren_depth;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_array = [];\n    $depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $depth++;\n\
    \            $max_depth = max($max_depth, $depth);\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            $depth--;\n      \
    \      array_pop($paren_stack);\n            if (empty($paren_stack)) {\n    \
    \            array_push($depth_array, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $depth_array;\n}\n", "   \
    \ $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array =\
    \ str_split($paren_string);\n    $paren_stack = array();\n    $paren_level = 0;\n\
    \    $paren_levels = array();\n    foreach ($paren_array as $paren) {\n      \
    \  if ($paren == \"(\") {\n            $paren_stack[] = $paren;\n            $paren_level++;\n\
    \        } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n\
    \            $paren_levels[] = $paren_level;\n            $paren_level--;\n  \
    \      }\n    }\n    return $paren_levels;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $max_nesting = 0;\n    $nesting_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        array_push($paren_stack, $paren);\n        } else {\n            array_pop($paren_stack);\n\
    \            $max_nesting = max($max_nesting, count($paren_stack));\n        }\n\
    \        if ($paren == \")\") {\n            array_push($nesting_array, $max_nesting);\n\
    \        }\n    }\n    return $nesting_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"\
    (\") {\n            $depth++;\n            if ($depth > $max_depth) {\n      \
    \          $max_depth = $depth;\n            }\n        } else if ($paren == \"\
    )\") {\n            $depth--;\n            if ($depth == 0) {\n              \
    \  array_push($result, $max_depth);\n                $max_depth = 0;\n       \
    \     }\n        }\n    }\n    return $result;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"(1\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \")1\", $paren_string);\n    $paren_string = str_replace(\"\
    (1)\", \"1\", $paren_string);\n    $paren_string = str_replace(\"1\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"\", $paren_string);\n    $paren_string = str_replace(\"", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \   ", "  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_groups as $group) {\n    $nesting = 0;\n    $max_nesting_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $nesting++;\n      } else if ($group[$i] == ')') {\n       \
    \ $nesting--;\n      }\n      $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n    }\n    $max_nesting[] = $max_nesting_in_group;\n  }\n  return\
    \ $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_nesting = 0;\n    $nesting_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $max_nesting = max($max_nesting, count($paren_stack));\n        }\n\
    \        if ($paren == ' ') {\n            array_push($nesting_array, $max_nesting);\n\
    \            $max_nesting = 0;\n        }\n    }\n    array_push($nesting_array,\
    \ $max_nesting);\n    return $nesting_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"((\", \"(\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    (((\", \"(\", $paren_string);\n    $paren_string = str_replace(\")))\", \")\"\
    , $paren_string);\n    $paren_string = str_replace(\"((((\", \"(\", $paren_string);\n\
    \    $paren_string = str_replace(\"))))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(((((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    ))))))\", \")\", $paren_string);\n    $paren_string = str_replace(\"((((((\",\
    \ \"(\", $paren_string);\n    $paren_string = str_replace(\")))))))\", \")\",\
    \ $paren_string);\n    $paren_string = str_replace(\"(((((((\", \"(\", $paren_string);\n\
    \    $paren_string = str_replace(\"))))))))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"((((((((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    )))))))))\", \")\", $paren_string);\n    $paren_string = str_replace(\"(((((((((\"\
    , \"(\", $paren_string);\n    $paren_string = str_replace(\"))))))))))\", \")\"\
    , $paren_string);\n    $paren_string = str_replace(\"((((((((((\", \"(\", $paren_string);\n\
    \    $paren_string = str_replace(\")))))))))))\", \")\", $paren_string);\n   \
    \ $paren_string = str_replace(\"(((((((((((\", \"(\", $paren_string);\n    $paren_string",
  "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s*\\(\\s*/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s*\\)\\s*/', ')', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\\
    s*\\)\\s*/', '()', $paren_string);\n    $paren_string = preg_replace('/\\s*\\\
    (\\s*\\(\\s*\\)\\s*\\)\\s*/', '(())', $paren_string);\n    $paren_string = preg_replace('/\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*/', '((()))', $paren_string);\n  \
    \  $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\\
    s*\\)\\s*\\)\\s*/', '(((())))', $paren_string);\n    $paren_string = preg_replace('/\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '((((()))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '(((((())))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\\
    s*/', '((((((()))))))', $paren_string);", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_nesting = 0;\n    $nesting_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        array_push($paren_stack, $paren);\n        } else {\n            array_pop($paren_stack);\n\
    \            $max_nesting = max($max_nesting, count($paren_stack));\n        }\n\
    \        if ($paren == \")\") {\n            array_push($nesting_array, $max_nesting);\n\
    \        }\n    }\n    return $nesting_array;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    return $paren_string;\n}\n", "  $paren_array = explode(\" \", $paren_string);\n\
    \  $result = array();\n  foreach ($paren_array as $paren_group) {\n    $result[]\
    \ = parse_nested_parens_helper($paren_group);\n  }\n  return $result;\n}\n", " \
    \   $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = get_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n            $depth++;\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $depth--;\n            if (count($paren_stack) == 0) {\n          \
    \      array_push($max_depth_array, $max_depth);\n                $max_depth =\
    \ 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $depth++;\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        } elseif ($paren == ')')\
    \ {\n            $max_depth_array[] = $max_depth;\n            $max_depth = 0;\n\
    \            $depth--;\n        }\n    }\n    return $max_depth_array;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            $current_depth--;\n         \
    \   if ($current_depth == 0) {\n                $max_depth_array[] = $max_depth;\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    return\
    \ $max_depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $nesting = 0;\n        $max_nesting_temp = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting_temp) {\n                    $max_nesting_temp\
    \ = $nesting;\n                }\n            } else {\n                $nesting--;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_temp;\n    }\n\
    \    return $max_nesting;\n}\n", "    $paren_string = str_replace(\" \", \"\"\
    , $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $current_depth = 0;\n    $depth_array =\
    \ array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"(\"\
    ) {\n            array_push($paren_stack, $paren);\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == \")\") {\n     \
    \       array_pop($paren_stack);\n            array_push($depth_array, $max_depth);\n\
    \            $current_depth--;\n            $max_depth = 0;\n        }\n    }\n\
    \    return $depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $max_nesting[] = parse_nested_paren($paren);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_nesting[] = max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    return $paren_string;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    return $paren_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "  $paren_array = explode(\"\
    \ \", $paren_string);\n  $paren_count = array();\n  foreach ($paren_array as $paren_group)\
    \ {\n    $paren_count[] = parse_nested_parens_helper($paren_group);\n  }\n  return\
    \ $paren_count;\n}\n", "    $paren_arr = explode(' ', $paren_string);\n    $max_nested_arr\
    \ = array();\n    foreach ($paren_arr as $paren_group) {\n        $max_nested_arr[]\
    \ = get_max_nested_parens($paren_group);\n    }\n    return $max_nested_arr;\n\
    }\n", "  $paren_string = trim($paren_string);\n  $paren_groups = explode(' ',\
    \ $paren_string);\n  $max_nesting = array();\n  foreach ($paren_groups as $group)\
    \ {\n    $nesting = 0;\n    $max_nesting_in_group = 0;\n    for ($i = 0; $i <\
    \ strlen($group); $i++) {\n      if ($group[$i] == '(') {\n        $nesting++;\n\
    \      } else if ($group[$i] == ')') {\n        $nesting--;\n      }\n      if\
    \ ($nesting > $max_nesting_in_group) {\n        $max_nesting_in_group = $nesting;\n\
    \      }\n    }\n    $max_nesting[] = $max_nesting_in_group;\n  }\n  return $max_nesting;\n\
    }\n", "  $paren_array = explode(\" \", $paren_string);\n  $result = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $result[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $result;\n}\n", "  $paren_array = explode(\" \", $paren_string);\n\
    \  $max_nesting = array();\n  foreach ($paren_array as $paren_group) {\n    $nesting\
    \ = 0;\n    $max_nesting_level = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      if ($paren_group[$i] == \"(\") {\n        $nesting++;\n     \
    \ } elseif ($paren_group[$i] == \")\") {\n        $nesting--;\n      }\n     \
    \ if ($nesting > $max_nesting_level) {\n        $max_nesting_level = $nesting;\n\
    \      }\n    }\n    $max_nesting[] = $max_nesting_level;\n  }\n  return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == \"(\") {\n            $depth++;\n         \
    \   if ($depth > $max_depth) {\n                $max_depth = $depth;\n       \
    \     }\n        } else if ($paren == \")\") {\n            $max_depth_array[]\
    \ = $max_depth;\n            $max_depth = 0;\n            $depth--;\n        }\n\
    \    }\n    return $max_depth_array;\n}\n", "    $paren_array = explode(\" \"\
    , $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_paren($paren);\n    }\n    return $result;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } else {\n      \
    \      $paren_count--;\n            if ($paren_count == 0) {\n               \
    \ $paren_max_array[] = $paren_max;\n                $paren_max = 0;\n        \
    \    }\n        }\n    }\n    return $paren_max_array;\n}\n", "  $paren_array\
    \ = explode(\" \", $paren_string);\n  $max_nesting = array();\n  foreach ($paren_array\
    \ as $paren) {\n    $nesting = 0;\n    $max_nesting_in_paren = 0;\n    for ($i\
    \ = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] == \"(\") {\n      \
    \  $nesting++;\n      } else if ($paren[$i] == \")\") {\n        $nesting--;\n\
    \      }\n      if ($nesting > $max_nesting_in_paren) {\n        $max_nesting_in_paren\
    \ = $nesting;\n      }\n    }\n    $max_nesting[] = $max_nesting_in_paren;\n \
    \ }\n  return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_groups as $paren_group) {\n\
    \        $max_nesting[] = get_max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "  $paren_array = explode(\" \", $paren_string);\n  $max_depth = 0;\n  $depth\
    \ = 0;\n  $max_depth_array = array();\n  foreach ($paren_array as $paren_group)\
    \ {\n    $max_depth = 0;\n    $depth = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      if ($paren_group[$i] == \"(\") {\n        $depth++;\n       \
    \ if ($depth > $max_depth) {\n          $max_depth = $depth;\n        }\n    \
    \  } else if ($paren_group[$i] == \")\") {\n        $depth--;\n      }\n    }\n\
    \    array_push($max_depth_array, $max_depth);\n  }\n  return $max_depth_array;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_groups = explode('\
    \ ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $max_level = 0;\n    foreach ($paren_string\
    \ as $paren) {\n        if (strlen($paren) > $max_level) {\n            $max_level\
    \ = strlen($paren);\n        }\n    }\n    return $max_level;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$result = parse_nested_parens($paren_string);\n\
    print_r($result);", "  $paren_array = explode(\" \", $paren_string);\n  $paren_depth\
    \ = array();\n  foreach ($paren_array as $paren_group) {\n    $paren_depth[] =\
    \ get_paren_depth($paren_group);\n  }\n  return $paren_depth;\n}\n", "  $paren_array\
    \ = explode(\" \", $paren_string);\n  $max_nesting = array();\n  foreach ($paren_array\
    \ as $paren_group) {\n    $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_count = array();\n    $max_count = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            array_pop($paren_stack);\n         \
    \   $max_count = max($max_count, count($paren_stack));\n        }\n    }\n   \
    \ return $max_count;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    echo parse_nested_parens($paren_string);", "    $paren_array = explode(\" \",\
    \ $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $nesting = 0;\n        $max_nesting_level = 0;\n        for ($i =\
    \ 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"\
    (\") {\n                $nesting++;\n            } elseif ($paren_group[$i] ==\
    \ \")\") {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_level) {\n                $max_nesting_level = $nesting;\n  \
    \          }\n        }\n        $max_nesting[] = $max_nesting_level;\n    }\n\
    \    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    return $paren_string;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
