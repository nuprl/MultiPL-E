language: php
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \            $max_depth = max($max_depth, count($paren_stack));\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4a_bekm.php:31\n\
    Stack trace:\n#0 /tmp/tmpw4a_bekm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw4a_bekm.php\
    \ on line 31\n"
  timestamp: 1659730680
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \"\
    , $paren_string);\n    $paren_array_len = count($paren_array);\n    $paren_array_result\
    \ = array();\n    for ($i = 0; $i < $paren_array_len; $i++) {\n        $paren_array_result[$i]\
    \ = 0;\n        $paren_array_len_inner = strlen($paren_array[$i]);\n        $paren_array_result_inner\
    \ = 0;\n        for ($j = 0; $j < $paren_array_len_inner; $j++) {\n          \
    \  if ($paren_array[$i][$j] == \"(\") {\n                $paren_array_result_inner++;\n\
    \            } else if ($paren_array[$i][$j] == \")\") {\n                $paren_array_result_inner--;\n\
    \            }\n            if ($paren_array_result_inner > $paren_array_result[$i])\
    \ {\n                $paren_array_result[$i] = $paren_array_result_inner;\n  \
    \          }\n        }\n    }\n    return $paren_array_result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nested_parens\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $max_nested_parens[]\
    \ = get_max_nested_parens($paren_group);\n    }\n    return $max_nested_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nested_parens()\
    \ in /tmp/tmpb4xe2i7d.php:11\nStack trace:\n#0 /tmp/tmpb4xe2i7d.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpb4xe2i7d.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpb4xe2i7d.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpb4xe2i7d.php\
    \ on line 11\n"
  timestamp: 1659730680
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } elseif ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ array_push($max_nesting, $max_nesting_in_group);\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"2\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    2\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp729jtl98.php on line 34

    '
  timestamp: 1659730680
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n        } else {\n    \
    \        $paren_count--;\n        }\n        if ($paren_count > $max_count) {\n\
    \            $max_count = $paren_count;\n        }\n        if ($paren_count ==\
    \ 0) {\n            $max_count_array[] = $max_count;\n            $max_count =\
    \ 0;\n        }\n    }\n    return $max_count_array;\n}\n\n$paren_string = \"\
    (()()) ((())) () ((())()())\";\n$max_count_array = parse_nested_parens($paren_string);\n\
    print_r($max_count_array);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \" ) \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"  \"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = trim($\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4z4lde85.php on line 39

    '
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_level =\
    \ 0;\n    $max_level = 0;\n    $max_level_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $paren_level++;\n            if ($paren_level > $max_level)\
    \ {\n                $max_level = $paren_level;\n            }\n        } else\
    \ {\n            array_pop($paren_stack);\n            $paren_level--;\n     \
    \       array_push($max_level_array, $max_level);\n            $max_level = 0;\n\
    \        }\n    }\n    return $max_level_array;\n}\n\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$max_level_array = parse_nested_parens($paren_string);\n\
    print_r($max_level_array);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 0\n    [3] => 3\n    [4]\
    \ => 0\n    [5] => 0\n    [6] => 1\n    [7] => 3\n    [8] => 0\n    [9] => 2\n\
    \    [10] => 2\n    [11] => 0\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvm2riy6s.php:39\nStack trace:\n#0 /tmp/tmpvm2riy6s.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvm2riy6s.php on line 39\n"
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_arr = explode(\" \"\
    , $paren_string);\n    $max_level = 0;\n    $result = array();\n    foreach ($paren_arr\
    \ as $paren_group) {\n        $level = 0;\n        $len = strlen($paren_group);\n\
    \        for ($i = 0; $i < $len; $i++) {\n            if ($paren_group[$i] ==\
    \ \"(\") {\n                $level++;\n            } else {\n                $level--;\n\
    \            }\n        }\n        $result[] = $level;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssy3upmp.php:32\n\
    Stack trace:\n#0 /tmp/tmpssy3upmp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpssy3upmp.php\
    \ on line 32\n"
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    $paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$paren_string = \"(()()) ((())) () ((())()())\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq4ublpsw.php on line 44

    '
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_groups as $group) {\n    $max_nesting[] = count_nested_parens($group);\n\
    \  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens()\
    \ in /tmp/tmpc53fclql.php:11\nStack trace:\n#0 /tmp/tmpc53fclql.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpc53fclql.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpc53fclql.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpc53fclql.php\
    \ on line 11\n"
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_array = array_map('intval', $paren_array);\n    return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hnmvaih.php:24\n\
    Stack trace:\n#0 /tmp/tmp6hnmvaih.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6hnmvaih.php\
    \ on line 24\n"
  timestamp: 1659730680
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_count = 0;\n  $max_count = 0;\n  $max_count_array\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n\
    \      $paren_count++;\n    } else {\n      $paren_count--;\n    }\n    if ($paren_count\
    \ > $max_count) {\n      $max_count = $paren_count;\n    }\n    if ($paren_count\
    \ == 0) {\n      array_push($max_count_array, $max_count);\n      $max_count =\
    \ 0;\n    }\n  }\n  return $max_count_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_stack = array();\n    $paren_count = array();\n\
    \    $paren_count_index = 0;\n    foreach ($paren_array as $paren) {\n       \
    \ if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n    \
    \    } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n    \
    \        $paren_count[$paren_count_index] = count($paren_stack);\n           \
    \ $paren_count_index++;\n        }\n    }\n    return $paren_count;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_count = parse_nested_parens($paren_string);\n\
    print_r($paren_count);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 0\n    [3] => 2\n    [4]\
    \ => 1\n    [5] => 0\n    [6] => 0\n    [7] => 2\n    [8] => 1\n    [9] => 1\n\
    \    [10] => 1\n    [11] => 0\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpws9v2qot.php:37\nStack trace:\n#0 /tmp/tmpws9v2qot.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpws9v2qot.php on line 37\n"
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = str_replace(\",,\", \",\", $paren_string);\n\
    \  $paren_string = str_replace(\",,\", \",\", $paren_string);\n  $paren_string\
    \ =\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprubwgnki.php on line 33

    '
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfssoquk.php:25\n\
    Stack trace:\n#0 /tmp/tmprfssoquk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprfssoquk.php\
    \ on line 25\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp10k67zzc.php:11\nStack trace:\n#0 /tmp/tmp10k67zzc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp10k67zzc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp10k67zzc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp10k67zzc.php\
    \ on line 11\n"
  timestamp: 1659730680
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmprkx2z_9_.php
    on line 36

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_level =\
    \ 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            $paren_level++;\n            if ($paren_level\
    \ > $paren_max_level) {\n                $paren_max_level = $paren_level;\n  \
    \          }\n        } elseif ($paren == ')') {\n            $paren_level--;\n\
    \        }\n    }\n    return $paren_max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp754awvr2.php:31\n\
    Stack trace:\n#0 /tmp/tmp754awvr2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp754awvr2.php\
    \ on line 31\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  $paren_depth_array = array();\n  foreach ($paren_array as $paren) {\n\
    \    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth >\
    \ $max_depth) {\n        $max_depth = $current_depth;\n      }\n      array_push($paren_stack,\
    \ $paren);\n    } elseif ($paren == ')') {\n      array_pop($paren_stack);\n \
    \     $current_depth--;\n      if (empty($paren_stack)) {\n        array_push($paren_depth_array,\
    \ $max_depth);\n        $max_depth = 0;\n        $current_depth = 0;\n      }\n\
    \    }\n  }\n  return $paren_depth_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } elseif ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $result = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (empty($paren_stack)) {\n                array_push($result, $max_depth);\n\
    \                $max_depth = 0;\n                $current_depth = 0;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } else {\n            $paren_count--;\n            if ($paren_count ==\
    \ 0) {\n                $paren_max_array[] = $paren_max;\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $nested_parens = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nested_parens[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $nested_parens;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpk8h11rob.php:11\nStack trace:\n#0 /tmp/tmpk8h11rob.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpk8h11rob.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpk8h11rob.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpk8h11rob.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $result = array();\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \       array_push($stack, $paren);\n        } else if ($paren == \")\") {\n \
    \           array_pop($stack);\n            $depth--;\n            if (count($stack)\
    \ == 0) {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n        } else {\n    \
    \        $paren_count--;\n        }\n        if ($paren_count > $max_count) {\n\
    \            $max_count = $paren_count;\n        }\n        if ($paren_count ==\
    \ 0) {\n            $max_count_array[] = $max_count;\n            $max_count =\
    \ 0;\n        }\n    }\n    return $max_count_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_nesting = 0;\n\
    \  $nesting_array = array();\n  $paren_count = 0;\n  foreach ($paren_array as\
    \ $paren) {\n    if ($paren == '(') {\n      array_push($paren_stack, $paren);\n\
    \      $paren_count++;\n    } else {\n      array_pop($paren_stack);\n      $paren_count--;\n\
    \    }\n    if ($paren_count > $max_nesting) {\n      $max_nesting = $paren_count;\n\
    \    }\n    if ($paren_count == 0) {\n      array_push($nesting_array, $max_nesting);\n\
    \      $max_nesting = 0;\n    }\n  }\n  return $nesting_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_paren()\
    \ in /tmp/tmpqa4093sx.php:11\nStack trace:\n#0 /tmp/tmpqa4093sx.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpqa4093sx.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpqa4093sx.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpqa4093sx.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } elseif ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_group = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting_group) {\n                $max_nesting_group =\
    \ $nesting;\n            }\n        }\n        $max_nesting[] = $max_nesting_group;\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j083s6m.php:26\n\
    Stack trace:\n#0 /tmp/tmp8j083s6m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8j083s6m.php\
    \ on line 26\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp7bg_4dek.php:11\nStack trace:\n#0 /tmp/tmp7bg_4dek.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp7bg_4dek.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp7bg_4dek.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp7bg_4dek.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmna4ihyv.php:25\n\
    Stack trace:\n#0 /tmp/tmpmna4ihyv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmna4ihyv.php\
    \ on line 25\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_parens($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpawqeolek.php:11\nStack trace:\n#0 /tmp/tmpawqeolek.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpawqeolek.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpawqeolek.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpawqeolek.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n    $paren_array\
    \ = array_map('strlen', $paren_array);\n    return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7tqg_sp.php:24\n\
    Stack trace:\n#0 /tmp/tmpu7tqg_sp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7tqg_sp.php\
    \ on line 24\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpzux7hdyq.php:11\nStack trace:\n#0 /tmp/tmpzux7hdyq.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpzux7hdyq.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpzux7hdyq.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpzux7hdyq.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4c1wvpgc.php:11\nStack trace:\n#0 /tmp/tmp4c1wvpgc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4c1wvpgc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4c1wvpgc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4c1wvpgc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    $paren_count_array = array();\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $max_paren_count) {\n                $max_paren_count = $paren_count;\n  \
    \          }\n        } else {\n            $paren_count_array[] = $paren_count;\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ixc0qsr.php:32\n\
    Stack trace:\n#0 /tmp/tmp8ixc0qsr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8ixc0qsr.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_level =\
    \ 0;\n    $max_level = 0;\n    $max_level_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n  \
    \          if ($paren_level > $max_level) {\n                $max_level = $paren_level;\n\
    \            }\n            array_push($paren_stack, $paren);\n        } elseif\
    \ ($paren == ')') {\n            $paren_level--;\n            array_pop($paren_stack);\n\
    \            if (empty($paren_stack)) {\n                array_push($max_level_array,\
    \ $max_level);\n                $max_level = 0;\n            }\n        }\n  \
    \  }\n    return $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $max_depth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $depth++;\n\
    \                if ($depth > $max_depth) {\n                    $max_depth =\
    \ $depth;\n                }\n            } else if ($paren_group[$i] == \")\"\
    ) {\n                $depth--;\n            }\n        }\n        array_push($max_depth_array,\
    \ $max_depth);\n    }\n    return $max_depth_array;\n}\n\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$max_depth_array = parse_nested_parens($paren_string);\n\
    print_r($max_depth_array);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = explode(' ', $paren_string);\n  return $paren_string;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnkt_q2p.php:23\n\
    Stack trace:\n#0 /tmp/tmpjnkt_q2p.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjnkt_q2p.php\
    \ on line 23\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_so_far\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n                if\
    \ ($depth > $max_depth_so_far) {\n                    $max_depth_so_far = $depth;\n\
    \                }\n            } else if ($paren_group[$i] == \")\") {\n    \
    \            $depth--;\n            }\n        }\n        $max_depth[] = $max_depth_so_far;\n\
    \    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yrg6hw5.php:21\n\
    Stack trace:\n#0 /tmp/tmp3yrg6hw5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3yrg6hw5.php\
    \ on line 21\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $result = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \         if (empty($paren_stack)) {\n                array_push($result, $max_depth);\n\
    \                $max_depth = 0;\n                $current_depth = 0;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups as\
    \ $group) {\n        $nesting = 0;\n        $max_nesting_level = 0;\n        for\
    \ ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n\
    \                $nesting++;\n            } else if ($group[$i] == ')') {\n  \
    \              $nesting--;\n            }\n            if ($nesting > $max_nesting_level)\
    \ {\n                $max_nesting_level = $nesting;\n            }\n        }\n\
    \        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_level = 0;\n \
    \   $level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $level++;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \       array_push($paren_stack, $paren);\n        } elseif ($paren == \")\")\
    \ {\n            array_pop($paren_stack);\n            $level--;\n           \
    \ if (count($paren_stack) == 0) {\n                array_push($max_level_array,\
    \ $max_level);\n                $max_level = 0;\n            }\n        }\n  \
    \  }\n    return $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $paren_depth_index = 0;\n    $paren_depth_max = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $paren_depth_max++;\n        } else {\n            array_pop($paren_stack);\n\
    \            $paren_depth_max--;\n        }\n        if ($paren_depth_max == 0)\
    \ {\n            $paren_depth[$paren_depth_index] = count($paren_stack);\n   \
    \         $paren_depth_index++;\n            $paren_depth_max = 0;\n        }\n\
    \    }\n    return $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmvgimr5.php:36\n\
    Stack trace:\n#0 /tmp/tmphmvgimr5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphmvgimr5.php\
    \ on line 36\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp3k889dow.php on line 44

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('str_replace', array_fill(0, count($paren_string), '('), array_fill(0,\
    \ count($paren_string), '1'), $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ')'), array_fill(0, count($paren_string),\
    \ '-1'), $paren_string);\n    $paren_string = array_map('intval', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtol\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "strtol" in /tmp/tmp7bn7chgg.php
    on line 31

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ array_push($max_nesting, $max_nesting_in_group);\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_groups as $group) {\n        $paren_levels[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpfc2r3var.php:11\nStack trace:\n#0 /tmp/tmpfc2r3var.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpfc2r3var.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpfc2r3var.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpfc2r3var.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \"\
    , $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $paren_group = trim($paren_group);\n        $paren_group_len = strlen($paren_group);\n\
    \        $max_nesting = 0;\n        $current_nesting = 0;\n        for ($i = 0;\
    \ $i < $paren_group_len; $i++) {\n            if ($paren_group[$i] == \"(\") {\n\
    \                $current_nesting++;\n                if ($current_nesting > $max_nesting)\
    \ {\n                    $max_nesting = $current_nesting;\n                }\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $current_nesting--;\n\
    \            }\n        }\n        array_push($result, $max_nesting);\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = array();\n    foreach ($paren_groups as $group) {\n       \
    \ $max_nesting[] = parse_nested_parens_helper($group);\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpdnkhtrlz.php:13\nStack trace:\n#0 /tmp/tmpdnkhtrlz.php(19): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpdnkhtrlz.php(23): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpdnkhtrlz.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpdnkhtrlz.php\
    \ on line 13\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $paren_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            if ($depth\
    \ == 0) {\n                array_push($paren_depth_array, $max_depth);\n     \
    \           $max_depth = 0;\n            }\n        }\n    }\n    return $paren_depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j083s6m.php:26\n\
    Stack trace:\n#0 /tmp/tmp8j083s6m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8j083s6m.php\
    \ on line 26\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $max_count = 0;\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n \
    \       } else {\n            array_pop($paren_stack);\n            $max_count\
    \ = max($max_count, count($paren_stack));\n        }\n    }\n    return $max_count;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fyt04t9.php:29\n\
    Stack trace:\n#0 /tmp/tmp0fyt04t9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0fyt04t9.php\
    \ on line 29\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $paren_count_index = 0;\n    foreach ($paren_arr as $paren) {\n\
    \        if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \        } else {\n            array_pop($paren_stack);\n            $paren_count[$paren_count_index]\
    \ = count($paren_stack);\n            $paren_count_index++;\n        }\n    }\n\
    \    return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnpvm8je.php:30\n\
    Stack trace:\n#0 /tmp/tmplnpvm8je.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplnpvm8je.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    $paren_count_array = array();\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $max_paren_count) {\n                $max_paren_count = $paren_count;\n  \
    \          }\n        } else {\n            $paren_count_array[] = $paren_count;\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ixc0qsr.php:32\n\
    Stack trace:\n#0 /tmp/tmp8ixc0qsr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8ixc0qsr.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \      array_push($max_depth_array, $max_depth);\n            $max_depth = 0;\n\
    \        }\n    }\n    return $max_depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8mqfleu.php:36\n\
    Stack trace:\n#0 /tmp/tmpa8mqfleu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa8mqfleu.php\
    \ on line 36\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $depth_array = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $depth = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n\
    \            if ($paren_group[$i] == \"(\") {\n                $depth++;\n   \
    \         } else if ($paren_group[$i] == \")\") {\n                $depth--;\n\
    \            }\n        }\n        $depth_array[] = $depth;\n    }\n    return\
    \ $depth_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22hkuud_.php:30\n\
    Stack trace:\n#0 /tmp/tmp22hkuud_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp22hkuud_.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $stack = array();\n    $max_depth = 0;\n  \
    \  $depth = 0;\n    $result = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $stack[] = $paren;\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            if (count($stack)\
    \ > 0) {\n                array_pop($stack);\n                $depth--;\n    \
    \        } else {\n                $result[] = 0;\n                $depth = 0;\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    $result[]\
    \ = $max_depth;\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0izv5yvr.php:41\n\
    Stack trace:\n#0 /tmp/tmp0izv5yvr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0izv5yvr.php\
    \ on line 41\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $depth++;\n           \
    \ if ($depth > $max_depth) {\n                $max_depth = $depth;\n         \
    \   }\n        } elseif ($paren == ')') {\n            $max_depth_array[] = $max_depth;\n\
    \            $max_depth = 0;\n            $depth--;\n        }\n    }\n    return\
    \ $max_depth_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_tqozpl.php:34\n\
    Stack trace:\n#0 /tmp/tmpe_tqozpl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpe_tqozpl.php\
    \ on line 34\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $output_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_stack[] = $paren;\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } else {\n\
    \            if ($paren == ')') {\n                array_pop($paren_stack);\n\
    \                $current_depth--;\n            }\n        }\n        if (empty($paren_stack))\
    \ {\n            $output_array[] = $max_depth;\n            $max_depth = 0;\n\
    \            $current_depth = 0;\n        }\n    }\n    return $output_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp0r5vv8_a.php on line 36

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n   \
    \     $max_depth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $depth++;\n\
    \                if ($depth > $max_depth) {\n                    $max_depth =\
    \ $depth;\n                }\n            } else if ($paren[$i] == \")\") {\n\
    \                $depth--;\n            }\n        }\n        $max_depth_array[]\
    \ = $max_depth;\n    }\n    return $max_depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_levels = [];\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n        } elseif ($paren\
    \ == ')') {\n            array_pop($paren_stack);\n            $max_level = max($max_level,\
    \ count($paren_stack));\n        }\n    }\n    return $max_level;\n}\n\necho parse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9yg4hsd.php:30\n\
    Stack trace:\n#0 /tmp/tmpf9yg4hsd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf9yg4hsd.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"2\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    2\", \"1\", $paren_string);\n    $paren_string = str_replace(\"0\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"0\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"0\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"0\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"0\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"0\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"0\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"0\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"0\", $paren_string);\n    $paren_string = str_replace(\"0\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"0\", $paren_string\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp7zx3zr31.php
    on line 33

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_depth[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpjv9v6m8k.php:11\nStack trace:\n#0 /tmp/tmpjv9v6m8k.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpjv9v6m8k.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpjv9v6m8k.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpjv9v6m8k.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pbabhdw.php:25\n\
    Stack trace:\n#0 /tmp/tmp2pbabhdw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2pbabhdw.php\
    \ on line 25\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpzb08h9cc.php
    on line 36

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9dh9c3f.php:24\n\
    Stack trace:\n#0 /tmp/tmpd9dh9c3f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd9dh9c3f.php\
    \ on line 24\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $stack\
    \ = new SplStack();\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $stack->push($paren);\n            $depth++;\n            if ($depth >\
    \ $max_depth) {\n                $max_depth = $depth;\n            }\n       \
    \ } else {\n            if ($stack->isEmpty()) {\n                $result[] =\
    \ $max_depth;\n                $max_depth = 0;\n                $depth = 0;\n\
    \            } else {\n                $stack->pop();\n                $depth--;\n\
    \            }\n        }\n    }\n    $result[] = $max_depth;\n    return $result;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$result = parse_nested_parens($paren_string);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp93bd3zvv.php:45\nStack trace:\n#0 /tmp/tmp93bd3zvv.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmp93bd3zvv.php on line 45\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    $paren_count_array = array();\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == \"(\") {\n            $paren_count++;\n            if ($paren_count\
    \ > $max_paren_count) {\n                $max_paren_count = $paren_count;\n  \
    \          }\n        } else if ($paren == \")\") {\n            $paren_count_array[]\
    \ = $paren_count;\n            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1elo2eef.php:32\n\
    Stack trace:\n#0 /tmp/tmp1elo2eef.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1elo2eef.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ return $paren_string;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6oqbvsg.php:23\n\
    Stack trace:\n#0 /tmp/tmpm6oqbvsg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm6oqbvsg.php\
    \ on line 23\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqf03oks5.php:36\n\
    Stack trace:\n#0 /tmp/tmpqf03oks5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqf03oks5.php\
    \ on line 36\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpznfs7334.php on line 35

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = count($paren_array);\n\
    \    $paren_level = 0;\n    $paren_max_level = 0;\n    $paren_max_level_array\
    \ = array();\n    for ($i = 0; $i < $paren_count; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_level++;\n            if ($paren_level > $paren_max_level)\
    \ {\n                $paren_max_level = $paren_level;\n            }\n       \
    \ } else {\n            $paren_level--;\n            $paren_max_level_array[]\
    \ = $paren_max_level;\n            $paren_max_level = 0;\n        }\n    }\n \
    \   return $paren_max_level_array;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_max_level_array = parse_nested_parens($paren_string);\nprint_r($paren_max_level_array);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 0\n    [5] => 0\n    [6] => 0\n    [7] => 0\n    [8] => 0\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7z9klnhz.php:43\nStack trace:\n\
    #0 /tmp/tmp7z9klnhz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7z9klnhz.php\
    \ on line 43\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4c1wvpgc.php:11\nStack trace:\n#0 /tmp/tmp4c1wvpgc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4c1wvpgc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4c1wvpgc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4c1wvpgc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\)\\s*/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\)\\s*/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpyl1z_pff.php
    on line 27

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $max_depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            $max_depth = max($max_depth, $current_depth);\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \            array_pop($paren_stack);\n            if (empty($paren_stack)) {\n\
    \                array_push($max_depth_array, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \ \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpu32spfqc.php on line 46

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren\
    \ == '(') {\n            $depth++;\n            if ($depth > $max_depth) {\n \
    \               $max_depth = $depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $depth--;\n        }\n        if ($depth == 0) {\n  \
    \          $stack[] = $max_depth;\n            $max_depth = 0;\n        }\n  \
    \  }\n    return $stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzrd7hrv.php:38\n\
    Stack trace:\n#0 /tmp/tmpuzrd7hrv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuzrd7hrv.php\
    \ on line 38\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lagekr9.php:24\n\
    Stack trace:\n#0 /tmp/tmp2lagekr9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2lagekr9.php\
    \ on line 24\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '',\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpvyw6ph9w.php on line 35

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_depth = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $depth = 0;\n    $max_depth_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $depth++;\n      } else if ($paren_group[$i] == \")\")\
    \ {\n        $depth--;\n      }\n      if ($depth > $max_depth_in_group) {\n \
    \       $max_depth_in_group = $depth;\n      }\n    }\n    $max_depth[] = $max_depth_in_group;\n\
    \  }\n  return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmp5ge2oyfc.php:11\nStack trace:\n#0 /tmp/tmp5ge2oyfc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp5ge2oyfc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp5ge2oyfc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp5ge2oyfc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_nesting =\
    \ 0;\n    $nesting_level = 0;\n    $nesting_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $nesting_level++;\n            if ($nesting_level > $max_nesting)\
    \ {\n                $max_nesting = $nesting_level;\n            }\n        }\
    \ elseif ($paren == ')') {\n            array_pop($paren_stack);\n           \
    \ $nesting_level--;\n            if (empty($paren_stack)) {\n                array_push($nesting_array,\
    \ $max_nesting);\n                $max_nesting = 0;\n            }\n        }\n\
    \    }\n    return $nesting_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $paren_depth_index = 0;\n    $paren_depth_max = 0;\n    $paren_depth_max_index\
    \ = 0;\n    $paren_depth_max_index_prev = 0;\n    $paren_depth_max_index_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev = 0;\n    $paren_depth_max_index_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n \
    \   $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    $paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpek33xduh.php
    on line 30

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $paren_depth_max = 0;\n    $paren_depth_index = 0;\n    foreach\
    \ ($paren_array as $paren_char) {\n        if ($paren_char == '(') {\n       \
    \     array_push($paren_stack, $paren_char);\n            $paren_depth[$paren_depth_index]++;\n\
    \            $paren_depth_max = max($paren_depth_max, $paren_depth[$paren_depth_index]);\n\
    \        } elseif ($paren_char == ')') {\n            if (count($paren_stack)\
    \ > 0) {\n                array_pop($paren_stack);\n                $paren_depth[$paren_depth_index]--;\n\
    \            } else {\n                $paren_depth_index++;\n            }\n\
    \        }\n    }\n    return $paren_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm2urx7iu.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm2urx7iu.php:36\nStack\
    \ trace:\n#0 /tmp/tmpm2urx7iu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpm2urx7iu.php\
    \ on line 36\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpznfs7334.php on line 35

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpznfs7334.php on line 35

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == \"(\") {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == \")\") {\n            $paren_count--;\n         \
    \   if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmna4ihyv.php:25\n\
    Stack trace:\n#0 /tmp/tmpmna4ihyv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmna4ihyv.php\
    \ on line 25\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_count = 0;\n  $max_paren_count = 0;\n\
    \  $paren_count_array = array();\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == \"(\") {\n      $paren_count++;\n      if ($paren_count > $max_paren_count)\
    \ {\n        $max_paren_count = $paren_count;\n      }\n    } elseif ($paren ==\
    \ \")\") {\n      $paren_count_array[] = $paren_count;\n      $paren_count--;\n\
    \    }\n  }\n  return $paren_count_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgel5olx.php:32\n\
    Stack trace:\n#0 /tmp/tmpxgel5olx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxgel5olx.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpzb08h9cc.php
    on line 36

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_depth[] = get_max_depth($paren_group);\n\
    \    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_depth()\
    \ in /tmp/tmpyj41kr33.php:11\nStack trace:\n#0 /tmp/tmpyj41kr33.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpyj41kr33.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpyj41kr33.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpyj41kr33.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $depth = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n\
    \            if ($paren_group[$i] == \"(\") {\n                $depth++;\n   \
    \         } else if ($paren_group[$i] == \")\") {\n                $depth--;\n\
    \            }\n        }\n        array_push($max_depth_array, $depth);\n   \
    \ }\n    return $max_depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyg1kf84.php:30\n\
    Stack trace:\n#0 /tmp/tmplyg1kf84.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplyg1kf84.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $nested_parens = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nested_parens[] = parse_parens($paren_group);\n\
    \    }\n    return $nested_parens;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmp5n666vqm.php:11\nStack trace:\n#0 /tmp/tmp5n666vqm.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp5n666vqm.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp5n666vqm.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp5n666vqm.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $paren_depth = array();\n    foreach ($paren_array as $paren) {\n       \
    \ if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n    \
    \        $max_depth = max($max_depth, count($paren_stack));\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n        }\n     \
    \   array_push($paren_depth, $max_depth);\n    }\n    return $paren_depth;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44s4ewwj.php:30\n\
    Stack trace:\n#0 /tmp/tmp44s4ewwj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp44s4ewwj.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $depth = 0;\n    $paren_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $depth++;\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        } elseif ($paren == ')')\
    \ {\n            $depth--;\n        } else {\n            echo \"Invalid character\
    \ $paren\\n\";\n            return;\n        }\n        if ($depth == 0) {\n \
    \           $paren_depth_array[] = $max_depth;\n            $max_depth = 0;\n\
    \        }\n    }\n    return $paren_depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $max_depth = array();\n    foreach ($paren_array as $paren_group) {\n     \
    \   $depth = 0;\n        $max_depth_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $depth++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $depth--;\n\
    \            }\n            if ($depth > $max_depth_in_group) {\n            \
    \    $max_depth_in_group = $depth;\n            }\n        }\n        $max_depth[]\
    \ = $max_depth_in_group;\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $result = array();\n    $current_level = 0;\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_level++;\n            if ($current_level > $max_level)\
    \ {\n                $max_level = $current_level;\n            }\n        } else\
    \ {\n            $result[] = $max_level;\n            $max_level = 0;\n      \
    \      $current_level = 0;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyis0_sbo.php:33\n\
    Stack trace:\n#0 /tmp/tmpyis0_sbo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyis0_sbo.php\
    \ on line 33\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $paren_depth_max = 0;\n    $paren_depth_max_index = 0;\n    $paren_depth_index\
    \ = 0;\n    $paren_depth_count = 0;\n    $paren_depth_count_max = 0;\n    $paren_depth_count_max_index\
    \ = 0;\n    $paren_depth_count_index = 0;\n    $paren_depth_count_index_max =\
    \ 0;\n    $paren_depth_count_index_max_index = 0;\n    $paren_depth_count_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index = 0;\n    $paren_depth_count_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index =\
    \ 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0;\n    $paren_depth_count_index_max_index_max_index_max_index\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp9ypw51ez.php
    on line 33

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\)\\s*/', '()',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\)\\\
    s*\\)\\s*/', '(())', $paren_string);\n    $paren_string = preg_replace('/\\s*\\\
    (\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*/', '((()))', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\\
    s*/', '(((())))', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '((((()))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '(((((())))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\\
    s*/', '((((((()))))))', $paren_string);\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpr2bt5rhd.php on line 29

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4c1wvpgc.php:11\nStack trace:\n#0 /tmp/tmp4c1wvpgc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4c1wvpgc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4c1wvpgc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4c1wvpgc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            array_push($paren_depth,\
    \ $max_depth);\n            $current_depth--;\n            $max_depth = 0;\n \
    \       }\n    }\n    return $paren_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21o_rvxy.php:36\n\
    Stack trace:\n#0 /tmp/tmp21o_rvxy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp21o_rvxy.php\
    \ on line 36\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $paren_count_index = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $paren_count[$paren_count_index] = count($paren_stack);\n         \
    \   $paren_count_index++;\n        }\n    }\n    return $paren_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hhkgyn3.php:30\n\
    Stack trace:\n#0 /tmp/tmp7hhkgyn3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7hhkgyn3.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpjmkb_6vb.php on line 44

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '()', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(\\s+/', ' (',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)\\s+/', ') ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)\\s+\\(/', ') (', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\(\\s+\\)/', ' ()', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+\\)\\s+/', '() ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\(\\s+\\)/', ' ()', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+\\)\\s+/', '() ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\(\\s+\\)/', ' ()', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+\\)\\s+/', '() ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\(\\s+\\)/', ' ()', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+\\)\\s+/', '() ', $paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpwfqq9u_x.php on line 36

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $stack = array();\n  $max_depth = 0;\n  $depth\
    \ = 0;\n  $result = array();\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      array_push($stack, $paren);\n      $depth++;\n      if ($depth\
    \ > $max_depth) {\n        $max_depth = $depth;\n      }\n    } else {\n     \
    \ array_pop($stack);\n      $depth--;\n      if (empty($stack)) {\n        array_push($result,\
    \ $max_depth);\n        $max_depth = 0;\n      }\n    }\n  }\n  return $result;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$result = parse_nested_parens($paren_string);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $paren_groups_count = count($paren_groups);\n    $paren_groups_max_nesting\
    \ = array();\n    for ($i = 0; $i < $paren_groups_count; $i++) {\n        $paren_groups_max_nesting[$i]\
    \ = 0;\n        $paren_group_len = strlen($paren_groups[$i]);\n        $paren_group_nesting\
    \ = 0;\n        for ($j = 0; $j < $paren_group_len; $j++) {\n            if ($paren_groups[$i][$j]\
    \ == '(') {\n                $paren_group_nesting++;\n            } else if ($paren_groups[$i][$j]\
    \ == ')') {\n                $paren_group_nesting--;\n            }\n        \
    \    if ($paren_group_nesting > $paren_groups_max_nesting[$i]) {\n           \
    \     $paren_groups_max_nesting[$i] = $paren_group_nesting;\n            }\n \
    \       }\n    }\n    return $paren_groups_max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n        } else {\n    \
    \        $paren_count--;\n        }\n        if ($paren_count > $max_count) {\n\
    \            $max_count = $paren_count;\n        }\n        if ($paren_count ==\
    \ 0) {\n            $max_count_array[] = $max_count;\n            $max_count =\
    \ 0;\n        }\n    }\n    return $max_count_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } else {\n            $paren_count--;\n            if ($paren_count ==\
    \ 0) {\n                $paren_max_array[] = $paren_max;\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == \"(\") {\n            $paren_count++;\n        } else {\n  \
    \          $paren_count--;\n        }\n        if ($paren_count > $max_count)\
    \ {\n            $max_count = $paren_count;\n        }\n        if ($paren_count\
    \ == 0) {\n            array_push($max_count_array, $max_count);\n           \
    \ $max_count = 0;\n        }\n    }\n    return $max_count_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  $paren_depth_array = array();\n  foreach ($paren_array as $paren) {\n\
    \    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth >\
    \ $max_depth) {\n        $max_depth = $current_depth;\n      }\n      array_push($paren_stack,\
    \ $paren);\n    } elseif ($paren == ')') {\n      $current_depth--;\n      array_pop($paren_stack);\n\
    \      if (empty($paren_stack)) {\n        array_push($paren_depth_array, $max_depth);\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n      }\n    }\n  }\n \
    \ return $paren_depth_array;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_depth_array = parse_nested_parens($paren_string);\nprint_r($paren_depth_array);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \"\
    , $paren_string);\n    $max_nesting = 0;\n    $max_nesting_array = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_group = trim($paren_group);\n\
    \        $paren_group_length = strlen($paren_group);\n        $nesting = 0;\n\
    \        $max_nesting = 0;\n        for ($i = 0; $i < $paren_group_length; $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } else if ($paren_group[$i] == \"\
    )\") {\n                $nesting--;\n            }\n        }\n        $max_nesting_array[]\
    \ = $max_nesting;\n    }\n    return $max_nesting_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp930797l4.php:11\nStack trace:\n#0 /tmp/tmp930797l4.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp930797l4.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp930797l4.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp930797l4.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('( ', '(', $paren_string);\n    $paren_string\
    \ = str_replace(' )', ')', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n    $paren_string = str_replace(' )', ')', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpved0c5yu.php on line 47

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4c1wvpgc.php:11\nStack trace:\n#0 /tmp/tmp4c1wvpgc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4c1wvpgc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4c1wvpgc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4c1wvpgc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_groups as $paren_group) {\n    $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpyz7anjyv.php:11\nStack trace:\n#0 /tmp/tmpyz7anjyv.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpyz7anjyv.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpyz7anjyv.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpyz7anjyv.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"1\", $paren_string);\n    $paren_string = str_replace(\")\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"0\", \")\", $paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpzxicifzq.php on line 43

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \"\
    , $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $result[] = parse_nested_parens_helper($paren_group);\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp6nhdqix9.php:12\nStack trace:\n#0 /tmp/tmp6nhdqix9.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp6nhdqix9.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp6nhdqix9.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp6nhdqix9.php\
    \ on line 12\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbf3njcdr.php:11\nStack trace:\n#0 /tmp/tmpbf3njcdr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbf3njcdr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbf3njcdr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbf3njcdr.php\
    \ on line 11\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpxdyrwmhz.php:11\nStack trace:\n#0 /tmp/tmpxdyrwmhz.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpxdyrwmhz.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpxdyrwmhz.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpxdyrwmhz.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp3q7izqvw.php on line 36

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n            } else\
    \ {\n                $depth--;\n            }\n            if ($depth > $max_depth_in_group)\
    \ {\n                $max_depth_in_group = $depth;\n            }\n        }\n\
    \        $max_depth[] = $max_depth_in_group;\n    }\n    return $max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\")\
    \ {\n                $current_depth++;\n                if ($current_depth > $max_depth)\
    \ {\n                    $max_depth = $current_depth;\n                }\n   \
    \         } else if ($paren_group[$i] == \")\") {\n                $current_depth--;\n\
    \            }\n        }\n        $max_depth_array[] = $max_depth;\n    }\n \
    \   return $max_depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_levels = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $level++;\n                if\
    \ ($level > $max_level) {\n                    $max_level = $level;\n        \
    \        }\n            } else if ($paren_group[$i] == \")\") {\n            \
    \    $level--;\n            }\n        }\n        $max_levels[] = $max_level;\n\
    \    }\n    return $max_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == \"(\") {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == \")\") {\n            $paren_count--;\n         \
    \   if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $output_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (count($paren_stack) == 0) {\n                array_push($output_array,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $output_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwe8ur_j.php:20\n\
    Stack trace:\n#0 /tmp/tmpzwe8ur_j.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzwe8ur_j.php\
    \ on line 20\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = 0;\n\
    \    $max_nesting_array = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $nesting = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n        }\n        if ($nesting > $max_nesting) {\n          \
    \  $max_nesting = $nesting;\n        }\n        array_push($max_nesting_array,\
    \ $nesting);\n    }\n    return $max_nesting_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tjmsdtc.php:33\n\
    Stack trace:\n#0 /tmp/tmp9tjmsdtc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9tjmsdtc.php\
    \ on line 33\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n            } else\
    \ if ($paren_group[$i] == \")\") {\n                $depth--;\n            }\n\
    \            if ($depth > $max_depth_in_group) {\n                $max_depth_in_group\
    \ = $depth;\n            }\n        }\n        $max_depth[] = $max_depth_in_group;\n\
    \    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n  $paren_depth\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      array_push($paren_stack, $paren);\n      $max_depth = max($max_depth, count($paren_stack));\n\
    \    } elseif ($paren == ')') {\n      array_pop($paren_stack);\n    }\n    array_push($paren_depth,\
    \ $max_depth);\n  }\n  return $paren_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0mu66wm.php:30\n\
    Stack trace:\n#0 /tmp/tmph0mu66wm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph0mu66wm.php\
    \ on line 30\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    $depth = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $depth++;\n            $max_depth\
    \ = max($max_depth, $depth);\n            array_push($paren_stack, $paren);\n\
    \        } elseif ($paren == ')') {\n            $depth--;\n            array_pop($paren_stack);\n\
    \            if (empty($paren_stack)) {\n                array_push($depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_level =\
    \ 0;\n    $paren_levels = array();\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == \"(\") {\n            $paren_stack[] = $paren;\n       \
    \     $paren_level++;\n        } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n\
    \            $paren_levels[] = $paren_level;\n            $paren_level--;\n  \
    \      }\n    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi7rli60.php:31\n\
    Stack trace:\n#0 /tmp/tmppi7rli60.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppi7rli60.php\
    \ on line 31\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_nesting =\
    \ 0;\n    $nesting_array = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \        } else {\n            array_pop($paren_stack);\n            $max_nesting\
    \ = max($max_nesting, count($paren_stack));\n        }\n        if ($paren ==\
    \ \")\") {\n            array_push($nesting_array, $max_nesting);\n        }\n\
    \    }\n    return $nesting_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgr35n_xd.php:32\n\
    Stack trace:\n#0 /tmp/tmpgr35n_xd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgr35n_xd.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp36cdxvlx.php
    on line 35

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \   } else if ($paren == \")\") {\n            $depth--;\n            if ($depth\
    \ == 0) {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"(1\", $paren_string);\n    $paren_string = str_replace(\")\", \")1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(1)\", \"1\", $paren_string);\n    $paren_string\
    \ = str_replace(\"1\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ")" in /tmp/tmpjftdqtgk.php on line
    39

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_groups as $group) {\n    $nesting = 0;\n    $max_nesting_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $nesting++;\n      } else if ($group[$i] == ')') {\n       \
    \ $nesting--;\n      }\n      $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n    }\n    $max_nesting[] = $max_nesting_in_group;\n  }\n  return\
    \ $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_nesting =\
    \ 0;\n    $nesting_array = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $max_nesting = max($max_nesting, count($paren_stack));\n        }\n\
    \        if ($paren == ' ') {\n            array_push($nesting_array, $max_nesting);\n\
    \            $max_nesting = 0;\n        }\n    }\n    array_push($nesting_array,\
    \ $max_nesting);\n    return $nesting_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2eh0yotn.php:34\n\
    Stack trace:\n#0 /tmp/tmp2eh0yotn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2eh0yotn.php\
    \ on line 34\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"(((\", \"(\", $paren_string);\n    $paren_string\
    \ = str_replace(\")))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ((((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"))))\", \")\"\
    , $paren_string);\n    $paren_string = str_replace(\"(((((\", \"(\", $paren_string);\n\
    \    $paren_string = str_replace(\"))))))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"((((((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    )))))))\", \")\", $paren_string);\n    $paren_string = str_replace(\"(((((((\"\
    , \"(\", $paren_string);\n    $paren_string = str_replace(\"))))))))\", \")\"\
    , $paren_string);\n    $paren_string = str_replace(\"((((((((\", \"(\", $paren_string);\n\
    \    $paren_string = str_replace(\")))))))))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(((((((((\", \"(\", $paren_string);\n    $paren_string = str_replace(\"\
    ))))))))))\", \")\", $paren_string);\n    $paren_string = str_replace(\"((((((((((\"\
    , \"(\", $paren_string);\n    $paren_string = str_replace(\")))))))))))\", \"\
    )\", $paren_string);\n    $paren_string = str_replace(\"(((((((((((\", \"(\",\
    \ $paren_string);\n    $paren_string\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp7if_xcxs.php
    on line 33

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4c1wvpgc.php:11\nStack trace:\n#0 /tmp/tmp4c1wvpgc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4c1wvpgc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4c1wvpgc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4c1wvpgc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*/',\
    \ '(', $paren_string);\n    $paren_string = preg_replace('/\\s*\\)\\s*/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\)\\s*/', '()',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\)\\\
    s*\\)\\s*/', '(())', $paren_string);\n    $paren_string = preg_replace('/\\s*\\\
    (\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*/', '((()))', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\\
    s*/', '(((())))', $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '((((()))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*/', '(((((())))))',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s*\\(\\s*\\(\\s*\\(\\\
    s*\\(\\s*\\(\\s*\\(\\s*\\(\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\\
    s*/', '((((((()))))))', $paren_string);\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpr2bt5rhd.php on line 29

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2awy2063.php on line 46

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_nesting =\
    \ 0;\n    $nesting_array = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \        } else {\n            array_pop($paren_stack);\n            $max_nesting\
    \ = max($max_nesting, count($paren_stack));\n        }\n        if ($paren ==\
    \ \")\") {\n            array_push($nesting_array, $max_nesting);\n        }\n\
    \    }\n    return $nesting_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgr35n_xd.php:32\n\
    Stack trace:\n#0 /tmp/tmpgr35n_xd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgr35n_xd.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6xuhz54.php:24\n\
    Stack trace:\n#0 /tmp/tmpt6xuhz54.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt6xuhz54.php\
    \ on line 24\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $result = array();\n \
    \ foreach ($paren_array as $paren_group) {\n    $result[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmprx9if2_t.php:11\nStack trace:\n#0 /tmp/tmprx9if2_t.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmprx9if2_t.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmprx9if2_t.php(26): test()\n#3 {main}\n  thrown in /tmp/tmprx9if2_t.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = get_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpwbvby0c9.php:11\nStack trace:\n#0 /tmp/tmpwbvby0c9.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpwbvby0c9.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpwbvby0c9.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpwbvby0c9.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \      if (count($paren_stack) == 0) {\n                array_push($max_depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $max_depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $depth++;\n           \
    \ if ($depth > $max_depth) {\n                $max_depth = $depth;\n         \
    \   }\n        } elseif ($paren == ')') {\n            $max_depth_array[] = $max_depth;\n\
    \            $max_depth = 0;\n            $depth--;\n        }\n    }\n    return\
    \ $max_depth_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_tqozpl.php:34\n\
    Stack trace:\n#0 /tmp/tmpe_tqozpl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpe_tqozpl.php\
    \ on line 34\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n            if ($current_depth == 0) {\n            \
    \    $max_depth_array[] = $max_depth;\n                $max_depth = 0;\n     \
    \       }\n        }\n    }\n    return $max_depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $nesting = 0;\n        $max_nesting_temp\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting_temp)\
    \ {\n                    $max_nesting_temp = $nesting;\n                }\n  \
    \          } else {\n                $nesting--;\n            }\n        }\n \
    \       $max_nesting[] = $max_nesting_temp;\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            array_push($depth_array,\
    \ $max_depth);\n            $current_depth--;\n            $max_depth = 0;\n \
    \       }\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqb4iens.php:36\n\
    Stack trace:\n#0 /tmp/tmpwqb4iens.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwqb4iens.php\
    \ on line 36\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = parse_nested_paren($paren);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpbuo7onij.php:11\nStack trace:\n#0 /tmp/tmpbuo7onij.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpbuo7onij.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpbuo7onij.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpbuo7onij.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j083s6m.php:26\n\
    Stack trace:\n#0 /tmp/tmp8j083s6m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8j083s6m.php\
    \ on line 26\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_nesting[] = max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_nesting()\
    \ in /tmp/tmpadmsuoc6.php:11\nStack trace:\n#0 /tmp/tmpadmsuoc6.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpadmsuoc6.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpadmsuoc6.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpadmsuoc6.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ return $paren_string;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6oqbvsg.php:23\n\
    Stack trace:\n#0 /tmp/tmpm6oqbvsg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm6oqbvsg.php\
    \ on line 23\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ianjf_1.php:23\n\
    Stack trace:\n#0 /tmp/tmp1ianjf_1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1ianjf_1.php\
    \ on line 23\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpzb08h9cc.php
    on line 36

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_count = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $paren_count[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp7olwbmjp.php:11\nStack trace:\n#0 /tmp/tmp7olwbmjp.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp7olwbmjp.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp7olwbmjp.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp7olwbmjp.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $max_nested_arr = array();\n\
    \    foreach ($paren_arr as $paren_group) {\n        $max_nested_arr[] = get_max_nested_parens($paren_group);\n\
    \    }\n    return $max_nested_arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nested_parens()\
    \ in /tmp/tmp80psymlf.php:11\nStack trace:\n#0 /tmp/tmp80psymlf.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp80psymlf.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp80psymlf.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp80psymlf.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = array();\n  foreach ($paren_groups as $group) {\n    $nesting\
    \ = 0;\n    $max_nesting_in_group = 0;\n    for ($i = 0; $i < strlen($group);\
    \ $i++) {\n      if ($group[$i] == '(') {\n        $nesting++;\n      } else if\
    \ ($group[$i] == ')') {\n        $nesting--;\n      }\n      if ($nesting > $max_nesting_in_group)\
    \ {\n        $max_nesting_in_group = $nesting;\n      }\n    }\n    $max_nesting[]\
    \ = $max_nesting_in_group;\n  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $result = array();\n \
    \ foreach ($paren_array as $paren_group) {\n    $result[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmprx9if2_t.php:11\nStack trace:\n#0 /tmp/tmprx9if2_t.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmprx9if2_t.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmprx9if2_t.php(26): test()\n#3 {main}\n  thrown in /tmp/tmprx9if2_t.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $nesting = 0;\n    $max_nesting_level\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $nesting++;\n      } elseif ($paren_group[$i] == \")\"\
    ) {\n        $nesting--;\n      }\n      if ($nesting > $max_nesting_level) {\n\
    \        $max_nesting_level = $nesting;\n      }\n    }\n    $max_nesting[] =\
    \ $max_nesting_level;\n  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == \"(\") {\n            $depth++;\n         \
    \   if ($depth > $max_depth) {\n                $max_depth = $depth;\n       \
    \     }\n        } else if ($paren == \")\") {\n            $max_depth_array[]\
    \ = $max_depth;\n            $max_depth = 0;\n            $depth--;\n        }\n\
    \    }\n    return $max_depth_array;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa1yr6m8x.php:34\n\
    Stack trace:\n#0 /tmp/tmpa1yr6m8x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa1yr6m8x.php\
    \ on line 34\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_paren()\
    \ in /tmp/tmpqa4093sx.php:11\nStack trace:\n#0 /tmp/tmpqa4093sx.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpqa4093sx.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpqa4093sx.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpqa4093sx.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } else {\n            $paren_count--;\n            if ($paren_count ==\
    \ 0) {\n                $paren_max_array[] = $paren_max;\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_array as $paren) {\n    $nesting = 0;\n    $max_nesting_in_paren\
    \ = 0;\n    for ($i = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] ==\
    \ \"(\") {\n        $nesting++;\n      } else if ($paren[$i] == \")\") {\n   \
    \     $nesting--;\n      }\n      if ($nesting > $max_nesting_in_paren) {\n  \
    \      $max_nesting_in_paren = $nesting;\n      }\n    }\n    $max_nesting[] =\
    \ $max_nesting_in_paren;\n  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpzb08h9cc.php
    on line 36

    '
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpthvtv9np.php:11\nStack trace:\n#0 /tmp/tmpthvtv9np.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpthvtv9np.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpthvtv9np.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpthvtv9np.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4c1wvpgc.php:11\nStack trace:\n#0 /tmp/tmp4c1wvpgc.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4c1wvpgc.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4c1wvpgc.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4c1wvpgc.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_groups as $paren_group) {\n\
    \        $max_nesting[] = get_max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpywjd8opf.php:13\nStack trace:\n#0 /tmp/tmpywjd8opf.php(19): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpywjd8opf.php(23): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpywjd8opf.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpywjd8opf.php\
    \ on line 13\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_depth = 0;\n  $depth\
    \ = 0;\n  $max_depth_array = array();\n  foreach ($paren_array as $paren_group)\
    \ {\n    $max_depth = 0;\n    $depth = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      if ($paren_group[$i] == \"(\") {\n        $depth++;\n       \
    \ if ($depth > $max_depth) {\n          $max_depth = $depth;\n        }\n    \
    \  } else if ($paren_group[$i] == \")\") {\n        $depth--;\n      }\n    }\n\
    \    array_push($max_depth_array, $max_depth);\n  }\n  return $max_depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pbabhdw.php:25\n\
    Stack trace:\n#0 /tmp/tmp2pbabhdw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2pbabhdw.php\
    \ on line 25\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpitwpn7zj.php:11\nStack trace:\n#0 /tmp/tmpitwpn7zj.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpitwpn7zj.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpitwpn7zj.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpitwpn7zj.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $max_level = 0;\n    foreach ($paren_string as $paren) {\n        if (strlen($paren)\
    \ > $max_level) {\n            $max_level = strlen($paren);\n        }\n    }\n\
    \    return $max_level;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$result = parse_nested_parens($paren_string);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadcsknk3.php:32\n\
    Stack trace:\n#0 /tmp/tmpadcsknk3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpadcsknk3.php\
    \ on line 32\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_depth = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $paren_depth[] = get_paren_depth($paren_group);\n\
    \  }\n  return $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_paren_depth()\
    \ in /tmp/tmpguamyh6i.php:11\nStack trace:\n#0 /tmp/tmpguamyh6i.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpguamyh6i.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpguamyh6i.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpguamyh6i.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp2y7qqnms.php:11\nStack trace:\n#0 /tmp/tmp2y7qqnms.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp2y7qqnms.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp2y7qqnms.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp2y7qqnms.php\
    \ on line 11\n"
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $max_count = 0;\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            array_push($paren_stack, $paren);\n   \
    \     } else {\n            array_pop($paren_stack);\n            $max_count =\
    \ max($max_count, count($paren_stack));\n        }\n    }\n    return $max_count;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fy2iqhc.php:31\n\
    Stack trace:\n#0 /tmp/tmp4fy2iqhc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4fy2iqhc.php\
    \ on line 31\n"
  timestamp: 1659797818
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } elseif ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ return $paren_string;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6oqbvsg.php:23\n\
    Stack trace:\n#0 /tmp/tmpm6oqbvsg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm6oqbvsg.php\
    \ on line 23\n"
  timestamp: 1659797818
