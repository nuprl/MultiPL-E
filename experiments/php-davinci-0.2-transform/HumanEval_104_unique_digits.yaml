name: HumanEval_104_unique_digits
language: php
prompt: "<?php\n// Given a list of positive integers x. return a sorted list of all\
  \ \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted\
  \ in increasing order.\n// For example:\n// >>> unique_digits(array(15, 33, 1422,\
  \ 1))\n// array(1, 15, 33)\n// >>> unique_digits(array(152, 323, 1422, 10))\n//\
  \ array()\nfunction unique_digits($x) {\n"
tests: "function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
  \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
  \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) {\
  \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = array();\n  foreach ($x as $num) {\n    $has_even = false;\n\
    \    $digits = str_split($num);\n    foreach ($digits as $digit) {\n      if ($digit\
    \ % 2 == 0) {\n        $has_even = true;\n        break;\n      }\n    }\n   \
    \ if (!$has_even) {\n      $result[] = $num;\n    }\n  }\n  sort($result);\n \
    \ return $result;\n}\n", "\t$result = array();\n\tforeach ($x as $value) {\n\t\
    \t$value = strval($value);\n\t\t$is_unique = true;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\tarray_push($result, intval($value));\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n", "    $result = array();\n\
    \    foreach ($x as $num) {\n        $has_even = false;\n        $num_str = strval($num);\n\
    \        for ($i = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i]\
    \ % 2 == 0) {\n                $has_even = true;\n                break;\n   \
    \         }\n        }\n        if (!$has_even) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = array();\n    foreach ($x as $num) {\n        $num_str = (string)$num;\n \
    \       $has_even = false;\n        for ($i = 0; $i < strlen($num_str); $i++)\
    \ {\n            if ($num_str[$i] % 2 == 0) {\n                $has_even = true;\n\
    \                break;\n            }\n        }\n        if (!$has_even) {\n\
    \            $result[] = $num;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n", "    $result = array();\n    foreach ($x as $num) {\n      \
    \  $digits = str_split($num);\n        $has_even = false;\n        foreach ($digits\
    \ as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n", "    $result = array();\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $is_unique = true;\n        for ($i =\
    \ 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n      \
    \          $is_unique = false;\n                break;\n            }\n      \
    \  }\n        if ($is_unique) {\n            $result[] = $value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n$x = array(15, 33, 1422,\
    \ 1);\nprint_r(unique_digits($x));\necho \"\\n\";\n$x = array(152, 323, 1422,\
    \ 10);\nprint_r(unique_digits($x));\necho \"\\n\";", "    $result = array();\n\
    \    foreach ($x as $number) {\n        $digits = str_split($number);\n      \
    \  $has_even_digit = false;\n        foreach ($digits as $digit) {\n         \
    \   if ($digit % 2 == 0) {\n                $has_even_digit = true;\n        \
    \        break;\n            }\n        }\n        if (!$has_even_digit) {\n \
    \           $result[] = $number;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n", "    $result = array();\n    foreach ($x as $value) {\n    \
    \    if (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false) {\n            $result[] =\
    \ $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n", " \
    \ $result = array();\n  foreach ($x as $num) {\n    $num_str = (string)$num;\n\
    \    $has_even = false;\n    for ($i = 0; $i < strlen($num_str); $i++) {\n   \
    \   if ($num_str[$i] % 2 == 0) {\n        $has_even = true;\n        break;\n\
    \      }\n    }\n    if (!$has_even) {\n      $result[] = $num;\n    }\n  }\n\
    \  sort($result);\n  return $result;\n}\n", "\t$result = array();\n\tforeach ($x\
    \ as $num) {\n\t\t$has_even = false;\n\t\t$num_str = (string)$num;\n\t\tfor ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n\t\t\tif ($num_str[$i] % 2 == 0) {\n\t\t\
    \t\t$has_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\
    \t\t\t$result[] = $num;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n",
  "    $result = array();\n    foreach ($x as $num) {\n        if (strlen($num) ==\
    \ 1) {\n            $result[] = $num;\n        } else {\n            $digits =\
    \ str_split($num);\n            $flag = true;\n            foreach ($digits as\
    \ $digit) {\n                if ($digit % 2 == 0) {\n                    $flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($flag) {\n                $result[] = $num;\n            }\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result =\
    \ array();\n    foreach ($x as $value) {\n        $digits = str_split($value);\n\
    \        $is_unique = true;\n        foreach ($digits as $digit) {\n         \
    \   if ($digit % 2 == 0) {\n                $is_unique = false;\n            \
    \    break;\n            }\n        }\n        if ($is_unique) {\n           \
    \ $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($x as $number) {\n        if (strlen($number)\
    \ == 1) {\n            $result[] = $number;\n        } else {\n            $has_even\
    \ = false;\n            $digits = str_split($number);\n            foreach ($digits\
    \ as $digit) {\n                if ($digit % 2 == 0) {\n                    $has_even\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!$has_even) {\n                $result[] = $number;\n           \
    \ }\n        }\n    }\n    sort($result);\n    return $result;\n}\n", "  $result\
    \ = array();\n  foreach ($x as $value) {\n    if (strlen($value) == 1) {\n   \
    \   $result[] = $value;\n    } else {\n      $has_even = false;\n      $digits\
    \ = str_split($value);\n      foreach ($digits as $digit) {\n        if ($digit\
    \ % 2 == 0) {\n          $has_even = true;\n          break;\n        }\n    \
    \  }\n      if (!$has_even) {\n        $result[] = $value;\n      }\n    }\n \
    \ }\n  sort($result);\n  return $result;\n}\n", "    $result = array();\n    foreach\
    \ ($x as $value) {\n        $value = strval($value);\n        $has_even = false;\n\
    \        for ($i = 0; $i < strlen($value); $i++) {\n            if ($value[$i]\
    \ % 2 == 0) {\n                $has_even = true;\n                break;\n   \
    \         }\n        }\n        if (!$has_even) {\n            $result[] = intval($value);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = array();\n    foreach ($x as $number) {\n        if (strlen($number) == 1)\
    \ {\n            $result[] = $number;\n        } else {\n            $has_even\
    \ = false;\n            for ($i = 0; $i < strlen($number); $i++) {\n         \
    \       if ($number[$i] % 2 == 0) {\n                    $has_even = true;\n \
    \                   break;\n                }\n            }\n            if (!$has_even)\
    \ {\n                $result[] = $number;\n            }\n        }\n    }\n \
    \   sort($result);\n    return $result;\n}\n", "    $result = array();\n    foreach\
    \ ($x as $value) {\n        $has_even_digit = false;\n        $digits = str_split($value);\n\
    \        foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n \
    \               $has_even_digit = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even_digit) {\n            $result[] = $value;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "\t$result =\
    \ array();\n\tforeach ($x as $value) {\n\t\t$has_even = false;\n\t\twhile ($value\
    \ > 0) {\n\t\t\t$digit = $value % 10;\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t\
    $has_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$value = (int)($value / 10);\n\
    \t\t}\n\t\tif (!$has_even) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n", "    $result = array();\n    foreach ($x as $value) {\n\
    \        $has_even_digit = false;\n        for ($i = 0; $i < strlen($value); $i++)\
    \ {\n            if ($value[$i] % 2 == 0) {\n                $has_even_digit =\
    \ true;\n                break;\n            }\n        }\n        if (!$has_even_digit)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n", "    $result = array();\n    foreach ($x as $number)\
    \ {\n        $digits = str_split($number);\n        $has_even_digit = false;\n\
    \        foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n \
    \               $has_even_digit = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even_digit) {\n            $result[] = $number;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
