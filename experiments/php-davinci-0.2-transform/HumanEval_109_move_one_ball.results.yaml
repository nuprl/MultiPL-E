language: php
name: HumanEval_109_move_one_ball
results:
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $len = count($arr);\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($max - $min == $len - 1) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tlq7atq.php:50\n\
    Stack trace:\n#0 /tmp/tmp6tlq7atq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6tlq7atq.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst7t_cv9.php:49\n\
    Stack trace:\n#0 /tmp/tmpst7t_cv9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpst7t_cv9.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == 1 && $max == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdafbxmba.php:50\n\
    Stack trace:\n#0 /tmp/tmpdafbxmba.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdafbxmba.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$arr1 = array(3, 5, 4, 1, 2);\n$arr2\
    \ = array(1, 2, 3, 4, 5);\n$arr3 = array(5, 4, 3, 2, 1);\n$arr4 = array(1, 1,\
    \ 1, 1, 1);\n$arr5 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100);\necho move_one_ball($arr) . \"\\n\";\n\
    echo move_one_ball($arr1) . \"\\n\";\necho move_one_ball($arr2) . \"\\n\";\necho\
    \ move_one_ball($arr3) . \"\\n\";\necho move_one_ball($arr4) . \"\\\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptvcxuk2f.php on line 60

    '
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbpnlpxkr.php:69\nStack trace:\n#0 /tmp/tmpbpnlpxkr.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbpnlpxkr.php on line 69\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    $i = 0;\n    $j\
    \ = $count - 1;\n    while ($i < $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n\
    \            $temp = $arr[$i];\n            $arr[$i] = $arr[$i + 1];\n       \
    \     $arr[$i + 1] = $temp;\n            $i++;\n        } else {\n           \
    \ $temp = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n            $arr[$j\
    \ - 1] = $temp;\n            $j--;\n        }\n    }\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztb5io_y.php:53\n\
    Stack trace:\n#0 /tmp/tmpztb5io_y.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpztb5io_y.php\
    \ on line 53\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min_val = $arr[0];\n    $min_val_index\
    \ = 0;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min_val)\
    \ {\n            $min_val = $arr[$i];\n            $min_val_index = $i;\n    \
    \    }\n    }\n    if ($min_val_index == 0) {\n        return true;\n    }\n \
    \   $max_val = $arr[$min_val_index];\n    for ($i = $min_val_index + 1; $i < $arr_len;\
    \ $i++) {\n        if ($arr[$i] < $max_val) {\n            return false;\n   \
    \     }\n        $max_val = $arr[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tcfj6kz.php:56\n\
    Stack trace:\n#0 /tmp/tmp7tcfj6kz.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7tcfj6kz.php\
    \ on line 56\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_index\
    \ = 0;\n    $max_index = 0;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n            $min_index = $i;\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \     $max_index = $i;\n        }\n    }\n    if ($min_index == 0) {\n       \
    \ return true;\n    }\n    if ($max_index == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoexn8ypw.php:56\n\
    Stack trace:\n#0 /tmp/tmpoexn8ypw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpoexn8ypw.php\
    \ on line 56\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $len = count($arr);\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return true;\n\
    \    }\n    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index\
    \ == $len - 1) {\n        return false;\n    }\n    if ($min_index < $max_index)\
    \ {\n        return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnybvw4m_.php:62\n\
    Stack trace:\n#0 /tmp/tmpnybvw4m_.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpnybvw4m_.php\
    \ on line 62\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jpg3_lh.php:43\n\
    Stack trace:\n#0 /tmp/tmp_jpg3_lh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_jpg3_lh.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $max) {\n            return false;\n        }\n  \
    \      $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptx7qzccr.php:43\n\
    Stack trace:\n#0 /tmp/tmptx7qzccr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptx7qzccr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0 || $max_index == $len - 1) {\n        return true;\n  \
    \  }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx8e07cy.php:54\n\
    Stack trace:\n#0 /tmp/tmpfx8e07cy.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpfx8e07cy.php\
    \ on line 54\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_size = count($arr);\n    if ($arr_size\
    \ == 0) {\n        return true;\n    }\n    $min_val = min($arr);\n    $min_index\
    \ = array_search($min_val, $arr);\n    if ($min_index == 0) {\n        return\
    \ true;\n    }\n    $max_val = max($arr);\n    $max_index = array_search($max_val,\
    \ $arr);\n    if ($max_index == $arr_size - 1) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0e85p73e.php:46\n\
    Stack trace:\n#0 /tmp/tmp0e85p73e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0e85p73e.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yywwdih.php:31\n\
    Stack trace:\n#0 /tmp/tmp0yywwdih.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0yywwdih.php\
    \ on line 31\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp221gf6yr.php on line 65

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $count = 0;\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $count++;\n   \
    \     }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr)\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp2pqs723d.php on line 66

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count <= 1)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(7, 6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(8, 7, 6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4,\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpcxcypgdd.php on line 65

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yywwdih.php:31\n\
    Stack trace:\n#0 /tmp/tmp0yywwdih.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0yywwdih.php\
    \ on line 31\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\n$arr =\
    \ array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array();\necho move_one_ball($arr)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql9f4k5w.php:49\n\
    Stack trace:\n#0 /tmp/tmpql9f4k5w.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpql9f4k5w.php\
    \ on line 49\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    $arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array();\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpjvxrt9tg.php on line 75

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = count($arr);\n \
    \   for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcuqy5v7.php:43\n\
    Stack trace:\n#0 /tmp/tmpwcuqy5v7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwcuqy5v7.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $size = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $size;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21yc2bfo.php:43\n\
    Stack trace:\n#0 /tmp/tmp21yc2bfo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp21yc2bfo.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpejh5qcmp.php on line 65

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpbqkzp9dh.php on line 62

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5if97o6a.php:50\n\
    Stack trace:\n#0 /tmp/tmp5if97o6a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5if97o6a.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$len = count($arr);\n\tif ($len == 0) {\n\t\t\
    return true;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tfor ($i = 1; $i < $len;\
    \ $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif ($arr[$i]\
    \ > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\tif ($max - $min == $len - 1)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprea8m5bc.php:50\n\
    Stack trace:\n#0 /tmp/tmprea8m5bc.php(56): test()\n#1 {main}\n  thrown in /tmp/tmprea8m5bc.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1;\
    \ $i < $min_index; $i++) {\n        if ($arr[$i] > $max) {\n            $max =\
    \ $arr[$i];\n        }\n    }\n    if ($max > $min) {\n        return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk89c_a71.php:56\n\
    Stack trace:\n#0 /tmp/tmpk89c_a71.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpk89c_a71.php\
    \ on line 56\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = 0;\n    for ($i\
    \ = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min) {\n           \
    \ $min = $arr[$i];\n            $count++;\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($count > 1) {\n \
    \       return false;\n    }\n    if ($max == $min) {\n        return true;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrnu4yp.php:56\n\
    Stack trace:\n#0 /tmp/tmpurrnu4yp.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpurrnu4yp.php\
    \ on line 56\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 1, 1, 1, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bnz8tjs.php:61\n\
    Stack trace:\n#0 /tmp/tmp5bnz8tjs.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp5bnz8tjs.php\
    \ on line 61\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp221gf6yr.php on line 65

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohtpb0t0.php:32\n\
    Stack trace:\n#0 /tmp/tmpohtpb0t0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpohtpb0t0.php\
    \ on line 32\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = count($arr);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiy35f11x.php:49\n\
    Stack trace:\n#0 /tmp/tmpiy35f11x.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpiy35f11x.php\
    \ on line 49\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    return $max - $min <= 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvywcn5lo.php:46\n\
    Stack trace:\n#0 /tmp/tmpvywcn5lo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvywcn5lo.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n   \
    \     $j = $i;\n        while ($j > 0 && $arr[$j - 1] > $arr[$j]) {\n        \
    \    $temp = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n            $arr[$j\
    \ - 1] = $temp;\n            $j--;\n        }\n    }\n    if ($arr == $arr_sorted)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $arr_sorted in /tmp/tmpjskm3arw.php on line\
    \ 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjskm3arw.php:49\n\
    Stack trace:\n#0 /tmp/tmpjskm3arw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpjskm3arw.php\
    \ on line 49\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) {\n            return false;\n        }\n        $min = min($min,\
    \ $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nhf842x.php:41\n\
    Stack trace:\n#0 /tmp/tmp0nhf842x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0nhf842x.php\
    \ on line 41\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ule4olh.php:48\n\
    Stack trace:\n#0 /tmp/tmp4ule4olh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4ule4olh.php\
    \ on line 48\n"
  timestamp: 1659797611
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $count = 0;\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $count++;\n   \
    \     }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91zq97uw.php:50\n\
    Stack trace:\n#0 /tmp/tmp91zq97uw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp91zq97uw.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $min_index = $i;\n        }\n        if ($arr[$i] ==\
    \ $max) {\n            $max_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0 && $max_index == $len - 1) {\n        return true;\n    }\n    if ($min_index\
    \ == $len - 1 && $max_index == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 1, 1,\
    \ 1, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxbrcmmmy.php on line 79

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 3, 4);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmptshrxfev.php:69\nStack trace:\n#0 /tmp/tmptshrxfev.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmptshrxfev.php on line 69\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpmc8duxnw.php
    on line 63

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) {\n            return false;\n        }\n        $min = min($min,\
    \ $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nhf842x.php:41\n\
    Stack trace:\n#0 /tmp/tmp0nhf842x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0nhf842x.php\
    \ on line 41\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 3, 4);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(3\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp39rfvtnu.php
    on line 66

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\n$arr =\
    \ array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30);\necho move_\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp94i445t0.php on line 58

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5if97o6a.php:50\n\
    Stack trace:\n#0 /tmp/tmp5if97o6a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5if97o6a.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = min($arr);\n    $min_index = array_search($min, $arr);\n  \
    \  if ($min_index == 0) {\n        return true;\n    }\n    $max = max($arr);\n\
    \    $max_index = array_search($max, $arr);\n    if ($max_index == count($arr)\
    \ - 1) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwav678b.php:45\n\
    Stack trace:\n#0 /tmp/tmpuwav678b.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpuwav678b.php\
    \ on line 45\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n   \
    \         $count++;\n        }\n    }\n    if ($count > 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnx9u73yn.php:46\n\
    Stack trace:\n#0 /tmp/tmpnx9u73yn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnx9u73yn.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5if97o6a.php:50\n\
    Stack trace:\n#0 /tmp/tmp5if97o6a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5if97o6a.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n   \
    \     if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_qg9350.php:41\n\
    Stack trace:\n#0 /tmp/tmpc_qg9350.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc_qg9350.php\
    \ on line 41\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpne43ybi6.php
    on line 68

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8h9o8f3.php:43\n\
    Stack trace:\n#0 /tmp/tmpc8h9o8f3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpc8h9o8f3.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index ==\
    \ $len - 1) {\n        return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuem2p6jv.php:59\n\
    Stack trace:\n#0 /tmp/tmpuem2p6jv.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpuem2p6jv.php\
    \ on line 59\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$len = count($arr);\n\tif ($len == 0) {\n\t\t\
    return true;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tfor ($i = 1; $i < $len;\
    \ $i++) {\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t\tif ($arr[$i]\
    \ < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t}\n\tif ($min == $max) {\n\t\treturn\
    \ true;\n\t}\n\t$min_index = 0;\n\t$max_index = 0;\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif ($arr[$i] == $min) {\n\t\t\t$min_index = $i;\n\t\t}\n\t\tif\
    \ ($arr[$i] == $max) {\n\t\t\t$max_index = $i;\n\t\t}\n\t}\n\tif ($min_index ==\
    \ 0 && $max_index == $len - 1) {\n\t\treturn true;\n\t}\n\tif ($min_index == $len\
    \ - 1 && $max_index == 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$arr\
    \ = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp70l17dej.php on line 73

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $sorted = $arr;\n    sort($sorted);\n    $count\
    \ = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $last = array_pop($arr);\n\
    \        array_unshift($arr, $last);\n        if ($arr == $sorted) {\n       \
    \     return true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdscpuw2e.php:46\n\
    Stack trace:\n#0 /tmp/tmpdscpuw2e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdscpuw2e.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] < $min) {\n            return false;\n        }\n        $min\
    \ = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqzn_qvk.php:42\n\
    Stack trace:\n#0 /tmp/tmptqzn_qvk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmptqzn_qvk.php\
    \ on line 42\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (empty($arr)) {\n    return true;\n  }\n\
    \  $len = count($arr);\n  $max = $arr[0];\n  for ($i = 1; $i < $len; $i++) {\n\
    \    if ($arr[$i] < $max) {\n      return false;\n    }\n    $max = max($max,\
    \ $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9o4llso.php:43\n\
    Stack trace:\n#0 /tmp/tmpw9o4llso.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpw9o4llso.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\n$arr =\
    \ array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpflluu0wp.php:61\nStack trace:\n#0 /tmp/tmpflluu0wp.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmpflluu0wp.php on line 61\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\n$arr =\
    \ array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32,\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpm2cip7p1.php on line 57

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabcm7_e3.php:46\n\
    Stack trace:\n#0 /tmp/tmpabcm7_e3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpabcm7_e3.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ule4olh.php:48\n\
    Stack trace:\n#0 /tmp/tmp4ule4olh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4ule4olh.php\
    \ on line 48\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = 0;\n    for ($i\
    \ = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min) {\n           \
    \ $min = $arr[$i];\n            $count++;\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($count > 1) {\n \
    \       return false;\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmptcyuzyp_.php on line 76

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    if ($min == $arr[0] && $max == $arr[$count - 1]) {\n     \
    \   return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk9vn4qo.php:52\n\
    Stack trace:\n#0 /tmp/tmpnk9vn4qo.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpnk9vn4qo.php\
    \ on line 52\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(3, 3, 3, 3, 3);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8beqkfwg.php on line 54

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(2, 2, 2, 2, 2);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 2, 2, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(2, 2, 2, 2, 1);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(2, 2, 2, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(2,\
    \ 2, 1, 2, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(2, 1, 2, 2,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpzxy1ohr6.php
    on line 67

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $count = count($arr);\n  if ($count == 0) {\n\
    \    return true;\n  }\n  $max = $arr[0];\n  for ($i = 1; $i < $count; $i++) {\n\
    \    if ($arr[$i] < $max) {\n      return false;\n    }\n    $max = $arr[$i];\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9uqi_b0.php:43\n\
    Stack trace:\n#0 /tmp/tmpp9uqi_b0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpp9uqi_b0.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len < 2) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7zk74j2.php:43\n\
    Stack trace:\n#0 /tmp/tmpw7zk74j2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpw7zk74j2.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    while ($arr\
    \ != $sorted) {\n        $last = array_pop($arr);\n        array_unshift($arr,\
    \ $last);\n        $count++;\n        if ($count > count($arr)) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n\n$arr = array(3, 4,\
    \ 5, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(7, 6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(8, 7, 6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(9, 8, 7, 6,\
    \ 5, 4, 3\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpaa8mm5g5.php
    on line 64

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wruj7jj.php:50\n\
    Stack trace:\n#0 /tmp/tmp0wruj7jj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0wruj7jj.php\
    \ on line 50\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_index\
    \ = 0;\n    $max_index = 0;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n            $min_index = $i;\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \     $max_index = $i;\n        }\n    }\n    if ($min_index == 0) {\n       \
    \ return true;\n    }\n    if ($max_index == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoexn8ypw.php:56\n\
    Stack trace:\n#0 /tmp/tmpoexn8ypw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpoexn8ypw.php\
    \ on line 56\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len <= 1) {\n\
    \        return true;\n    }\n    $i = 0;\n    $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $arr[$i] = $arr[$i\
    \ + 1];\n            $i++;\n        } else if ($arr[$j] < $arr[$j - 1]) {\n  \
    \          $arr[$j] = $arr[$j - 1];\n            $j--;\n        } else {\n   \
    \         $i++;\n            $j--;\n        }\n    }\n    if ($i == $j) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8nl99ng.php:53\n\
    Stack trace:\n#0 /tmp/tmpx8nl99ng.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpx8nl99ng.php\
    \ on line 53\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    $count = count($arr);\n    if ($count == 0) {\n        return true;\n \
    \   }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($max - $min == $count - 1) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdykxt2ka.php:52\n\
    Stack trace:\n#0 /tmp/tmpdykxt2ka.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpdykxt2ka.php\
    \ on line 52\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $len = count($arr);\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpseij1u2p.php:49\n\
    Stack trace:\n#0 /tmp/tmpseij1u2p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpseij1u2p.php\
    \ on line 49\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = $arr[$i];\n    }\n    return true;\n}\n\n$arr = array(3, 4,\
    \ 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpt_8f1b7q.php:61\nStack trace:\n#0 /tmp/tmpt_8f1b7q.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmpt_8f1b7q.php on line 61\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n   \
    \         $count++;\n        }\n    }\n    if ($count > 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnx9u73yn.php:46\n\
    Stack trace:\n#0 /tmp/tmpnx9u73yn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnx9u73yn.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        if ($arr[$i] == $min) {\n            $min_index =\
    \ $i;\n        }\n        if ($arr[$i] == $max) {\n            $max_index = $i;\n\
    \        }\n    }\n    if ($min_index == 0 && $max_index == $count - 1) {\n  \
    \      return true;\n    }\n    if ($min_index == $count - 1 && $max_index ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoayb36w1.php:65\n\
    Stack trace:\n#0 /tmp/tmpoayb36w1.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpoayb36w1.php\
    \ on line 65\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jpg3_lh.php:43\n\
    Stack trace:\n#0 /tmp/tmp_jpg3_lh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_jpg3_lh.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    return $max - $min <= 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvywcn5lo.php:46\n\
    Stack trace:\n#0 /tmp/tmpvywcn5lo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvywcn5lo.php\
    \ on line 46\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    return $max - $min <= 1;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 4, 5, 1, 2, 3);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n$arr = array(3, 4, 5, 1, 2, 3, 4);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(3, 4, 5, 1, 2, 3, 4, 5);\necho move_one_ball($arr) . PHP_EOL;\n$arr\
    \ = array(3, 4, 5, 1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . PHP_EOL;\n$arr\
    \ = array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr) .\
    \ PHP_EOL;\n$arr = array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp8186f_dx.php
    on line 60

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $length = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($arr[$i] < $min) {\n    \
    \        $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n       \
    \     $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51fdfcmj.php:49\n\
    Stack trace:\n#0 /tmp/tmp51fdfcmj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp51fdfcmj.php\
    \ on line 49\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $i = 0;\n    $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1] = $temp;\n   \
    \         $i++;\n        } else if ($arr[$j] < $arr[$j - 1]) {\n            $temp\
    \ = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n            $arr[$j - 1]\
    \ = $temp;\n            $j--;\n        } else {\n            $i++;\n         \
    \   $j--;\n        }\n    }\n    if ($i == $j) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9e0cy93d.php:59\n\
    Stack trace:\n#0 /tmp/tmp9e0cy93d.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp9e0cy93d.php\
    \ on line 59\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $i = 0;\n    $j = $len - 1;\n    while ($i\
    \ < $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1] = $temp;\n   \
    \     }\n        if ($arr[$j] < $arr[$j - 1]) {\n            $temp = $arr[$j];\n\
    \            $arr[$j] = $arr[$j - 1];\n            $arr[$j - 1] = $temp;\n   \
    \     }\n        $i++;\n        $j--;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpkyege7b0.php
    on line 69

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = count($arr);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkk1r8kn.php:50\n\
    Stack trace:\n#0 /tmp/tmpwkk1r8kn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwkk1r8kn.php\
    \ on line 50\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $min = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            return false;\n        }\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb7ng2o2.php:43\n\
    Stack trace:\n#0 /tmp/tmpmb7ng2o2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmb7ng2o2.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $len = count($arr);\n   \
    \ $i = 0;\n    while ($i < $len) {\n        if ($arr[$i] === $sorted[$i]) {\n\
    \            $i++;\n        } else {\n            $j = $i + 1;\n            while\
    \ ($j < $len) {\n                if ($arr[$j] === $sorted[$i]) {\n           \
    \         $temp = $arr[$j];\n                    $arr[$j] = $arr[$i];\n      \
    \              $arr[$i] = $temp;\n                    $i++;\n                \
    \    break;\n                }\n                $j++;\n            }\n       \
    \     if ($j === $len) {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 5,\
    \ 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 5,\
    \ 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . PHP_EOL\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp1nhm8cij.php on line 70

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0 && $max_index == $len - 1) {\n        return true;\n  \
    \  }\n    if ($min_index == 0 && $max_index == $len - 2) {\n        return true;\n\
    \    }\n    if ($min_index == 1 && $max_index == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgozsa7v.php:60\n\
    Stack trace:\n#0 /tmp/tmpfgozsa7v.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpfgozsa7v.php\
    \ on line 60\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ule4olh.php:48\n\
    Stack trace:\n#0 /tmp/tmp4ule4olh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4ule4olh.php\
    \ on line 48\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if\
    \ ($min_index == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9iqypgc.php:47\n\
    Stack trace:\n#0 /tmp/tmpi9iqypgc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi9iqypgc.php\
    \ on line 47\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5if97o6a.php:50\n\
    Stack trace:\n#0 /tmp/tmp5if97o6a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5if97o6a.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $diff = $max - $min;\n    if ($diff == $len - 1) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx4afo61.php:51\n\
    Stack trace:\n#0 /tmp/tmpwx4afo61.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwx4afo61.php\
    \ on line 51\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91zq97uw.php:50\n\
    Stack trace:\n#0 /tmp/tmp91zq97uw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp91zq97uw.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for($i = 1; $i < $count; $i++) {\n        if($arr[$i] < $min) {\n        \
    \    $min = $arr[$i];\n        }\n        if($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if($min == $max) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz69n3oaa.php:49\n\
    Stack trace:\n#0 /tmp/tmpz69n3oaa.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpz69n3oaa.php\
    \ on line 49\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $arr_len = count($arr);\n    $min_val = min($arr);\n    $min_val_pos\
    \ = array_search($min_val, $arr);\n    if ($min_val_pos == 0) {\n        return\
    \ true;\n    }\n    $arr_slice = array_slice($arr, $min_val_pos);\n    $arr_slice_len\
    \ = count($arr_slice);\n    $arr_slice_sorted = $arr_slice;\n    sort($arr_slice_sorted);\n\
    \    if ($arr_slice_sorted == $arr_slice) {\n        return true;\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s9zur65.php:50\n\
    Stack trace:\n#0 /tmp/tmp9s9zur65.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9s9zur65.php\
    \ on line 50\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_index\
    \ = 0;\n    $max_index = 0;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n            $min_index = $i;\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \     $max_index = $i;\n        }\n    }\n    if ($min_index == 0) {\n       \
    \ return true;\n    }\n    if ($max_index == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoexn8ypw.php:56\n\
    Stack trace:\n#0 /tmp/tmpoexn8ypw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpoexn8ypw.php\
    \ on line 56\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0 && $max_index == $len - 1) {\n        return true;\n  \
    \  }\n    if ($min_index == 0 && $max_index == $len - 2) {\n        return true;\n\
    \    }\n    if ($min_index == 1 && $max_index == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp7b4zrmse.php on line 70

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $size = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $size;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21yc2bfo.php:43\n\
    Stack trace:\n#0 /tmp/tmp21yc2bfo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp21yc2bfo.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n\
    \        return true;\n    }\n    $min_index = array_search($min, $arr);\n   \
    \ $max_index = array_search($max, $arr);\n    if ($min_index == 0) {\n       \
    \ return false;\n    }\n    if ($max_index == $count - 1) {\n        return false;\n\
    \    }\n    if ($min_index < $max_index) {\n        return false;\n    }\n   \
    \ return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9__jgayi.php:59\n\
    Stack trace:\n#0 /tmp/tmp9__jgayi.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp9__jgayi.php\
    \ on line 59\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmplezobqt5.php:69\nStack trace:\n#0 /tmp/tmplezobqt5.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmplezobqt5.php on line 69\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(3, 3, 3, 3, 3);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp2n65xjp0.php
    on line 53

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = -1;\n    $max_index = -1;\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($arr[$i] == $min) {\n            $min_index = $i;\n        }\n        if ($arr[$i]\
    \ == $max) {\n            $max_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0 && $max_index == $len - 1) {\n        return true;\n    }\n    if ($min_index\
    \ == $len - 1 && $max_index == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwda87ny.php:65\n\
    Stack trace:\n#0 /tmp/tmphwda87ny.php(72): test()\n#1 {main}\n  thrown in /tmp/tmphwda87ny.php\
    \ on line 65\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ule4olh.php:48\n\
    Stack trace:\n#0 /tmp/tmp4ule4olh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4ule4olh.php\
    \ on line 48\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_count = count($arr);\n    if ($arr_count\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_count; $i++) {\n        if ($arr[$i] < $min) {\n \
    \           $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n    \
    \        $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $arr_count\
    \ - 1) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9iy2ww9.php:50\n\
    Stack trace:\n#0 /tmp/tmpd9iy2ww9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpd9iy2ww9.php\
    \ on line 50\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y5v2oit.php:48\n\
    Stack trace:\n#0 /tmp/tmp4y5v2oit.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4y5v2oit.php\
    \ on line 48\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == 1 && $max == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdafbxmba.php:50\n\
    Stack trace:\n#0 /tmp/tmpdafbxmba.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdafbxmba.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $count = count($arr);\n  if ($count == 0) {\n\
    \    return true;\n  }\n  $min = $arr[0];\n  $max = $arr[0];\n  for ($i = 1; $i\
    \ < $count; $i++) {\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n    }\n\
    \    if ($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n  if ($min ==\
    \ $max) {\n    return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zpjaqj3.php:49\n\
    Stack trace:\n#0 /tmp/tmp4zpjaqj3.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4zpjaqj3.php\
    \ on line 49\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $i = 0;\n    $j = $n - 1;\n    while ($i <\
    \ $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1] = $temp;\n   \
    \         $i++;\n        } else {\n            $temp = $arr[$j];\n           \
    \ $arr[$j] = $arr[$j - 1];\n            $arr[$j - 1] = $temp;\n            $j--;\n\
    \        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop80qf04.php:56\n\
    Stack trace:\n#0 /tmp/tmpop80qf04.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpop80qf04.php\
    \ on line 56\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $arr_len = count($arr);\n    $min_val = min($arr);\n    $min_index\
    \ = array_search($min_val, $arr);\n    $max_val = max($arr);\n    $max_index =\
    \ array_search($max_val, $arr);\n    $min_index_after_shift = $min_index - $arr_len;\n\
    \    $max_index_after_shift = $max_index - $arr_len;\n    if ($min_index_after_shift\
    \ > $max_index_after_shift) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s_a56l6.php:47\n\
    Stack trace:\n#0 /tmp/tmp0s_a56l6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0s_a56l6.php\
    \ on line 47\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) return false;\n        $min = min($min, $arr[$i]);\n    }\n\
    \    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array();\necho move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6d47m_8c.php:45\n\
    Stack trace:\n#0 /tmp/tmp6d47m_8c.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp6d47m_8c.php\
    \ on line 45\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) . \"\\n\";\n\
    $arr = array\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmp1h8bzydj.php
    on line 65

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $i = 0;\n    $j = $count - 1;\n    while\
    \ ($i < $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1] = $temp;\n   \
    \     }\n        if ($arr[$j] < $arr[$j - 1]) {\n            $temp = $arr[$j];\n\
    \            $arr[$j] = $arr[$j - 1];\n            $arr[$j - 1] = $temp;\n   \
    \     }\n        $i++;\n        $j--;\n    }\n    for ($i = 0; $i < $count - 1;\
    \ $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykbnrb_e.php:57\n\
    Stack trace:\n#0 /tmp/tmpykbnrb_e.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpykbnrb_e.php\
    \ on line 57\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if($n == 0) return\
    \ true;\n    $min = $arr[0];\n    for($i = 1; $i < $n; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkutf16lm.php:41\n\
    Stack trace:\n#0 /tmp/tmpkutf16lm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkutf16lm.php\
    \ on line 41\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    $max_index = array_search($max, $arr);\n    $min_index = array_search($min,\
    \ $arr);\n    if ($max_index < $min_index) {\n        return true;\n    }\n  \
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hfmt9l0.php:56\n\
    Stack trace:\n#0 /tmp/tmp0hfmt9l0.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp0hfmt9l0.php\
    \ on line 56\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpne43ybi6.php
    on line 68

    '
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0 && $max_index == $len - 1) {\n        return true;\n  \
    \  }\n    if ($min_index == 0 && $max_index == 1) {\n        return true;\n  \
    \  }\n    if ($min_index == $len - 1 && $max_index == 0) {\n        return true;\n\
    \    }\n    if ($min_index == $len - 2 && $max_index == $len - 1) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4_840eg.php:63\n\
    Stack trace:\n#0 /tmp/tmpe4_840eg.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpe4_840eg.php\
    \ on line 63\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 3, 3, 3, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_cxxc_t.php:61\n\
    Stack trace:\n#0 /tmp/tmps_cxxc_t.php(68): test()\n#1 {main}\n  thrown in /tmp/tmps_cxxc_t.php\
    \ on line 61\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpej72chx8.php:48\n\
    Stack trace:\n#0 /tmp/tmpej72chx8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpej72chx8.php\
    \ on line 48\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_pos\
    \ = 0;\n    $max_pos = 0;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n            $min_pos = $i;\n      \
    \  }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n         \
    \   $max_pos = $i;\n        }\n    }\n    if ($min_pos == 0) {\n        return\
    \ true;\n    }\n    if ($max_pos == $len - 1) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz7a6oyu.php:56\n\
    Stack trace:\n#0 /tmp/tmpnz7a6oyu.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpnz7a6oyu.php\
    \ on line 56\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $diff = $max - $min;\n    if ($diff == $len - 1) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx4afo61.php:51\n\
    Stack trace:\n#0 /tmp/tmpwx4afo61.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwx4afo61.php\
    \ on line 51\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = min($arr);\n    $min_index = array_search($min, $arr);\n  \
    \  $max = max($arr);\n    $max_index = array_search($max, $arr);\n    if ($min_index\
    \ == 0 && $max_index == count($arr) - 1) {\n        return true;\n    }\n    if\
    \ ($min_index == 0 && $max_index != count($arr) - 1) {\n        return false;\n\
    \    }\n    if ($min_index != 0 && $max_index == count($arr) - 1) {\n        return\
    \ true;\n    }\n    if ($min_index != 0 && $max_index != count($arr) - 1) {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsj8mq5a.php:50\n\
    Stack trace:\n#0 /tmp/tmpxsj8mq5a.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxsj8mq5a.php\
    \ on line 50\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = $min_index; $i < $len -\
    \ 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwaj_in3t.php:54\n\
    Stack trace:\n#0 /tmp/tmpwaj_in3t.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwaj_in3t.php\
    \ on line 54\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    $min_index = array_search($min, $arr);\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    $min_index = $count - $min_index;\n\
    \    $gcd = gcd($count, $min_index);\n    return $gcd == 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmph6u_bno9.php:39\n\
    Stack trace:\n#0 /tmp/tmph6u_bno9.php(44): move_one_ball(Array)\n#1 /tmp/tmph6u_bno9.php(48):\
    \ candidate(Array)\n#2 /tmp/tmph6u_bno9.php(55): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmph6u_bno9.php on line 39\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] == $min) {\n\
    \            $count++;\n        }\n    }\n    if ($count == $len) {\n        return\
    \ true;\n    }\n    $count = 0;\n    for ($i = 0; $i < $len; $i++) {\n       \
    \ if ($arr[$i] == $max) {\n            $count++;\n        }\n    }\n    if ($count\
    \ == $len) {\n        return true;\n    }\n    return false;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 5, 5, 5, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpy_ny1gho.php
    on line 77

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$len = count($arr);\n\t$min = $arr[0];\n\t$max\
    \ = $arr[0];\n\tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\
    \t\t$min = $arr[$i];\n\t\t}\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\
    \t\t}\n\t}\n\tif ($min == 1 && $max == $len) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpc89agd5s.php on line 73

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $n = count($arr);\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwivd2l6.php:49\n\
    Stack trace:\n#0 /tmp/tmpuwivd2l6.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpuwivd2l6.php\
    \ on line 49\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    $max = $arr[$min_index];\n    for\
    \ ($i = $min_index + 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n \
    \           $max = $arr[$i];\n        }\n    }\n    if ($max > $min) {\n     \
    \   return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps12vja63.php:56\n\
    Stack trace:\n#0 /tmp/tmps12vja63.php(63): test()\n#1 {main}\n  thrown in /tmp/tmps12vja63.php\
    \ on line 56\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8h9o8f3.php:43\n\
    Stack trace:\n#0 /tmp/tmpc8h9o8f3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpc8h9o8f3.php\
    \ on line 43\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len <= 1) {\n\
    \        return true;\n    }\n    $i = 0;\n    while ($i < $len - 1) {\n     \
    \   if ($arr[$i] > $arr[$i + 1]) {\n            break;\n        }\n        $i++;\n\
    \    }\n    if ($i == $len - 1) {\n        return true;\n    }\n    $j = $i +\
    \ 1;\n    while ($j < $len - 1) {\n        if ($arr[$j] < $arr[$j + 1]) {\n  \
    \          return false;\n        }\n        $j++;\n    }\n    return true;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5,\
    \ 1, 2, 3, 4);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5,\
    \ 1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(3, 4, 5, 1, 2, 3, 4, 5,\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2be2qa2p.php on line 67

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqliu9kng.php:43\n\
    Stack trace:\n#0 /tmp/tmpqliu9kng.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqliu9kng.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len <= 1) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxizt45wb.php:43\n\
    Stack trace:\n#0 /tmp/tmpxizt45wb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxizt45wb.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $len\
    \ - 1) {\n        return true;\n    }\n    return false;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5);\necho\
    \ move_one_ball($arr) . PHP_EOL;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(8, 7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9);\necho move_one_ball\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpj9crvmrk.php on line 63

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqliu9kng.php:43\n\
    Stack trace:\n#0 /tmp/tmpqliu9kng.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqliu9kng.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(8,\
    \ 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpelqev3iy.php:81\nStack trace:\n#0 /tmp/tmpelqev3iy.php(87): test()\n\
    #1 {main}\n  thrown in /tmp/tmpelqev3iy.php on line 81\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min_val = $arr[0];\n    $min_index\
    \ = 0;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min_val)\
    \ {\n            $min_val = $arr[$i];\n            $min_index = $i;\n        }\n\
    \    }\n    $min_index = $min_index + 1;\n    if ($min_index == $arr_len) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $arr_len - 1; $i++) {\n  \
    \      if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvy75bd9.php:53\n\
    Stack trace:\n#0 /tmp/tmpvvy75bd9.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpvvy75bd9.php\
    \ on line 53\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5if97o6a.php:50\n\
    Stack trace:\n#0 /tmp/tmp5if97o6a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5if97o6a.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $min = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            return false;\n        }\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb7ng2o2.php:43\n\
    Stack trace:\n#0 /tmp/tmpmb7ng2o2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmb7ng2o2.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $min = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            return false;\n        }\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb7ng2o2.php:43\n\
    Stack trace:\n#0 /tmp/tmpmb7ng2o2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmb7ng2o2.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index ==\
    \ $len - 1) {\n        return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuem2p6jv.php:59\n\
    Stack trace:\n#0 /tmp/tmpuem2p6jv.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpuem2p6jv.php\
    \ on line 59\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$result = move_one_ball($arr);\n\
    echo $result;\necho \"\\n\";\n\n$arr = array(3, 5, 4, 1, 2);\n$result = move_one_ball($arr);\n\
    echo $result;\necho \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5);\n$result = move_one_ball($arr);\n\
    echo $result;\necho \"\\n\";\n\n$arr = array(1, 1, 1, 1, 1);\n$result = move_one_ball($arr);\n\
    echo $result;\necho \"\\n\";\n\n$arr = array();\n$result = move_one_ball($arr);\n\
    echo $result;\necho \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp6_pjdnkn.php on line 70

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $min = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            return false;\n        }\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb7ng2o2.php:43\n\
    Stack trace:\n#0 /tmp/tmpmb7ng2o2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmb7ng2o2.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = count($arr);\n \
    \   $i = 0;\n    while ($i < $count) {\n        if ($arr[$i] == $sorted[$i]) {\n\
    \            $i++;\n        } else {\n            $j = $i + 1;\n            while\
    \ ($j < $count) {\n                if ($arr[$j] == $sorted[$i]) {\n          \
    \          break;\n                }\n                $j++;\n            }\n \
    \           if ($j == $count) {\n                return false;\n            }\n\
    \            $temp = $arr[$j];\n            for ($k = $j; $k > $i; $k--) {\n \
    \               $arr[$k] = $arr[$k - 1];\n            }\n            $arr[$i]\
    \ = $temp;\n            $i++;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xhk3td3.php:63\n\
    Stack trace:\n#0 /tmp/tmp6xhk3td3.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp6xhk3td3.php\
    \ on line 63\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if ($min_index == 0 && $max_index == $count - 1) {\n        return\
    \ true;\n    }\n    if ($min_index == 0 && $max_index == $count - 2) {\n     \
    \   return true;\n    }\n    if ($min_index == 1 && $max_index == $count - 1)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcapspmxw.php:60\n\
    Stack trace:\n#0 /tmp/tmpcapspmxw.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpcapspmxw.php\
    \ on line 60\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91zq97uw.php:50\n\
    Stack trace:\n#0 /tmp/tmp91zq97uw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp91zq97uw.php\
    \ on line 50\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n$arr =\
    \ array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30);\necho move_\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpu0bbbbli.php on line 58

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] == $min) {\n            $arr[$i]\
    \ = $max;\n        }\n    }\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $arr[$i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6iru9ew2.php:59\n\
    Stack trace:\n#0 /tmp/tmp6iru9ew2.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp6iru9ew2.php\
    \ on line 59\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    return $max - $min <= 1;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4aw1zny.php:45\n\
    Stack trace:\n#0 /tmp/tmpy4aw1zny.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpy4aw1zny.php\
    \ on line 45\n"
  timestamp: 1659797612
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $arr_len = count($arr);\n    $i = 0;\n    $j = 1;\n    $count = 0;\n\
    \    while ($i < $arr_len && $j < $arr_len) {\n        if ($arr[$i] > $arr[$j])\
    \ {\n            $count++;\n            $i = $j;\n            $j++;\n        }\
    \ else {\n            $i++;\n            $j++;\n        }\n    }\n    if ($count\
    \ <= 1) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n      \
    \  if ($arr[$i] > $arr[$i + 1]) {\n            break;\n        }\n        $i++;\n\
    \    }\n    if ($i == $n - 1) {\n        return true;\n    }\n    $j = $i + 1;\n\
    \    while ($j < $n - 1) {\n        if ($arr[$j] < $arr[$j + 1]) {\n         \
    \   return false;\n        }\n        $j++;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuiu0ax0d.php:53\n\
    Stack trace:\n#0 /tmp/tmpuiu0ax0d.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuiu0ax0d.php\
    \ on line 53\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) {\n            return false;\n        }\n        $min = min($min,\
    \ $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nhf842x.php:41\n\
    Stack trace:\n#0 /tmp/tmp0nhf842x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0nhf842x.php\
    \ on line 41\n"
  timestamp: 1659797611
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if\
    \ ($min_index == 0) {\n        return true;\n    }\n    for ($i = $min_index;\
    \ $i < $count - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\n$arr = array(3, 4,\
    \ 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpasx97m5c.php on line 66

    '
  timestamp: 1659797612
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcvux31.php:43\n\
    Stack trace:\n#0 /tmp/tmp6dcvux31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dcvux31.php\
    \ on line 43\n"
  timestamp: 1659797612
