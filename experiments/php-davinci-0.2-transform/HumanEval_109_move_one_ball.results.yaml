language: php
name: HumanEval_109_move_one_ball
results:
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $len = count($arr);\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($max - $min == $len - 1) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tlq7atq.php:50\n\
    Stack trace:\n#0 /tmp/tmp6tlq7atq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6tlq7atq.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst7t_cv9.php:49\n\
    Stack trace:\n#0 /tmp/tmpst7t_cv9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpst7t_cv9.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == 1 && $max == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdafbxmba.php:50\n\
    Stack trace:\n#0 /tmp/tmpdafbxmba.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdafbxmba.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$arr1 = array(3, 5, 4, 1, 2);\n$arr2\
    \ = array(1, 2, 3, 4, 5);\n$arr3 = array(5, 4, 3, 2, 1);\n$arr4 = array(1, 1,\
    \ 1, 1, 1);\n$arr5 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100);\necho move_one_ball($arr) . \"\\n\";\n\
    echo move_one_ball($arr1) . \"\\n\";\necho move_one_ball($arr2) . \"\\n\";\necho\
    \ move_one_ball($arr3) . \"\\n\";\necho move_one_ball($arr4) . \"\\\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptvcxuk2f.php on line 60

    '
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbpnlpxkr.php:69\nStack trace:\n#0 /tmp/tmpbpnlpxkr.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbpnlpxkr.php on line 69\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    $i = 0;\n    $j\
    \ = $count - 1;\n    while ($i < $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n\
    \            $temp = $arr[$i];\n            $arr[$i] = $arr[$i + 1];\n       \
    \     $arr[$i + 1] = $temp;\n            $i++;\n        } else {\n           \
    \ $temp = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n            $arr[$j\
    \ - 1] = $temp;\n            $j--;\n        }\n    }\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztb5io_y.php:53\n\
    Stack trace:\n#0 /tmp/tmpztb5io_y.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpztb5io_y.php\
    \ on line 53\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr859597.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr859597.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr859597.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min_val = $arr[0];\n    $min_val_index\
    \ = 0;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min_val)\
    \ {\n            $min_val = $arr[$i];\n            $min_val_index = $i;\n    \
    \    }\n    }\n    if ($min_val_index == 0) {\n        return true;\n    }\n \
    \   $max_val = $arr[$min_val_index];\n    for ($i = $min_val_index + 1; $i < $arr_len;\
    \ $i++) {\n        if ($arr[$i] < $max_val) {\n            return false;\n   \
    \     }\n        $max_val = $arr[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tcfj6kz.php:56\n\
    Stack trace:\n#0 /tmp/tmp7tcfj6kz.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7tcfj6kz.php\
    \ on line 56\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_index\
    \ = 0;\n    $max_index = 0;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n            $min_index = $i;\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \     $max_index = $i;\n        }\n    }\n    if ($min_index == 0) {\n       \
    \ return true;\n    }\n    if ($max_index == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoexn8ypw.php:56\n\
    Stack trace:\n#0 /tmp/tmpoexn8ypw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpoexn8ypw.php\
    \ on line 56\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $len = count($arr);\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return true;\n\
    \    }\n    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index\
    \ == $len - 1) {\n        return false;\n    }\n    if ($min_index < $max_index)\
    \ {\n        return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnybvw4m_.php:62\n\
    Stack trace:\n#0 /tmp/tmpnybvw4m_.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpnybvw4m_.php\
    \ on line 62\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_omnk3qg.php:50\n\
    Stack trace:\n#0 /tmp/tmp_omnk3qg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_omnk3qg.php\
    \ on line 50\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor8vddpv.php:49\n\
    Stack trace:\n#0 /tmp/tmpor8vddpv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpor8vddpv.php\
    \ on line 49\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jpg3_lh.php:43\n\
    Stack trace:\n#0 /tmp/tmp_jpg3_lh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_jpg3_lh.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $max) {\n            return false;\n        }\n  \
    \      $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptx7qzccr.php:43\n\
    Stack trace:\n#0 /tmp/tmptx7qzccr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptx7qzccr.php\
    \ on line 43\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0 || $max_index == $len - 1) {\n        return true;\n  \
    \  }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx8e07cy.php:54\n\
    Stack trace:\n#0 /tmp/tmpfx8e07cy.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpfx8e07cy.php\
    \ on line 54\n"
  timestamp: 1659730699
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4,\
    \ 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing\
    \ order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskxmzakr.php:43\n\
    Stack trace:\n#0 /tmp/tmpskxmzakr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpskxmzakr.php\
    \ on line 43\n"
  timestamp: 1659730699
