language: php
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n\
    \    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c +\
    \ $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n\
    \    }\n    return $e;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho\
    \ fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho\
    \ fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho\
    \ fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho\
    \ fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho\
    \ fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho\
    \ fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho\
    \ fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho\
    \ fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    28

    54

    104

    200

    386

    744

    1434

    2764

    5328

    10270

    19796

    38158

    73552

    141776

    273282

    526768

    1015378

    1957204

    3772632

    7271982

    14017196

    27019014

    52080824

    100389016

    193506050

    372994904

    '
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    if ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] +\
    \ $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n\
    \    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n\
    \        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3\
    \ = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $fib4 = array(0, 0, 2, 0);\n    for\
    \ ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i\
    \ - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    if ($n < 4) {\n        return $fib4[$n];\n    }\n    $i = 3;\n    while ($i\
    \ < $n) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] +\
    \ $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n        $i++;\n    }\n    return\
    \ $fib4[($i - 1) % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsh6x4b3v.php:34\n\
    Stack trace:\n#0 /tmp/tmpsh6x4b3v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsh6x4b3v.php\
    \ on line 34\n"
  timestamp: 1659730665
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\
    \ else {\n        $fib4 = array(0, 0, 2, 0);\n        for ($i = 4; $i <= $n; $i++)\
    \ {\n            $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i\
    \ - 3) % 4] + $fib4[($i - 4) % 4];\n        }\n        return $fib4[$n % 4];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730665
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    if ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] +\
    \ $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n\
    \    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c +\
    \ $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n\
    \    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n\
    \    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c +\
    \ $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n\
    \    }\n    return $e;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $fib4[$i%4] = $fib4[($i-1)%4] + $fib4[($i-2)%4]\
    \ + $fib4[($i-3)%4] + $fib4[($i-4)%4];\n    }\n    return $fib4[$n%4];\n}\n\n\
    echo fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho\
    \ fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho\
    \ fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho\
    \ fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho\
    \ fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho\
    \ fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho\
    \ fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho\
    \ fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho\
    \ fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho\
    \ fib4(32) .\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpph3m0cl_.php on line 66

    '
  timestamp: 1659730665
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a\
    \ + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    \
    \    $d = $e;\n    }\n    return $d;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcu1hw40u.php:38\n\
    Stack trace:\n#0 /tmp/tmpcu1hw40u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcu1hw40u.php\
    \ on line 38\n"
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659730626
