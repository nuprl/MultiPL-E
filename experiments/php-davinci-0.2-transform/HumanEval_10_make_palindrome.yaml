name: HumanEval_10_make_palindrome
language: php
prompt: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
  // Algorithm idea is simple:\n// - Find the longest postfix of supplied string that\
  \ is a palindrome.\n// - Append to the end of the string reverse of a string prefix\
  \ that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\
  \"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\"\
  )\n// \"catac\"\nfunction make_palindrome($string) {\n"
tests: "function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $length = strlen($string);\n    if ($length <= 1) {\n        return\
    \ $string;\n    }\n    $longest_palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, $length - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "  $length = strlen($string);\n\
    \  $i = $length;\n  while ($i > 0) {\n    $prefix = substr($string, 0, $i);\n\
    \    $suffix = substr($string, $length - $i);\n    if ($prefix == strrev($suffix))\
    \ {\n      return $string . strrev(substr($string, 0, $length - $i));\n    }\n\
    \    $i--;\n  }\n  return $string . strrev($string);\n}\n", "    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ == $string[$j]) {\n            $i++;\n            $j--;\n        } else {\n\
    \            break;\n        }\n    }\n    if ($i >= $j) {\n        return $string;\n\
    \    }\n    $prefix = substr($string, 0, $i);\n    $suffix = substr($string, $i);\n\
    \    return $prefix . strrev($suffix) . $suffix;\n}\n", "  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = $string_length - 1; $i >= 0; $i--) {\n\
    \    $substring = substr($string, $i);\n    if (is_palindrome($substring)) {\n\
    \      $palindrome_length = strlen($substring);\n      break;\n    }\n  }\n  $prefix\
    \ = substr($string, 0, $string_length - $palindrome_length);\n  $prefix_reversed\
    \ = strrev($prefix);\n  return $string . $prefix_reversed;\n}\n", "    $length\
    \ = strlen($string);\n    if ($length == 0) {\n        return $string;\n    }\n\
    \    $longest_palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $palindrome_length = 0;\n        for ($j = 0; $j <= $i; $j++) {\n   \
    \         if ($string[$i - $j] == $string[$i + $j]) {\n                $palindrome_length\
    \ += 2;\n            } else {\n                break;\n            }\n       \
    \ }\n        if ($palindrome_length > $longest_palindrome_length) {\n        \
    \    $longest_palindrome_length = $palindrome_length;\n        }\n    }\n    $palindrome_prefix_length\
    \ = $length - $longest_palindrome_length;\n    $palindrome_prefix = substr($string,\
    \ 0, $palindrome_prefix_length);\n    $palindrome_prefix_reversed = strrev($palindrome_prefix);\n\
    \    return $string . $palindrome_prefix_reversed;\n}\n", "    $string_length\
    \ = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    return $string\
    \ . strrev(substr($string, 0, $string_length - $palindrome_length));\n}\n", " \
    \ $len = strlen($string);\n  $palindrome = $string;\n  for ($i = $len; $i > 0;\
    \ $i--) {\n    $suffix = substr($string, $len - $i);\n    if (is_palindrome($suffix))\
    \ {\n      $prefix = substr($string, 0, $len - $i);\n      $palindrome .= strrev($prefix);\n\
    \      break;\n    }\n  }\n  return $palindrome;\n}\n", "    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n   \
    \     if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n",
  "    $length = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $palindrome_length = max($palindrome_length, longest_palindrome_suffix($string,\
    \ $i));\n    }\n    $prefix = substr($string, 0, $length - $palindrome_length);\n\
    \    return $string . strrev($prefix);\n}\n", "  $len = strlen($string);\n  if\
    \ ($len <= 1) {\n    return $string;\n  }\n  $max_palindrome_len = 0;\n  $max_palindrome_start\
    \ = 0;\n  for ($i = 0; $i < $len; $i++) {\n    $palindrome_len = 0;\n    $palindrome_start\
    \ = 0;\n    // Check if a substring starting at $i is a palindrome.\n    for ($j\
    \ = 0; $j < $len - $i; $j++) {\n      if ($string[$i + $j] != $string[$len - 1\
    \ - $j]) {\n        break;\n      }\n      $palindrome_len = $j + 1;\n      $palindrome_start\
    \ = $i;\n    }\n    if ($palindrome_len > $max_palindrome_len) {\n      $max_palindrome_len\
    \ = $palindrome_len;\n      $max_palindrome_start = $palindrome_start;\n    }\n\
    \  }\n  $prefix = substr($string, 0, $max_palindrome_start);\n  $prefix_rev =\
    \ strrev($prefix);\n  return $string . $prefix_rev;\n}\n", "    $length = strlen($string);\n\
    \    $max_length = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $length_left = $i;\n        $length_right = $length - $i - 1;\n \
    \       $length_min = min($length_left, $length_right);\n        for ($j = 0;\
    \ $j <= $length_min; $j++) {\n            if ($string[$i - $j] != $string[$i +\
    \ $j]) {\n                break;\n            }\n        }\n        $length_palindrome\
    \ = 2 * $j - 1;\n        if ($length_palindrome > $max_length) {\n           \
    \ $max_length = $length_palindrome;\n            $max_index = $i;\n        }\n\
    \    }\n    $length_left = $max_index;\n    $length_right = $length - $max_index\
    \ - 1;\n    $length_min = min($length_left, $length_right);\n    for ($j = 0;\
    \ $j <= $length_min; $j++) {\n        if ($string[$max_index - $j] != $string[$max_index\
    \ + 1 + $j]) {\n            break;\n        }\n    }\n    $length_palindrome =\
    \ 2 * $j;\n    if ($length_palindrome > $max_length) {\n        $max_length =\
    \ $length_palindrome;\n        $max_index = $i;\n    }\n    $prefix = substr($string,\
    \ 0, $max_index - $length_palindrome / 2 + 1);\n    $suffix = strrev($prefix);\n\
    \    return $string . $suffix;\n}\n", "    $length = strlen($string);\n    $i\
    \ = $length;\n    while ($i > 0) {\n        $substring = substr($string, 0, $i);\n\
    \        if (is_palindrome($substring)) {\n            $prefix = substr($string,\
    \ $i);\n            $prefix_reversed = strrev($prefix);\n            return $string\
    \ . $prefix_reversed;\n        }\n        $i--;\n    }\n    return $string;\n\
    }\n", "    $length = strlen($string);\n    $i = 0;\n    $j = $length - 1;\n  \
    \  while ($i < $j) {\n        if ($string[$i] != $string[$j]) {\n            break;\n\
    \        }\n        $i++;\n        $j--;\n    }\n    if ($i >= $j) {\n       \
    \ return $string;\n    }\n    $prefix = substr($string, 0, $i);\n    $suffix =\
    \ substr($string, $i);\n    return $prefix . make_palindrome(strrev($suffix))\
    \ . $suffix;\n}\n\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"\
    cata\") . \"\\n\";\necho make_palindrome(\"\") . \"\\n\";\necho make_palindrome(\"\
    a\") . \"\\n\";\necho make_palindrome(\"ab\") . \"\\n\";\necho make_palindrome(\"\
    aba\") . \"\\n\";\necho make_palindrome(\"abac\") . \"\\n\";\necho make_palindrome(\"\
    abacd\") . \"\\n\";\necho make_palindrome(\"abacde\") . \"\\n\";\necho make_palindrome(\"\
    abacdef\") . \"\\n\";\necho make_palindrome(\"abacdefg\") . \"\\n\";\necho make_palindrome(\"\
    abacdefgh\") . \"\\n\";\necho make_palindrome(\"abacdefghi\") . \"\\n\";\necho\
    \ make_palindrome(\"abacdefghij\") . \"\\n\";\necho make_palindrome(\"abacdefghijk\"\
    ) . \"\\n\";\necho make_palindrome(\"abacdefghijkl\") . \"\\n\";\necho make_palindrome(\"\
    abacdefghijklm\") . \"\\n\";\necho make_palindrome(\"abacdefghijklmn\") . \"\\\
    n\";\necho make_palindrome(\"abacdefghijklmno\") . \"\\n\";\necho make_palindrome(\"\
    abacdefghijklmnop\") . \"\\n\";\necho make_palindrome(\"abacdefghijklmnopq\")\
    \ . \"\\n\";\necho make_palindrome", "    $length = strlen($string);\n    $longest_palindrome_suffix\
    \ = \"\";\n    for ($i = 0; $i < $length; $i++) {\n        $suffix = substr($string,\
    \ $i);\n        $prefix = substr($string, 0, $length - $i);\n        if ($suffix\
    \ == strrev($suffix) && strlen($suffix) > strlen($longest_palindrome_suffix))\
    \ {\n            $longest_palindrome_suffix = $suffix;\n        }\n    }\n   \
    \ return $string . strrev(substr($string, 0, $length - strlen($longest_palindrome_suffix)));\n\
    }\n", "    $length = strlen($string);\n    if ($length == 0) {\n        return\
    \ \"\";\n    }\n    $longest_palindrome_suffix = \"\";\n    for ($i = $length;\
    \ $i > 0; $i--) {\n        $suffix = substr($string, $length - $i);\n        if\
    \ (is_palindrome($suffix)) {\n            $longest_palindrome_suffix = $suffix;\n\
    \            break;\n        }\n    }\n    $prefix = substr($string, 0, $length\
    \ - strlen($longest_palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n", "    $string_length = strlen($string);\n    $longest_palindrome_length =\
    \ 0;\n    $longest_palindrome_start = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $palindrome_length = 0;\n        $palindrome_start = $i;\n\
    \        $palindrome_end = $i;\n        while ($palindrome_start >= 0 && $palindrome_end\
    \ < $string_length) {\n            if ($string[$palindrome_start] == $string[$palindrome_end])\
    \ {\n                $palindrome_length = $palindrome_end - $palindrome_start\
    \ + 1;\n                if ($palindrome_length > $longest_palindrome_length) {\n\
    \                    $longest_palindrome_length = $palindrome_length;\n      \
    \              $longest_palindrome_start = $palindrome_start;\n              \
    \  }\n            } else {\n                break;\n            }\n          \
    \  $palindrome_start--;\n            $palindrome_end++;\n        }\n    }\n  \
    \  $palindrome_prefix = substr($string, 0, $longest_palindrome_start);\n    $palindrome_prefix_reversed\
    \ = strrev($palindrome_prefix);\n    return $string . $palindrome_prefix_reversed;\n\
    }\n", "  $len = strlen($string);\n  for ($i = $len; $i > 0; $i--) {\n    $suffix\
    \ = substr($string, $len - $i);\n    if (is_palindrome($suffix)) {\n      $prefix\
    \ = substr($string, 0, $len - $i);\n      return $string . strrev($prefix);\n\
    \    }\n  }\n  return $string;\n}\n", "    $length = strlen($string);\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = 0; $i < $length; $i++) {\n        $suffix = substr($string,\
    \ $i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - strlen($longest_palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n", "    $string_length = strlen($string);\n    $palindrome_length = 0;\n  \
    \  for ($i = 0; $i < $string_length; $i++) {\n        $substring = substr($string,\
    \ $i);\n        $substring_length = strlen($substring);\n        if ($substring_length\
    \ > $palindrome_length && is_palindrome($substring)) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    return $string . strrev($prefix);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
