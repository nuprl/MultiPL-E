name: HumanEval_126_is_sorted
language: php
prompt: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
  // in ascending order. If list has more than 1 duplicate of the same\n// number,\
  \ return False. Assume no negative numbers and only integers.\n// Examples\n// >>>\
  \ is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n\
  // >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3,\
  \ 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n//\
  \ >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
  \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
  function is_sorted($lst) {\n"
tests: "function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4,\
  \ 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sorted = true;\n    $prev = null;\n    $duplicate = false;\n \
    \   foreach ($lst as $num) {\n        if ($prev !== null) {\n            if ($num\
    \ < $prev) {\n                $sorted = false;\n            }\n            if\
    \ ($num === $prev) {\n                $duplicate = true;\n            }\n    \
    \    }\n        $prev = $num;\n    }\n    return $sorted && !$duplicate;\n}\n",
  "    $sorted = true;\n    $prev = null;\n    $duplicate = false;\n    foreach ($lst\
    \ as $num) {\n        if ($prev !== null) {\n            if ($num < $prev) {\n\
    \                $sorted = false;\n            }\n            if ($num === $prev)\
    \ {\n                $duplicate = true;\n            }\n        }\n        $prev\
    \ = $num;\n    }\n    return $sorted && !$duplicate;\n}\n", "    $sorted = true;\n\
    \    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if\
    \ ($lst[$i] < $prev) {\n            $sorted = false;\n            break;\n   \
    \     }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $sorted\
    \ = true;\n    $prev = null;\n    foreach ($lst as $num) {\n        if ($prev\
    \ !== null && $num <= $prev) {\n            $sorted = false;\n            break;\n\
    \        }\n        $prev = $num;\n    }\n    return $sorted;\n}\n", "    $lst_len\
    \ = count($lst);\n    if ($lst_len == 1) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    $sorted\
    \ = true;\n    $last = null;\n    foreach ($lst as $num) {\n        if ($last\
    \ !== null && $num < $last) {\n            $sorted = false;\n            break;\n\
    \        }\n        $last = $num;\n    }\n    return $sorted;\n}\n", "    $prev\
    \ = null;\n    $duplicate = false;\n    foreach ($lst as $num) {\n        if ($prev\
    \ !== null && $num < $prev) {\n            return false;\n        }\n        if\
    \ ($prev !== null && $num == $prev) {\n            $duplicate = true;\n      \
    \  }\n        $prev = $num;\n    }\n    return !$duplicate;\n}\n", "    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            return false;\n        }\n        $prev = $num;\n    }\n\
    \    return true;\n}\n", "    $prev = 0;\n    $dup = false;\n    foreach ($lst\
    \ as $num) {\n        if ($num == $prev) {\n            $dup = true;\n       \
    \ }\n        if ($num < $prev && !$dup) {\n            return false;\n       \
    \ }\n        $prev = $num;\n    }\n    return true;\n}\n", "    $prev = $lst[0];\n\
    \    $duplicate = false;\n    for ($i = 1; $i < count($lst); $i++) {\n       \
    \ if ($lst[$i] < $prev) {\n            return false;\n        }\n        if ($lst[$i]\
    \ == $prev) {\n            $duplicate = true;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return !$duplicate;\n}\n", "    $sorted = true;\n    $prev = null;\n\
    \    foreach ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n\
    \            $sorted = false;\n            break;\n        }\n        $prev =\
    \ $num;\n    }\n    return $sorted;\n}\n", "    $len = count($lst);\n    if ($len\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "\tif (count($lst) <= 1) {\n\t\treturn\
    \ true;\n\t}\n\tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >=\
    \ $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  \
    \  $sorted = true;\n    $prev = null;\n    foreach ($lst as $num) {\n        if\
    \ ($prev !== null && $num <= $prev) {\n            $sorted = false;\n        \
    \    break;\n        }\n        $prev = $num;\n    }\n    return $sorted;\n}\n",
  "    $sorted = true;\n    $prev = null;\n    foreach ($lst as $num) {\n        if\
    \ ($prev !== null && $num <= $prev) {\n            $sorted = false;\n        \
    \    break;\n        }\n        $prev = $num;\n    }\n    return $sorted;\n}\n",
  "    $len = count($lst);\n    if ($len <= 1) {\n        return true;\n    }\n  \
    \  $prev = $lst[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            return false;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return true;\n}\n", "    $prev = null;\n    $duplicate = false;\n\
    \    foreach ($lst as $num) {\n        if ($prev !== null && $num < $prev) {\n\
    \            return false;\n        }\n        if ($prev !== null && $num == $prev)\
    \ {\n            $duplicate = true;\n        }\n        $prev = $num;\n    }\n\
    \    return !$duplicate;\n}\n", "    $sorted = true;\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last === null) {\n            $last = $item;\n\
    \            continue;\n        }\n        if ($item < $last) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $last = $item;\n    }\n   \
    \ return $sorted;\n}\n\n$lst = array(5);\necho is_sorted($lst) ? \"true\" : \"\
    false\";\necho \"\\n\";\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst)\
    \ ? \"true\" : \"false\";\necho \"\\n\";\n\n$lst = array(1, 3, 2, 4, 5);\necho\
    \ is_sorted($lst) ? \"true\" : \"false\";\necho \"\\n\";\n\n$lst = array(1, 2,\
    \ 3, 4, 5, 6);\necho is_sorted($lst) ? \"true\" : \"false\";\necho \"\\n\";\n\n\
    $lst = array(1, 2, 3, 4, 5, 6, 7);\necho is_sorted($lst) ? \"true\" : \"false\"\
    ;\necho \"\\n\";\n\n$lst = array(1, 3, 2, 4, 5, 6, 7);\necho is_sorted($lst) ?\
    \ \"true\" : \"false\";\necho \"\\n\";\n\n$lst = array(1, 2, 2, 3, 3, 4);\necho\
    \ is_sorted($lst) ? \"true\" : \"false\";\necho \"\\n\";\n\n$lst = array(1, 2,\
    \ 2, 2, 3, 4);\necho is_sorted($lst) ? \"true\" : \"false\";\necho \"\\n\";",
  "  $prev = null;\n  $duplicate = false;\n  foreach ($lst as $num) {\n    if ($prev\
    \ !== null && $num < $prev) {\n      return false;\n    }\n    if ($prev !== null\
    \ && $num == $prev) {\n      $duplicate = true;\n    }\n    $prev = $num;\n  }\n\
    \  return !$duplicate;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
