language: php
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max = null;\n  foreach ($strings\
    \ as $string) {\n    if ($max === null || strlen($string) > strlen($max)) {\n\
    \      $max = $string;\n    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\
    \tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\
    \t}\n\treturn $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1; $i <\
    \ count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $str) {\n    if\
    \ (strlen($str) > strlen($longest)) {\n      $longest = $str;\n    }\n  }\n  return\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1; $i <\
    \ count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  for ($i = 1; $i < count($strings);\
    \ $i++) {\n    if (strlen($strings[$i]) > strlen($longest)) {\n      $longest\
    \ = $strings[$i];\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803405
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
- exit_code: 0
  program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730907
