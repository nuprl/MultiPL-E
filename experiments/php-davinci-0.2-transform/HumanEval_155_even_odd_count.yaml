name: HumanEval_155_even_odd_count
language: php
prompt: "<?php\n// Given an integer. return a tuple that has the number of even and\
  \ odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1,\
  \ 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num)\
  \ {\n"
tests: "function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n       \
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n", "  $even = 0;\n  $odd = 0;\n  $num = abs($num);\n  while ($num > 0) {\n\
    \    $digit = $num % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n    } else\
    \ {\n      $odd++;\n    }\n    $num = floor($num / 10);\n  }\n  return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n", "\t$even =\
    \ 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\necho \"even_odd_count(-12)\
    \ = \" . even_odd_count(-12)[0] . \" even, \" . even_odd_count(-12)[1] . \" odd\\\
    n\";\necho \"even_odd_count(123) = \" . even_odd_count(123)[0] . \" even, \" .\
    \ even_odd_count(123)[1] . \" odd\\n\";", "    $even = 0;\n    $odd = 0;\n   \
    \ $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n   \
    \     if ($digit % 2 == 0) {\n            $even++;\n        } else {\n       \
    \     $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n",
  "    $even_count = 0;\n    $odd_count = 0;\n    $num = abs($num);\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even_count, $odd_count);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n       \
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
