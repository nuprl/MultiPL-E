name: HumanEval_90_next_smallest
language: php
prompt: "<?php\n// You are given a list of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n// Return None if there is\
  \ no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5,\
  \ 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1,\
  \ 1))\n// null\nfunction next_smallest($lst) {\n"
tests: "function candidate(...$args) {\n    return next_smallest(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 4, 3, 2)) !==\
  \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1))\
  \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 1, 1, 1, 0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-35,\
  \ 34, 12, -45)) !== -35) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    if (count($lst) < 2) {\n        return null;\n    }\n    $min =\
    \ min($lst);\n    $min_index = array_search($min, $lst);\n    $lst[$min_index]\
    \ = INF;\n    $second_min = min($lst);\n    return $second_min;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5);\necho next_smallest($lst) . PHP_EOL;\n$lst = array(5, 1, 4, 3,\
    \ 2);\necho next_smallest($lst) . PHP_EOL;\n$lst = array();\necho next_smallest($lst)\
    \ . PHP_EOL;\n$lst = array(1, 1);\necho next_smallest($lst) . PHP_EOL;", "   \
    \ $min = min($lst);\n    $max = max($lst);\n    $min_count = 0;\n    $max_count\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num == $min) {\n          \
    \  $min_count++;\n        }\n        if ($num == $max) {\n            $max_count++;\n\
    \        }\n    }\n    if ($min_count > 1 || $max_count > 1) {\n        return\
    \ null;\n    }\n    $min_index = array_search($min, $lst);\n    $max_index = array_search($max,\
    \ $lst);\n    if ($min_index < $max_index) {\n        $lst = array_slice($lst,\
    \ $min_index + 1);\n    } else {\n        $lst = array_slice($lst, $max_index\
    \ + 1);\n    }\n    return min($lst);\n}\n\n$lst = [1, 2, 3, 4, 5];\necho next_smallest($lst)\
    \ . PHP_EOL;\n$lst = [5, 1, 4, 3, 2];\necho next_smallest($lst) . PHP_EOL;\n$lst\
    \ = [];\necho next_smallest($lst) . PHP_EOL;\n$lst = [1, 1];\necho next_smallest($lst)\
    \ . PHP_EOL;", "    $lst = array_unique($lst);\n    sort($lst);\n    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    return $lst[1];\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $min = min($lst);\n    $lst = array_diff($lst,\
    \ [$min]);\n    return min($lst);\n}\n", "    $min = min($lst);\n    $min_count\
    \ = 0;\n    foreach ($lst as $item) {\n        if ($item == $min) {\n        \
    \    $min_count++;\n        }\n    }\n    if ($min_count > 1) {\n        return\
    \ null;\n    }\n    $lst = array_diff($lst, array($min));\n    return min($lst);\n\
    }\n", "    if (count($lst) < 2) {\n        return null;\n    }\n    $min = min($lst);\n\
    \    $min_index = array_search($min, $lst);\n    unset($lst[$min_index]);\n  \
    \  return min($lst);\n}\n", "    if (count($lst) < 2) {\n        return null;\n\
    \    }\n    $lst = array_unique($lst);\n    sort($lst);\n    return $lst[1];\n\
    }\n", "    $lst = array_unique($lst);\n    sort($lst);\n    if (count($lst) <\
    \ 2) {\n        return null;\n    }\n    return $lst[1];\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $min = min($lst);\n    $lst = array_diff($lst,\
    \ [$min]);\n    return min($lst);\n}\n", "    $min = min($lst);\n    $min_count\
    \ = count(array_keys($lst, $min));\n    if ($min_count > 1) {\n        return\
    \ null;\n    }\n    $min_index = array_search($min, $lst);\n    $lst[$min_index]\
    \ = PHP_INT_MAX;\n    return min($lst);\n}\n", "    $smallest = null;\n    $next_smallest\
    \ = null;\n    foreach ($lst as $value) {\n        if ($smallest === null) {\n\
    \            $smallest = $value;\n        } else if ($value < $smallest) {\n \
    \           $next_smallest = $smallest;\n            $smallest = $value;\n   \
    \     } else if ($next_smallest === null || $value < $next_smallest) {\n     \
    \       $next_smallest = $value;\n        }\n    }\n    return $next_smallest;\n\
    }\n", "    $count = count($lst);\n    if ($count < 2) {\n        return null;\n\
    \    }\n    $smallest = $lst[0];\n    $second_smallest = null;\n    for ($i =\
    \ 1; $i < $count; $i++) {\n        if ($lst[$i] < $smallest) {\n            $second_smallest\
    \ = $smallest;\n            $smallest = $lst[$i];\n        } else if ($lst[$i]\
    \ < $second_smallest || $second_smallest === null) {\n            $second_smallest\
    \ = $lst[$i];\n        }\n    }\n    return $second_smallest;\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $smallest = $lst[0];\n    $second_smallest\
    \ = null;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] <\
    \ $smallest) {\n            $second_smallest = $smallest;\n            $smallest\
    \ = $lst[$i];\n        } else if ($lst[$i] < $second_smallest || $second_smallest\
    \ == null) {\n            $second_smallest = $lst[$i];\n        }\n    }\n   \
    \ return $second_smallest;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst)\
    \ . \"\\n\";\n$lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst) . \"\\n\"\
    ;\n$lst = array();\necho next_smallest($lst) . \"\\n\";\n$lst = array(1, 1);\n\
    echo next_smallest($lst) . \"\\n\";", "    if (count($lst) < 2) {\n        return\
    \ null;\n    }\n    $smallest = min($lst);\n    $smallest_index = array_search($smallest,\
    \ $lst);\n    unset($lst[$smallest_index]);\n    return min($lst);\n}\n", "  if\
    \ (count($lst) < 2) {\n    return null;\n  }\n  $min = min($lst);\n  $min_index\
    \ = array_search($min, $lst);\n  unset($lst[$min_index]);\n  return min($lst);\n\
    }\n", "    $min = min($lst);\n    $min_count = 0;\n    $second_min = null;\n \
    \   foreach ($lst as $item) {\n        if ($item == $min) {\n            $min_count++;\n\
    \        } elseif ($second_min == null || $item < $second_min) {\n           \
    \ $second_min = $item;\n        }\n    }\n    if ($min_count > 1) {\n        return\
    \ null;\n    }\n    return $second_min;\n}\n", "    $min = min($lst);\n    $min_count\
    \ = 0;\n    foreach ($lst as $item) {\n        if ($item == $min) {\n        \
    \    $min_count++;\n        }\n    }\n    if ($min_count > 1) {\n        return\
    \ null;\n    }\n    $lst = array_diff($lst, array($min));\n    return min($lst);\n\
    }\n", "    $min = min($lst);\n    $min_count = count(array_keys($lst, $min));\n\
    \    if ($min_count > 1) {\n        return null;\n    }\n    $lst = array_diff($lst,\
    \ array($min));\n    return min($lst);\n}\n", "    if (count($lst) < 2) {\n  \
    \      return null;\n    }\n    $lst = array_unique($lst);\n    sort($lst);\n\
    \    return $lst[1];\n}\n", "    if (count($lst) < 2) {\n        return null;\n\
    \    }\n    $min = min($lst);\n    $min_index = array_search($min, $lst);\n  \
    \  unset($lst[$min_index]);\n    return min($lst);\n}\n\n$lst = array(1, 2, 3,\
    \ 4, 5);\necho next_smallest($lst) . \"\\n\";\n$lst = array(5, 1, 4, 3, 2);\n\
    echo next_smallest($lst) . \"\\n\";\n$lst = array();\necho next_smallest($lst)\
    \ . \"\\n\";\n$lst = array(1, 1);\necho next_smallest($lst) . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
