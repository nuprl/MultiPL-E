name: HumanEval_117_select_words
language: php
prompt: "<?php\n// Given a string s and a natural number n, you have been tasked to\
  \ implement \n// a function that returns a list of all words from string s that\
  \ contain exactly \n// n consonants, in order these words appear in the string s.\n\
  // If the string s is empty then the function should return an empty list.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>>\
  \ select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n//\
  \ >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"\
  Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n\
  // array(\"Uncle\")\nfunction select_words($s, $n) {\n"
tests: "function candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
  little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
  \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4)\
  \ !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"\
  )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n", "    $words = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n", "    $words = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n", "    $words = explode(' ', $s);\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        if (count_consonants($word) == $n) {\n        \
    \    $result[] = $word;\n        }\n    }\n    return $result;\n}\n", "  $s =\
    \ preg_replace('/[^a-zA-Z ]/', '', $s);\n  $s = explode(' ', $s);\n  $result =\
    \ [];\n  foreach ($s as $word) {\n    if (substr_count($word, 'a') + substr_count($word,\
    \ 'e') + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') + substr_count($word, 'y') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n", "    $s = str_replace(\" \", \"\", $s);\n    $s\
    \ = str_split($s);\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    $consonants = array();\n    foreach ($s as $letter) {\n        if (!in_array($letter,\
    \ $vowels)) {\n            $consonants[] = $letter;\n        }\n    }\n    $consonants\
    \ = count($consonants);\n    if ($consonants == $n) {\n        return array($s);\n\
    \    }\n    return array();\n}\n", "    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "    $s = str_replace(' ', '', $s);\n    $s = str_split($s);\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = [];\n    foreach ($s as $letter)\
    \ {\n        if (!in_array($letter, $vowels)) {\n            $consonants[] = $letter;\n\
    \        }\n    }\n    $consonants = count($consonants);\n    return $consonants;\n\
    }\n", "    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n", "    $s = str_replace('\
    \ ', '', $s);\n    $s = str_split($s);\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $consonants = [];\n    foreach ($s as $letter) {\n        if (!in_array($letter,\
    \ $vowels)) {\n            $consonants[] = $letter;\n        }\n    }\n    $consonants\
    \ = count($consonants);\n    return $consonants;\n}\n\necho select_words(\"Mary\
    \ had a little lamb\", 4);", "    $words = explode(' ', $s);\n    $result = [];\n\
    \    foreach ($words as $word) {\n        if (consonants($word) == $n) {\n   \
    \         $result[] = $word;\n        }\n    }\n    return $result;\n}\n", " \
    \   $words = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        if (count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n", "    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (count_consonants($word) === $n) {\n      $result[] = $word;\n   \
    \ }\n  }\n  return $result;\n}\n", "    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "\t$words = explode(' ', $s);\n\t$result = [];\n\tforeach ($words as $word)\
    \ {\n\t\tif (count_consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n", "    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  $words = explode(' ', $s);\n  foreach ($words as $word)\
    \ {\n    if (count_consonants($word) == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n", "    $words = explode(' ', $s);\n    $result =\
    \ [];\n    foreach ($words as $word) {\n        if (consonants($word) == $n) {\n\
    \            $result[] = $word;\n        }\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
