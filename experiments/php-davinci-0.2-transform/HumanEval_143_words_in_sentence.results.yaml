language: php
name: HumanEval_143_words_in_sentence
results:
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp1lielxuo.php:20\nStack trace:\n#0 /tmp/tmp1lielxuo.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp1lielxuo.php(31): candidate('This is a test')\n#2 /tmp/tmp1lielxuo.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1lielxuo.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = array();\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpi4hip83b.php:20\nStack trace:\n#0 /tmp/tmpi4hip83b.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpi4hip83b.php(32): candidate('This is a test')\n#2 /tmp/tmpi4hip83b.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi4hip83b.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $primes = [];\n  foreach ($words as $word) {\n    if (is_prime(strlen($word)))\
    \ {\n      $primes[] = $word;\n    }\n  }\n  return implode(' ', $primes);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxgrb5xdu.php:20\nStack trace:\n#0 /tmp/tmpxgrb5xdu.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxgrb5xdu.php(32): candidate('This is a test')\n#2 /tmp/tmpxgrb5xdu.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxgrb5xdu.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $primes = [];\n  foreach ($words as $word) {\n    if (is_prime(strlen($word)))\
    \ {\n      $primes[] = $word;\n    }\n  }\n  return implode(' ', $primes);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxgrb5xdu.php:20\nStack trace:\n#0 /tmp/tmpxgrb5xdu.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxgrb5xdu.php(32): candidate('This is a test')\n#2 /tmp/tmpxgrb5xdu.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxgrb5xdu.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp1lielxuo.php:20\nStack trace:\n#0 /tmp/tmp1lielxuo.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp1lielxuo.php(31): candidate('This is a test')\n#2 /tmp/tmp1lielxuo.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1lielxuo.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $primes = [];\n  foreach ($words as $word) {\n    if (is_prime(strlen($word)))\
    \ {\n      $primes[] = $word;\n    }\n  }\n  return implode(' ', $primes);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxgrb5xdu.php:20\nStack trace:\n#0 /tmp/tmpxgrb5xdu.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxgrb5xdu.php(32): candidate('This is a test')\n#2 /tmp/tmpxgrb5xdu.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxgrb5xdu.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result =\
    \ [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word), $primes))\
    \ {\n            $result[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = array();\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpi4hip83b.php:20\nStack trace:\n#0 /tmp/tmpi4hip83b.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpi4hip83b.php(32): candidate('This is a test')\n#2 /tmp/tmpi4hip83b.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi4hip83b.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = array();\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n\
    \        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2gwos5zk.php:20\nStack trace:\n#0 /tmp/tmp2gwos5zk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2gwos5zk.php(32): candidate('This is a test')\n#2 /tmp/tmp2gwos5zk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2gwos5zk.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $sentence\
    \ = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($sentence as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsw8ee7kt.php:20\nStack trace:\n#0 /tmp/tmpsw8ee7kt.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpsw8ee7kt.php(31): candidate('This is a test')\n#2 /tmp/tmpsw8ee7kt.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsw8ee7kt.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    // TODO:\
    \ Implement this function\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz06gytn.php:24\n\
    Stack trace:\n#0 /tmp/tmpbz06gytn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbz06gytn.php\
    \ on line 24\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result =\
    \ [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word), $primes))\
    \ {\n            $result[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = array(1, 2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $result\
    \ = array();\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8g7eea10.php:33\n\
    Stack trace:\n#0 /tmp/tmp8g7eea10.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8g7eea10.php\
    \ on line 33\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp1lielxuo.php:20\nStack trace:\n#0 /tmp/tmp1lielxuo.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp1lielxuo.php(31): candidate('This is a test')\n#2 /tmp/tmp1lielxuo.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1lielxuo.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = array();\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n\
    \        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2gwos5zk.php:20\nStack trace:\n#0 /tmp/tmp2gwos5zk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2gwos5zk.php(32): candidate('This is a test')\n#2 /tmp/tmp2gwos5zk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2gwos5zk.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  $result = [];\n  foreach\
    \ ($words as $word) {\n    if (in_array(strlen($word), $primes)) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return implode(' ', $result);\n}\necho words_in_sentence(\"\
    This is a test\") . PHP_EOL;\necho words_in_sentence(\"lets go for swimming\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'is

    go for

    '
  timestamp: 1659793768
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result =\
    \ [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word), $primes))\
    \ {\n            $result[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $sentence\
    \ = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($sentence as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnywg56nv.php:20\nStack trace:\n#0 /tmp/tmpnywg56nv.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpnywg56nv.php(32): candidate('This is a test')\n#2 /tmp/tmpnywg56nv.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnywg56nv.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpad8zygbq.php:20\nStack trace:\n#0 /tmp/tmpad8zygbq.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpad8zygbq.php(31): candidate('This is a test')\n#2 /tmp/tmpad8zygbq.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpad8zygbq.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = array();\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpi4hip83b.php:20\nStack trace:\n#0 /tmp/tmpi4hip83b.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpi4hip83b.php(32): candidate('This is a test')\n#2 /tmp/tmpi4hip83b.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi4hip83b.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $result = [];\n  foreach ($words as $word) {\n    if (is_prime(strlen($word)))\
    \ {\n      $result[] = $word;\n    }\n  }\n  return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpb20gd770.php:20\nStack trace:\n#0 /tmp/tmpb20gd770.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpb20gd770.php(32): candidate('This is a test')\n#2 /tmp/tmpb20gd770.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpb20gd770.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $primes = [];\n  foreach ($words as $word) {\n    if (is_prime(strlen($word)))\
    \ {\n      $primes[] = $word;\n    }\n  }\n  return implode(' ', $primes);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxgrb5xdu.php:20\nStack trace:\n#0 /tmp/tmpxgrb5xdu.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxgrb5xdu.php(32): candidate('This is a test')\n#2 /tmp/tmpxgrb5xdu.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxgrb5xdu.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n  $words = explode('\
    \ ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $prime_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tyko8im.php:20\nStack trace:\n#0 /tmp/tmp0tyko8im.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0tyko8im.php(32): candidate('This is a test')\n#2 /tmp/tmp0tyko8im.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0tyko8im.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $primes[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8_5uzngs.php:20\nStack trace:\n#0 /tmp/tmp8_5uzngs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8_5uzngs.php(32): candidate('This is a test')\n#2 /tmp/tmp8_5uzngs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8_5uzngs.php on line 20\n"
  timestamp: 1659730257
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $result\
    \ = array();\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $sentence_array\
    \ = explode(\" \", $sentence);\n    $result = [];\n    foreach ($sentence_array\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpncgaonvf.php:20\nStack trace:\n#0 /tmp/tmpncgaonvf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpncgaonvf.php(32): candidate('This is a test')\n#2 /tmp/tmpncgaonvf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpncgaonvf.php on line 20\n"
  timestamp: 1659793768
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        if (is_prime(strlen($word))) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8nl1aegj.php:20\nStack trace:\n#0 /tmp/tmp8nl1aegj.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8nl1aegj.php(32): candidate('This is a test')\n#2 /tmp/tmp8nl1aegj.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nl1aegj.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2goojfns.php:20\nStack trace:\n#0 /tmp/tmp2goojfns.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2goojfns.php(32): candidate('This is a test')\n#2 /tmp/tmp2goojfns.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2goojfns.php on line 20\n"
  timestamp: 1659730257
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $prime_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpugyzq2qw.php:20\nStack trace:\n#0 /tmp/tmpugyzq2qw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpugyzq2qw.php(31): candidate('This is a test')\n#2 /tmp/tmpugyzq2qw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpugyzq2qw.php on line 20\n"
  timestamp: 1659730257
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\"\
    )\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\"\
    )\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence\
    \ contains only letters\nfunction words_in_sentence($sentence) {\n    $words =\
    \ explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result =\
    \ [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word), $primes))\
    \ {\n            $result[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho words_in_sentence(\"This is a test\");\necho PHP_EOL;\n\
    echo words_in_sentence(\"lets go for swimming\");\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'is

    go for

    '
  timestamp: 1659793768
