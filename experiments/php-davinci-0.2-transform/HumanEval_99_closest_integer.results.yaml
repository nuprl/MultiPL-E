language: php
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r702p7h.php:31\n\
    Stack trace:\n#0 /tmp/tmp1r702p7h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1r702p7h.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0zsrpeh.php:31\n\
    Stack trace:\n#0 /tmp/tmpo0zsrpeh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo0zsrpeh.php\
    \ on line 31\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1rgl3pw.php:30\n\
    Stack trace:\n#0 /tmp/tmpx1rgl3pw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx1rgl3pw.php\
    \ on line 30\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $integer = (int)$value;\n    $decimal = $value - $integer;\n\
    \    if ($decimal >= 0.5) {\n        return $integer + 1;\n    } else {\n    \
    \    return $integer;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpzlha8z.php:33\n\
    Stack trace:\n#0 /tmp/tmpwpzlha8z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwpzlha8z.php\
    \ on line 33\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkokmcifw.php:26\n\
    Stack trace:\n#0 /tmp/tmpkokmcifw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkokmcifw.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    if ($value > 0) {\n        return ceil($value);\n    } else\
    \ {\n        return floor($value);\n    }\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnd3sdf5.php:28\n\
    Stack trace:\n#0 /tmp/tmpbnd3sdf5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbnd3sdf5.php\
    \ on line 28\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ $value + 0;\n    $int = (int)$value;\n    $dec = $value - $int;\n    if ($dec\
    \ >= 0.5) {\n        return $int + 1;\n    } else {\n        return $int;\n  \
    \  }\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1eh83dp.php:38\n\
    Stack trace:\n#0 /tmp/tmpg1eh83dp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpg1eh83dp.php\
    \ on line 38\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $int = intval($value);\n    if ($value - $int >= 0.5)\
    \ {\n        return $int + 1;\n    } else {\n        return $int;\n    }\n}\n\n\
    echo closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\\
    n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjfzmp3_.php:36\n\
    Stack trace:\n#0 /tmp/tmpnjfzmp3_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnjfzmp3_.php\
    \ on line 36\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  if ($value > 0) {\n    return floor($value);\n  } else {\n    return ceil($value);\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxe130kx7.php:29\n\
    Stack trace:\n#0 /tmp/tmpxe130kx7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxe130kx7.php\
    \ on line 29\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $ceil = ceil($value);\n    $floor = floor($value);\n   \
    \ if ($ceil - $value > $value - $floor) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\necho closest_integer(\"10\") . \"\\n\";\n\
    echo closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\
    \\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppayl28kd.php:34\n\
    Stack trace:\n#0 /tmp/tmppayl28kd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppayl28kd.php\
    \ on line 34\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\n\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoxnz5bk.php:35\n\
    Stack trace:\n#0 /tmp/tmpxoxnz5bk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxoxnz5bk.php\
    \ on line 35\n"
  timestamp: 1659730980
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscpbj3rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpscpbj3rx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpscpbj3rx.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr2qv0s9.php:34\n\
    Stack trace:\n#0 /tmp/tmpzr2qv0s9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzr2qv0s9.php\
    \ on line 34\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value < 0 ? $floor : $ceil;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirj2htds.php:32\n\
    Stack trace:\n#0 /tmp/tmpirj2htds.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpirj2htds.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value_abs = abs($value);\n  $value_floor = floor($value_abs);\n  $value_ceil\
    \ = ceil($value_abs);\n  if ($value_abs - $value_floor < $value_ceil - $value_abs)\
    \ {\n    return $value < 0 ? -$value_floor : $value_floor;\n  } else {\n    return\
    \ $value < 0 ? -$value_ceil : $value_ceil;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5lvs9s3.php:32\n\
    Stack trace:\n#0 /tmp/tmpi5lvs9s3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi5lvs9s3.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value = round($value);\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpax_1degd.php:26\n\
    Stack trace:\n#0 /tmp/tmpax_1degd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpax_1degd.php\
    \ on line 26\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b9eb1as.php:24\n\
    Stack trace:\n#0 /tmp/tmp_b9eb1as.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_b9eb1as.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $int = (int)$value;\n  if ($value - $int >= 0.5) {\n    return $int + 1;\n\
    \  } else {\n    return $int;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs_hn7sw.php:32\n\
    Stack trace:\n#0 /tmp/tmphs_hn7sw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphs_hn7sw.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diff_floor = $value - $floor;\n    $diff_ceil = $ceil - $value;\n    if ($diff_floor\
    \ == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n    }\n    return\
    \ $diff_floor < $diff_ceil ? $floor : $ceil;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzki4y_s.php:31\n\
    Stack trace:\n#0 /tmp/tmpgzki4y_s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgzki4y_s.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor > 0.5) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "10", expecting ")" in /tmp/tmpax_cbqlc.php
    on line 62

    '
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr2qv0s9.php:34\n\
    Stack trace:\n#0 /tmp/tmpzr2qv0s9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzr2qv0s9.php\
    \ on line 34\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps92prh8k.php:34\n\
    Stack trace:\n#0 /tmp/tmps92prh8k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps92prh8k.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gg9p2j7.php:34\n\
    Stack trace:\n#0 /tmp/tmp8gg9p2j7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8gg9p2j7.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9v2qctg.php:34\n\
    Stack trace:\n#0 /tmp/tmpq9v2qctg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpq9v2qctg.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4ojkd8x.php:25\n\
    Stack trace:\n#0 /tmp/tmpl4ojkd8x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl4ojkd8x.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt2fmnhh.php:32\n\
    Stack trace:\n#0 /tmp/tmplt2fmnhh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplt2fmnhh.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4g10cfht.php:33\n\
    Stack trace:\n#0 /tmp/tmp4g10cfht.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4g10cfht.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = (int)\
    \ $value;\n    $decimal = $value - $num;\n    if ($decimal >= 0.5) {\n       \
    \ return $num + 1;\n    } else {\n        return $num;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_smqsiw.php:32\n\
    Stack trace:\n#0 /tmp/tmp9_smqsiw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9_smqsiw.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\necho closest_integer(\"10\") . \"\\n\";\n\
    echo closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\
    \\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexc_okwo.php:34\n\
    Stack trace:\n#0 /tmp/tmpexc_okwo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpexc_okwo.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4iq7n9e.php:28\n\
    Stack trace:\n#0 /tmp/tmpt4iq7n9e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt4iq7n9e.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value_abs = abs($value);\n    $value_floor = floor($value_abs);\n\
    \    $value_ceil = ceil($value_abs);\n    $value_floor_diff = $value_abs - $value_floor;\n\
    \    $value_ceil_diff = $value_ceil - $value_abs;\n    if ($value_floor_diff ==\
    \ $value_ceil_diff) {\n        if ($value >= 0) {\n            return $value_ceil;\n\
    \        } else {\n            return -$value_ceil;\n        }\n    } elseif ($value_floor_diff\
    \ < $value_ceil_diff) {\n        return $value_floor;\n    } else {\n        return\
    \ $value_ceil;\n    }\n}\n\necho closest_integer(\"10\");\necho \"\\n\";\necho\
    \ closest_integer(\"15.3\");\necho \"\\n\";\necho closest_integer(\"14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"\
    -14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.6\");\necho \"\\n\";\necho closest\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpmjtip1hd.php on line 76

    '
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2rtm55f.php:26\n\
    Stack trace:\n#0 /tmp/tmpc2rtm55f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc2rtm55f.php\
    \ on line 26\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjbu3x_6.php:36\n\
    Stack trace:\n#0 /tmp/tmpxjbu3x_6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxjbu3x_6.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value_floor = floor($value);\n    $value_ceil = ceil($value);\n\
    \    $value_floor_diff = abs($value - $value_floor);\n    $value_ceil_diff = abs($value\
    \ - $value_ceil);\n    if ($value_floor_diff == $value_ceil_diff) {\n        return\
    \ $value < 0 ? $value_floor : $value_ceil;\n    }\n    return $value_floor_diff\
    \ < $value_ceil_diff ? $value_floor : $value_ceil;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85yf_eg6.php:32\n\
    Stack trace:\n#0 /tmp/tmp85yf_eg6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp85yf_eg6.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        if ($value > 0) {\n           \
    \ return $ceil;\n        } else {\n            return $floor;\n        }\n   \
    \ } else if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } else {\n\
    \        return $ceil;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25c2itoo.php:39\n\
    Stack trace:\n#0 /tmp/tmp25c2itoo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp25c2itoo.php\
    \ on line 39\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b9eb1as.php:24\n\
    Stack trace:\n#0 /tmp/tmp_b9eb1as.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_b9eb1as.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ $ceil - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_qcq0jf.php:35\n\
    Stack trace:\n#0 /tmp/tmpc_qcq0jf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc_qcq0jf.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $int = (int)$value;\n\
    \    $dec = $value - $int;\n    if ($dec >= 0.5) {\n        return $int + 1;\n\
    \    } else {\n        return $int;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_stlk6n8.php:32\n\
    Stack trace:\n#0 /tmp/tmp_stlk6n8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_stlk6n8.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19m3phus.php:29\n\
    Stack trace:\n#0 /tmp/tmp19m3phus.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp19m3phus.php\
    \ on line 29\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgylw7fev.php:33\n\
    Stack trace:\n#0 /tmp/tmpgylw7fev.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgylw7fev.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58gv5brl.php:23\n\
    Stack trace:\n#0 /tmp/tmp58gv5brl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp58gv5brl.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkokmcifw.php:26\n\
    Stack trace:\n#0 /tmp/tmpkokmcifw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkokmcifw.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscpbj3rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpscpbj3rx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpscpbj3rx.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value_floor = floor($value);\n    $value_ceil = ceil($value);\n\
    \    $value_floor_diff = $value - $value_floor;\n    $value_ceil_diff = $value_ceil\
    \ - $value;\n    if ($value_floor_diff == $value_ceil_diff) {\n        return\
    \ $value_ceil;\n    } elseif ($value_floor_diff < $value_ceil_diff) {\n      \
    \  return $value_floor;\n    } else {\n        return $value_ceil;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghc48pl6.php:35\n\
    Stack trace:\n#0 /tmp/tmpghc48pl6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpghc48pl6.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9laf2sz.php:31\n\
    Stack trace:\n#0 /tmp/tmpe9laf2sz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe9laf2sz.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value < 0 ? $floor : $ceil;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpror2_5ze.php:32\n\
    Stack trace:\n#0 /tmp/tmpror2_5ze.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpror2_5ze.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\n\
    echo closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft3f92wg.php:27\n\
    Stack trace:\n#0 /tmp/tmpft3f92wg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpft3f92wg.php\
    \ on line 27\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx73e8ibb.php:29\n\
    Stack trace:\n#0 /tmp/tmpx73e8ibb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpx73e8ibb.php\
    \ on line 29\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19m3phus.php:29\n\
    Stack trace:\n#0 /tmp/tmp19m3phus.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp19m3phus.php\
    \ on line 29\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscpbj3rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpscpbj3rx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpscpbj3rx.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop3e5ccv.php:35\n\
    Stack trace:\n#0 /tmp/tmpop3e5ccv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpop3e5ccv.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } else {\n \
    \       return $ceil;\n    }\n}\necho closest_integer(\"10\") . \"\\n\";\necho\
    \ closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzx671yd.php:36\n\
    Stack trace:\n#0 /tmp/tmprzx671yd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprzx671yd.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $int = (int)$value;\n    $dec = $value - $int;\n    if ($dec\
    \ >= 0.5) {\n        return $int + 1;\n    } else {\n        return $int;\n  \
    \  }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp183eoyrj.php:36\n\
    Stack trace:\n#0 /tmp/tmp183eoyrj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp183eoyrj.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6oyvir_y.php:35\n\
    Stack trace:\n#0 /tmp/tmp6oyvir_y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6oyvir_y.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $int = intval($value);\n  $dec = $value - $int;\n  if ($dec >= 0.5) {\n   \
    \ return $int + 1;\n  } else {\n    return $int;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f658kdr.php:33\n\
    Stack trace:\n#0 /tmp/tmp4f658kdr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4f658kdr.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgylw7fev.php:33\n\
    Stack trace:\n#0 /tmp/tmpgylw7fev.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgylw7fev.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b9eb1as.php:24\n\
    Stack trace:\n#0 /tmp/tmp_b9eb1as.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_b9eb1as.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigq2g6ae.php:31\n\
    Stack trace:\n#0 /tmp/tmpigq2g6ae.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpigq2g6ae.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ulpcs7g.php:25\n\
    Stack trace:\n#0 /tmp/tmp2ulpcs7g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2ulpcs7g.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value_abs = abs($value);\n    $floor = floor($value_abs);\n\
    \    $ceil = ceil($value_abs);\n    $diff_floor = $value_abs - $floor;\n    $diff_ceil\
    \ = $ceil - $value_abs;\n    if ($diff_floor < $diff_ceil) {\n        return $value\
    \ < 0 ? -$floor : $floor;\n    } else {\n        return $value < 0 ? -$ceil :\
    \ $ceil;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwnuxcws.php:33\n\
    Stack trace:\n#0 /tmp/tmpvwnuxcws.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvwnuxcws.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ulpcs7g.php:25\n\
    Stack trace:\n#0 /tmp/tmp2ulpcs7g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2ulpcs7g.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss9waoyf.php:30\n\
    Stack trace:\n#0 /tmp/tmpss9waoyf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpss9waoyf.php\
    \ on line 30\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use print\n\
    \  // Example:\n  // print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wakdgzd.php:26\n\
    Stack trace:\n#0 /tmp/tmp3wakdgzd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3wakdgzd.php\
    \ on line 26\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value_floor = floor($value);\n    $value_ceil = ceil($value);\n\
    \    if ($value - $value_floor >= 0.5) {\n        return $value_ceil;\n    } else\
    \ {\n        return $value_floor;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevf9jwrr.php:31\n\
    Stack trace:\n#0 /tmp/tmpevf9jwrr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpevf9jwrr.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjlyttr61.php:35\n\
    Stack trace:\n#0 /tmp/tmpjlyttr61.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjlyttr61.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = floatval($value);\n\
    \    if ($num < 0) {\n        $num = ceil($num);\n    } else {\n        $num =\
    \ floor($num);\n    }\n    return $num;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrqtuhhe.php:30\n\
    Stack trace:\n#0 /tmp/tmpkrqtuhhe.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkrqtuhhe.php\
    \ on line 30\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"\
    15.3\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdj_h0jg.php:28\n\
    Stack trace:\n#0 /tmp/tmptdj_h0jg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptdj_h0jg.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value < 0 ? $floor : $ceil;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirj2htds.php:32\n\
    Stack trace:\n#0 /tmp/tmpirj2htds.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpirj2htds.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jym0y_1.php:31\n\
    Stack trace:\n#0 /tmp/tmp7jym0y_1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7jym0y_1.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjbu3x_6.php:36\n\
    Stack trace:\n#0 /tmp/tmpxjbu3x_6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxjbu3x_6.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value_int = (int)$value;\n    if ($value_int == $value)\
    \ {\n        return $value_int;\n    }\n    if ($value < 0) {\n        return\
    \ $value_int - 1;\n    }\n    return $value_int + 1;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzcxi2w4.php:34\n\
    Stack trace:\n#0 /tmp/tmpgzcxi2w4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgzcxi2w4.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylipab1k.php:32\n\
    Stack trace:\n#0 /tmp/tmpylipab1k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpylipab1k.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3a6s0yx.php:29\n\
    Stack trace:\n#0 /tmp/tmpe3a6s0yx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe3a6s0yx.php\
    \ on line 29\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $decimal = $value - (int)$value;\n  if ($decimal >= 0.5) {\n    return (int)$value\
    \ + 1;\n  } else {\n    return (int)$value;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcem7b7n.php:32\n\
    Stack trace:\n#0 /tmp/tmptcem7b7n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptcem7b7n.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscpbj3rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpscpbj3rx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpscpbj3rx.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $int = (int)$value;\n  $dec = $value - $int;\n  if ($dec >= 0.5) {\n    return\
    \ $int + 1;\n  } else {\n    return $int;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7gzn3rg.php:33\n\
    Stack trace:\n#0 /tmp/tmpw7gzn3rg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw7gzn3rg.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4iq7n9e.php:28\n\
    Stack trace:\n#0 /tmp/tmpt4iq7n9e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt4iq7n9e.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeu6urfr5.php:31\n\
    Stack trace:\n#0 /tmp/tmpeu6urfr5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpeu6urfr5.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else {\n\
    \        return $floor;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4_9gtpb.php:31\n\
    Stack trace:\n#0 /tmp/tmpo4_9gtpb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo4_9gtpb.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  if ($value < 0) {\n    return ceil($value);\n  } else {\n    return floor($value);\n\
    \  }\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxemdoe42.php:34\n\
    Stack trace:\n#0 /tmp/tmpxemdoe42.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxemdoe42.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgylw7fev.php:33\n\
    Stack trace:\n#0 /tmp/tmpgylw7fev.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgylw7fev.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscpbj3rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpscpbj3rx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpscpbj3rx.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tmtfien.php:32\n\
    Stack trace:\n#0 /tmp/tmp1tmtfien.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1tmtfien.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = intval($value);\n\
    \  $float = floatval($value);\n  if ($float - $int > 0.5) {\n    return $int +\
    \ 1;\n  } else {\n    return $int;\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50tde_m8.php:31\n\
    Stack trace:\n#0 /tmp/tmp50tde_m8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp50tde_m8.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9laf2sz.php:31\n\
    Stack trace:\n#0 /tmp/tmpe9laf2sz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe9laf2sz.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  $diff_ceil = $ceil - $value;\n\
    \  $diff_floor = $value - $floor;\n  if ($diff_ceil == $diff_floor) {\n    return\
    \ $ceil;\n  } else if ($diff_ceil < $diff_floor) {\n    return $ceil;\n  } else\
    \ {\n    return $floor;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9ziwmi4.php:35\n\
    Stack trace:\n#0 /tmp/tmpe9ziwmi4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe9ziwmi4.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $int = intval($value);\n    $diff = $value - $int;\n\
    \    if ($diff > 0.5) {\n        return $int + 1;\n    } elseif ($diff < -0.5)\
    \ {\n        return $int - 1;\n    } else {\n        return $int;\n    }\n}\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfmxtkkg.php:33\n\
    Stack trace:\n#0 /tmp/tmpcfmxtkkg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcfmxtkkg.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value_int = intval($value);\n    $value_decimal = $value\
    \ - $value_int;\n    if ($value_decimal >= 0.5) {\n        return $value_int +\
    \ 1;\n    } else {\n        return $value_int;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7c81yj8.php:32\n\
    Stack trace:\n#0 /tmp/tmpr7c81yj8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpr7c81yj8.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0ezfclv.php:24\n\
    Stack trace:\n#0 /tmp/tmps0ezfclv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps0ezfclv.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } else {\n \
    \       return $ceil;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a3u2ekj.php:33\n\
    Stack trace:\n#0 /tmp/tmp2a3u2ekj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2a3u2ekj.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value_int = intval($value);\n    if ($value - $value_int\
    \ >= 0.5) {\n        return $value_int + 1;\n    } else {\n        return $value_int;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlwu6nqx.php:32\n\
    Stack trace:\n#0 /tmp/tmpdlwu6nqx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdlwu6nqx.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgvip6q2.php:30\n\
    Stack trace:\n#0 /tmp/tmptgvip6q2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptgvip6q2.php\
    \ on line 30\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $int = (int)$value;\n    $decimal = $value - $int;\n   \
    \ if ($decimal >= 0.5) {\n        return $int + 1;\n    } else {\n        return\
    \ $int;\n    }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29l2nzov.php:36\n\
    Stack trace:\n#0 /tmp/tmp29l2nzov.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp29l2nzov.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gg9p2j7.php:34\n\
    Stack trace:\n#0 /tmp/tmp8gg9p2j7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8gg9p2j7.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0ezfclv.php:24\n\
    Stack trace:\n#0 /tmp/tmps0ezfclv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps0ezfclv.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkokmcifw.php:26\n\
    Stack trace:\n#0 /tmp/tmpkokmcifw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkokmcifw.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybfhthr9.php:30\n\
    Stack trace:\n#0 /tmp/tmpybfhthr9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpybfhthr9.php\
    \ on line 30\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r702p7h.php:31\n\
    Stack trace:\n#0 /tmp/tmp1r702p7h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1r702p7h.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\necho\
    \ closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"15.3\");\necho\
    \ \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppso923o0.php:33\n\
    Stack trace:\n#0 /tmp/tmppso923o0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppso923o0.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $floor = floor($num);\n  $ceil = ceil($num);\n  $diff_floor = abs($num - $floor);\n\
    \  $diff_ceil = abs($num - $ceil);\n  if ($diff_floor < $diff_ceil) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsw3_95jo.php:37\n\
    Stack trace:\n#0 /tmp/tmpsw3_95jo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsw3_95jo.php\
    \ on line 37\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"10\")\
    \ . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscpbj3rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpscpbj3rx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpscpbj3rx.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkokmcifw.php:26\n\
    Stack trace:\n#0 /tmp/tmpkokmcifw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkokmcifw.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpniea0u.php:31\n\
    Stack trace:\n#0 /tmp/tmpwpniea0u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwpniea0u.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $int = intval($value);\n    $dec = $value - $int;\n \
    \   if ($dec >= 0.5) {\n        return $int + 1;\n    } else {\n        return\
    \ $int;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyipi9x43.php:33\n\
    Stack trace:\n#0 /tmp/tmpyipi9x43.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyipi9x43.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $floor;\n    }\n    return\
    \ $diff_floor < $diff_ceil ? $floor : $ceil;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pcd2jlq.php:31\n\
    Stack trace:\n#0 /tmp/tmp8pcd2jlq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8pcd2jlq.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdsc0vwy.php:31\n\
    Stack trace:\n#0 /tmp/tmpjdsc0vwy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjdsc0vwy.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9laf2sz.php:31\n\
    Stack trace:\n#0 /tmp/tmpe9laf2sz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe9laf2sz.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value_int = (int)$value;\n    $value_dec = $value - $value_int;\n\
    \    if ($value_dec >= 0.5) {\n        return $value_int + 1;\n    } else {\n\
    \        return $value_int;\n    }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3_549q2.php:36\n\
    Stack trace:\n#0 /tmp/tmpq3_549q2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpq3_549q2.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgylw7fev.php:33\n\
    Stack trace:\n#0 /tmp/tmpgylw7fev.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgylw7fev.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } else {\n \
    \       return $ceil;\n    }\n}\necho closest_integer(\"10\") . \"\\n\";\necho\
    \ closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_5mdhkz.php:36\n\
    Stack trace:\n#0 /tmp/tmpj_5mdhkz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpj_5mdhkz.php\
    \ on line 36\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    return round($value);\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucp962zr.php:24\n\
    Stack trace:\n#0 /tmp/tmpucp962zr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpucp962zr.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b9eb1as.php:24\n\
    Stack trace:\n#0 /tmp/tmp_b9eb1as.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_b9eb1as.php\
    \ on line 24\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndqjl17u.php:35\n\
    Stack trace:\n#0 /tmp/tmpndqjl17u.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpndqjl17u.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } else {\n \
    \       return $ceil;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpse1wrt3u.php:32\n\
    Stack trace:\n#0 /tmp/tmpse1wrt3u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpse1wrt3u.php\
    \ on line 32\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\necho closest_integer(\"10\") . \"\\n\";\n\
    echo closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\
    \\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexc_okwo.php:34\n\
    Stack trace:\n#0 /tmp/tmpexc_okwo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpexc_okwo.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphct6tr04.php:25\n\
    Stack trace:\n#0 /tmp/tmphct6tr04.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphct6tr04.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5nt0qlp.php:25\n\
    Stack trace:\n#0 /tmp/tmp_5nt0qlp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_5nt0qlp.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_hldifc.php:31\n\
    Stack trace:\n#0 /tmp/tmpq_hldifc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpq_hldifc.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ulpcs7g.php:25\n\
    Stack trace:\n#0 /tmp/tmp2ulpcs7g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2ulpcs7g.php\
    \ on line 25\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnire0va.php:34\n\
    Stack trace:\n#0 /tmp/tmptnire0va.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptnire0va.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mmtshr2.php:28\n\
    Stack trace:\n#0 /tmp/tmp0mmtshr2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0mmtshr2.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuc7vvuv.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuc7vvuv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuc7vvuv.php\
    \ on line 29\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzrlolcu.php:31\n\
    Stack trace:\n#0 /tmp/tmppzrlolcu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppzrlolcu.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $decimal = $value - floor($value);\n    if ($decimal < 0.5)\
    \ {\n        return floor($value);\n    } else {\n        return ceil($value);\n\
    \    }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnj0thuj.php:33\n\
    Stack trace:\n#0 /tmp/tmpbnj0thuj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbnj0thuj.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkokmcifw.php:26\n\
    Stack trace:\n#0 /tmp/tmpkokmcifw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkokmcifw.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpniea0u.php:31\n\
    Stack trace:\n#0 /tmp/tmpwpniea0u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwpniea0u.php\
    \ on line 31\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3gk1y28.php:26\n\
    Stack trace:\n#0 /tmp/tmpd3gk1y28.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd3gk1y28.php\
    \ on line 26\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor >= 0.5) {\n        return $ceil;\n    } else {\n       \
    \ return $floor;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqdc02ug.php:30\n\
    Stack trace:\n#0 /tmp/tmpgqdc02ug.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgqdc02ug.php\
    \ on line 30\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uxkm0bg.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uxkm0bg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uxkm0bg.php\
    \ on line 25\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9v2qctg.php:34\n\
    Stack trace:\n#0 /tmp/tmpq9v2qctg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpq9v2qctg.php\
    \ on line 34\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value_int = (int)$value;\n    if ($value - $value_int >=\
    \ 0.5) {\n        return $value_int + 1;\n    } else {\n        return $value_int;\n\
    \    }\n}\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\"\
    ) . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpzt1vch.php:35\n\
    Stack trace:\n#0 /tmp/tmpmpzt1vch.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmpzt1vch.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  if ($value < 0) {\n    $value = ceil($value);\n  } else {\n    $value = floor($value);\n\
    \  }\n  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6bpyqih.php:33\n\
    Stack trace:\n#0 /tmp/tmpq6bpyqih.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq6bpyqih.php\
    \ on line 33\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9i906n6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt9i906n6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt9i906n6.php\
    \ on line 28\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho\
    \ closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\"\
    ;\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndqjl17u.php:35\n\
    Stack trace:\n#0 /tmp/tmpndqjl17u.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpndqjl17u.php\
    \ on line 35\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5np927hs.php:27\n\
    Stack trace:\n#0 /tmp/tmp5np927hs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5np927hs.php\
    \ on line 27\n"
  timestamp: 1659805223
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r702p7h.php:31\n\
    Stack trace:\n#0 /tmp/tmp1r702p7h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1r702p7h.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f64nyk.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4f64nyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr4f64nyk.php\
    \ on line 23\n"
  timestamp: 1659805223
