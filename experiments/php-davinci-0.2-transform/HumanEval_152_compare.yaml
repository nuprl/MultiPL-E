name: HumanEval_152_compare
language: php
prompt: "<?php\n// I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1,\
  \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>>\
  \ compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1,\
  \ 0, 0, 6)\nfunction compare($game, $guess) {\n"
tests: "function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2,\
  \ -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
  \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = [];\n  for ($i = 0; $i < count($game); $i++) {\n    $result[]\
    \ = abs($game[$i] - $guess[$i]);\n  }\n  return $result;\n}\n", "    $result =\
    \ [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $result;\n}\n", "    $result = [];\n    for\
    \ ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $result[] = 0;\n\
    \        } else {\n            $result[] = abs($game[$i] - $guess[$i]);\n    \
    \    }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0;\
    \ $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $result[] = 0;\n\
    \        } else {\n            $result[] = abs($game[$i] - $guess[$i]);\n    \
    \    }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0;\
    \ $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n       \
    \     $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n", "\t$result = array();\n\
    \tfor ($i = 0; $i < count($game); $i++) {\n\t\tif ($game[$i] == $guess[$i]) {\n\
    \t\t\t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "    $result = [];\n    for ($i = 0; $i <\
    \ count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $result[]\
    \ = 0;\n        } else {\n            $result[] = abs($game[$i] - $guess[$i]);\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i\
    \ = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n  \
    \          $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n", "  $result = [];\n\
    \  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n\
    \      $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i\
    \ < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}\n", "\t$result = array();\n\tforeach ($game as\
    \ $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t}\n\treturn\
    \ $result;\n}\n\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4,\
    \ 2, -2);\n\necho '<pre>';\nprint_r(compare($game, $guess));\necho '</pre>';\n",
  "    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i]\
    \ == $guess[$i]) {\n            $result[] = 0;\n        } else {\n           \
    \ $result[] = abs($game[$i] - $guess[$i]);\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n      \
    \  $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
  "\t$result = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$result[$i]\
    \ = abs($game[$i] - $guess[$i]);\n\t}\n\treturn $result;\n}\n", "    $result =\
    \ [];\n    for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n", "  $result = [];\n\
    \  for ($i = 0; $i < count($game); $i++) {\n    $result[] = abs($game[$i] - $guess[$i]);\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
