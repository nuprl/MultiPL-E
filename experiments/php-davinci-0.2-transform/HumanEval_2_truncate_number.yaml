name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $decimal_position = strpos($number, '.');\n    if ($decimal_position ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $decimal_position);\n\
    }\n", "  return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return (float) '0.' . $number[1];\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  $number = (string)$number;\n\
    \  $pos = strpos($number, '.');\n  if ($pos === false) {\n    return 0;\n  }\n\
    \  return substr($number, $pos);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    // your code here\n}\n",
  "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "  // your code here\n}\n", "    $number = (float)$number;\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n", "  $number = (float)$number;\n\
    \  $number = $number - (int)$number;\n  return $number;\n}\n", "    return $number\
    \ - floor($number);\n}\n", "    return $number - floor($number);\n}\n", "    $integer\
    \ = (int) $number;\n    return $number - $integer;\n}\n", "    // Your code here\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    // your code here\n}\n", "    return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "    $number = (float)$number;\n  \
    \  $number = $number - (int)$number;\n    return $number;\n}\n", "  return $number\
    \ - floor($number);\n}\n", "    return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "  return $number - floor($number);\n}\n", "  // your code here\n}\n", "    return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "    // your code here\n}\n", "   \
    \ return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "  return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    // your code here\n}\n",
  "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  // your code here\n}\n",
  "    return $number - floor($number);\n}\n", "    // your code here\n}\n", "   \
    \ return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    $number = (float)$number;\n    $number = $number - floor($number);\n\
    \    return $number;\n}\n", "  return $number - floor($number);\n}\n", "    return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "    // your code here\n}\n", "  return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    // your code here\n}\n", "    return $number\
    \ - floor($number);\n}\n", "  return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "  // your code here\n}\n", "    // your code here\n}\n", "  // your code here\n\
    }\n", "    $number_parts = explode('.', $number);\n    return '0.' . $number_parts[1];\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    $number = (float)$number;\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n", "  // your code here\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $decimal_point_position = strpos($number, '.');\n    if ($decimal_point_position\
    \ === false) {\n        return 0;\n    }\n    $decimal_part = substr($number,\
    \ $decimal_point_position + 1);\n    return (float)$decimal_part / pow(10, strlen($decimal_part));\n\
    }\n", "  return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    $number_parts = explode('.', $number);\n    return '0.' . $number_parts[1];\n\
    }\n", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "  return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    // your code here\n}\n", "    return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    $number = (float)$number;\n    $number = $number - (int)$number;\n\
    \    return $number;\n}\n", "    return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "  $number = $number - floor($number);\n  return\
    \ $number;\n}\n", "  return $number - floor($number);\n}\n", "    return $number\
    \ - floor($number);\n}\n", "  $integer_part = floor($number);\n  $decimal_part\
    \ = $number - $integer_part;\n  return $decimal_part;\n}\n", "    return $number\
    \ - floor($number);\n}\n", "  return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    // your code here\n}\n", "    return $number\
    \ - floor($number);\n}\n", "    return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "  // your code here\n}\n", "  return\
    \ $number - floor($number);\n}\n", "  return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    // your code here\n}\n", "    // your code here\n}\n", "    return\
    \ $number - floor($number);\n}\n", "  return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "    $number = (float)$number;\n  \
    \  $number = $number - floor($number);\n    return $number;\n}\n", "  return $number\
    \ - floor($number);\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number_parts = explode('.',\
    \ $number);\n    return '0.' . $number_parts[1];\n}\n", "    return $number -\
    \ floor($number);\n}\n", "    return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "  return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  // your code here\n}\n", "    return $number - floor($number);\n}\n",
  "    $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "    // your code here\n}\n", "    $number = $number\
    \ - floor($number);\n    return $number;\n}\n", "    return $number - floor($number);\n\
    }\n", "    $number = (float)$number;\n    $number = $number - (int)$number;\n\
    \    return $number;\n}\n", "  return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    // your code here\n}\n",
  "    $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "    // your code here\n}\n", "  return $number -\
    \ floor($number);\n}\n", "  return $number - floor($number);\n}\n", "    $number\
    \ = (float)$number;\n    $number = $number - floor($number);\n    return $number;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
