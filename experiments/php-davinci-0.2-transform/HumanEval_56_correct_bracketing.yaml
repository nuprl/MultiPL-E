name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    $brackets\
    \ = str_split($brackets);\n    $count = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '<') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n", "    $open = 0;\n \
    \   for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"<\") {\n            $open++;\n        } else {\n            $open--;\n   \
    \     }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n", "  $stack = [];\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    $char = $brackets[$i];\n    if ($char == '<') {\n      array_push($stack,\
    \ $char);\n    } else {\n      if (count($stack) == 0) {\n        return false;\n\
    \      }\n      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n\
    }\n", "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '<') {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n", " \
    \   $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == '<') {\n            array_push($stack, '<');\n        } else\
    \ {\n            if (count($stack) == 0) {\n                return false;\n  \
    \          }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $bracket_count++;\n\
    \        } else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n", "    $brackets_array = str_split($brackets);\n    $brackets_count =\
    \ count($brackets_array);\n    $brackets_stack = array();\n    for ($i = 0; $i\
    \ < $brackets_count; $i++) {\n        if ($brackets_array[$i] == \"<\") {\n  \
    \          array_push($brackets_stack, $brackets_array[$i]);\n        } else {\n\
    \            if (count($brackets_stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($brackets_stack);\n         \
    \   }\n        }\n    }\n    if (count($brackets_stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    $stack = [];\n\
    \    $len = strlen($brackets);\n    for ($i = 0; $i < $len; $i++) {\n        $char\
    \ = $brackets[$i];\n        if ($char == '<') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "\t$open = 0;\n\t$close = 0;\n\
    \tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\"\
    ) {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n", "  $stack = [];\n  for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n    $char = $brackets[$i];\n    if ($char == '<')\
    \ {\n      array_push($stack, $char);\n    } else {\n      if (count($stack) ==\
    \ 0) {\n        return false;\n      }\n      array_pop($stack);\n    }\n  }\n\
    \  return count($stack) == 0;\n}\n", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n", " \
    \   $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char\
    \ = $brackets[$i];\n        if ($char == '<') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $bracket_count = 0;\n \
    \   for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"<\") {\n            $bracket_count++;\n        } else {\n            $bracket_count--;\n\
    \        }\n        if ($bracket_count < 0) {\n            return false;\n   \
    \     }\n    }\n    return $bracket_count == 0;\n}\n", "    $stack = new SplStack();\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ '<') {\n            $stack->push('<');\n        } else {\n            if ($stack->isEmpty())\
    \ {\n                return false;\n            }\n            $stack->pop();\n\
    \        }\n    }\n    return $stack->isEmpty();\n}\n", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n", "  $bracket_count = 0;\n  for ($i = 0; $i\
    \ < strlen($brackets); $i++) {\n    if ($brackets[$i] == \"<\") {\n      $bracket_count++;\n\
    \    } else {\n      $bracket_count--;\n    }\n    if ($bracket_count < 0) {\n\
    \      return false;\n    }\n  }\n  return $bracket_count == 0;\n}\n", "    $stack\
    \ = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == '<') {\n            $stack->push('<');\n        } else\
    \ {\n            if ($stack->isEmpty()) {\n                return false;\n   \
    \         }\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n\
    }\n", "    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '<') {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
