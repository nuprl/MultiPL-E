name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n \
    \ }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n\
    \    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $num) {\n    if ($num < 0) {\n      $zeros[] = $num;\n    } else {\n\
    \      $ones[] = $num;\n    }\n  }\n  usort($ones, function($a, $b) {\n    $a_ones\
    \ = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b), '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a - $b;\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  sort($zeros);\n  return array_merge($ones, $zeros);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    return [$num, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($item) {\n    return $item[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count === 0) {\n      $zeros[] = $value;\n    } else {\n   \
    \   $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n\
    \  foreach ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}\n", "  $arr = array_map(function($i) {\n    return [$i,\
    \ decbin($i)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($i) {\n    return $i[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return\
    \ [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "    $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1],\
    \ '1');\n        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    }\n\n$arr = array(1, 5, 2, 3, 4);\nprint_r(sort_array($arr));\n\n$arr = array(-2,\
    \ -3, -4, -5, -6);\nprint_r(sort_array($arr));\n\n$arr = array(1, 0, 2, 3, 4);\n\
    print_r(sort_array($arr));", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $num) {\n    $binary = decbin($num);\n    $count = substr_count($binary, '1');\n\
    \    if ($count == 0) {\n      $zeros[] = $num;\n    } else {\n      $ones[$count][]\
    \ = $num;\n    }\n  }\n  ksort($ones);\n  $sorted = [];\n  foreach ($ones as $key\
    \ => $value) {\n    sort($value);\n    $sorted = array_merge($sorted, $value);\n\
    \  }\n  sort($zeros);\n  return array_merge($sorted, $zeros);\n}\n\n$arr = [1,\
    \ 5, 2, 3, 4];\nprint_r(sort_array($arr));\n\n$arr = [-2, -3, -4, -5, -6];\nprint_r(sort_array($arr));\n\
    \n$arr = [1, 0, 2, 3, 4];\nprint_r(sort_array($arr));", "  $arr = array_map(function($x)\
    \ {\n    $ones = substr_count(decbin($x), '1');\n    return [$x, $ones];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n  \
    \  $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b)) {\n     \
    \ return $a < $b ? -1 : 1;\n    }\n    return strlen($a) < strlen($b) ? -1 : 1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
