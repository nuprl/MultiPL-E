name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n \
    \ }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n\
    \    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $num) {\n    if ($num < 0) {\n      $zeros[] = $num;\n    } else {\n\
    \      $ones[] = $num;\n    }\n  }\n  usort($ones, function($a, $b) {\n    $a_ones\
    \ = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b), '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a - $b;\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  sort($zeros);\n  return array_merge($ones, $zeros);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    return [$num, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($item) {\n    return $item[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count === 0) {\n      $zeros[] = $value;\n    } else {\n   \
    \   $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n\
    \  foreach ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}\n", "  $arr = array_map(function($i) {\n    return [$i,\
    \ decbin($i)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($i) {\n    return $i[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return\
    \ [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "    $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1],\
    \ '1');\n        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    }\n\n$arr = array(1, 5, 2, 3, 4);\nprint_r(sort_array($arr));\n\n$arr = array(-2,\
    \ -3, -4, -5, -6);\nprint_r(sort_array($arr));\n\n$arr = array(1, 0, 2, 3, 4);\n\
    print_r(sort_array($arr));", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $num) {\n    $binary = decbin($num);\n    $count = substr_count($binary, '1');\n\
    \    if ($count == 0) {\n      $zeros[] = $num;\n    } else {\n      $ones[$count][]\
    \ = $num;\n    }\n  }\n  ksort($ones);\n  $sorted = [];\n  foreach ($ones as $key\
    \ => $value) {\n    sort($value);\n    $sorted = array_merge($sorted, $value);\n\
    \  }\n  sort($zeros);\n  return array_merge($sorted, $zeros);\n}\n\n$arr = [1,\
    \ 5, 2, 3, 4];\nprint_r(sort_array($arr));\n\n$arr = [-2, -3, -4, -5, -6];\nprint_r(sort_array($arr));\n\
    \n$arr = [1, 0, 2, 3, 4];\nprint_r(sort_array($arr));", "  $arr = array_map(function($x)\
    \ {\n    $ones = substr_count(decbin($x), '1');\n    return [$x, $ones];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n  \
    \  $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b)) {\n     \
    \ return $a < $b ? -1 : 1;\n    }\n    return strlen($a) < strlen($b) ? -1 : 1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n   \
    \ return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1]\
    \ === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr_ones\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  $zeros = [];\n  foreach ($arr as $number) {\n    $binary = decbin($number);\n\
    \    $count = substr_count($binary, '1');\n    if ($count > 0) {\n      $ones[$number]\
    \ = $count;\n    } else {\n      $zeros[] = $number;\n    }\n  }\n  asort($ones);\n\
    \  return array_merge(array_keys($ones), $zeros);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [decbin($n), $n];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[0];\n    $b = $b[0];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if ($a[1]\
    \ == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[1];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "    $arr\
    \ = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a = $a[1];\n        $b = $b[1];\n\
    \        $a = str_replace('0', '', $a);\n        $b = str_replace('0', '', $b);\n\
    \        if (strlen($a) == strlen($b)) {\n            return $a > $b ? 1 : -1;\n\
    \        }\n        return strlen($a) > strlen($b) ? 1 : -1;\n    });\n    return\
    \ array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n   \
    \ return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    return\
    \ $a[1] == $b[1] ? $a[0] - $b[0] : $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $num) {\n    $binary = decbin($num);\n    if (substr_count($binary,\
    \ '1') > 0) {\n      $ones[$num] = substr_count($binary, '1');\n    } else {\n\
    \      $zeros[] = $num;\n    }\n  }\n  asort($ones);\n  $result = array_merge(array_keys($ones),\
    \ $zeros);\n  return $result;\n}\n", "    $arr = array_map(function($n) {\n  \
    \      return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b)\
    \ {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n  return $arr;\n}\n", "  $ones = [];\n  $zeros\
    \ = [];\n  foreach ($arr as $num) {\n    $binary = decbin($num);\n    $count =\
    \ substr_count($binary, '1');\n    if ($count > 0) {\n      $ones[$count][] =\
    \ $num;\n    } else {\n      $zeros[] = $num;\n    }\n  }\n  ksort($ones);\n \
    \ $result = [];\n  foreach ($ones as $count => $nums) {\n    sort($nums);\n  \
    \  $result = array_merge($result, $nums);\n  }\n  sort($zeros);\n  $result = array_merge($result,\
    \ $zeros);\n  return $result;\n}\n", "  $arr = array_map(function($i) {\n    return\
    \ [$i, decbin($i)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($i) {\n    return $i[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    return $a[1] == $b[1] ? $a[0] - $b[0] : $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n\
    }\n", "    $ones = [];\n    $zeros = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $binary = decbin($value);\n        $count = substr_count($binary,\
    \ '1');\n        if ($count > 0) {\n            $ones[$key] = $value;\n      \
    \  } else {\n            $zeros[$key] = $value;\n        }\n    }\n    asort($ones);\n\
    \    asort($zeros);\n    return array_merge($zeros, $ones);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n    return $a[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = str_split($a[1]);\n \
    \   $b = str_split($b[1]);\n    $a = array_reduce($a, function($c, $v) {\n   \
    \   return $c + (int)$v;\n    }, 0);\n    $b = array_reduce($b, function($c, $v)\
    \ {\n      return $c + (int)$v;\n    }, 0);\n    if ($a === $b) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value < 0) {\n      $zeros[] = $value;\n\
    \    } else {\n      $ones[] = $value;\n    }\n  }\n  $ones = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $ones);\n  usort($ones, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  $ones = array_map(function($n) {\n   \
    \ return $n[0];\n  }, $ones);\n  return array_merge($ones, $zeros);\n}\n", " \
    \ $arr = array_map(function($el) {\n    return [$el, decbin($el)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($el) {\n    return $el[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a_ones = substr_count($a, '1');\n    $b_ones\
    \ = substr_count($b, '1');\n    if ($a_ones == $b_ones) {\n      return $a < $b\
    \ ? -1 : 1;\n    }\n    return $a_ones < $b_ones ? -1 : 1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a1 = substr_count($a[1], '1');\n        $b1 = substr_count($b[1], '1');\n\
    \        if ($a1 == $b1) {\n            return $a[0] - $b[0];\n        }\n   \
    \     return $a1 - $b1;\n    });\n    return array_map(function($n) {\n      \
    \  return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  $ones = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    $ones = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2,\
    \ 3, 4])) . \"\\n\";\necho implode(', ', sort_array([-2, -3, -4, -5, -6])) . \"\
    \\n\";\necho implode(', ', sort_array([1, 0, 2, 3, 4])) . \"\\n\";", "  $arr =\
    \ array_map(function($n) {\n    return [decbin($n), $n];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[0];\n    $b = $b[0];\n    $a = str_replace('0',\
    \ '', $a);\n    $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b))\
    \ {\n      return $a[0] - $b[0];\n    }\n    return strlen($a) - strlen($b);\n\
    \  });\n  return array_map(function($n) {\n    return $n[1];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = substr_count($a, '1');\n    $b = substr_count($b, '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if ($a[1]\
    \ == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $num) {\n  \
    \  $binary = decbin($num);\n    $count = substr_count($binary, '1');\n    if ($count\
    \ > 0) {\n      $ones[$count][] = $num;\n    } else {\n      $zeros[] = $num;\n\
    \    }\n  }\n  ksort($ones);\n  foreach ($ones as $key => $value) {\n    sort($ones[$key]);\n\
    \  }\n  $ones = array_merge(...$ones);\n  sort($zeros);\n  return array_merge($zeros,\
    \ $ones);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n   \
    \ return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1]\
    \ == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($num) {\n    return [$num,\
    \ decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones =\
    \ substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones\
    \ == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n\
    \  });\n  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $sorted\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $sorted[$key] = decbin($value);\n\
    \  }\n  asort($sorted);\n  foreach ($sorted as $key => $value) {\n    $sorted[$key]\
    \ = bindec($value);\n  }\n  return $sorted;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if (substr_count($a[1], '1') == substr_count($b[1], '1')) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return substr_count($a[1], '1') - substr_count($b[1],\
    \ '1');\n  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($a) {\n    return [$a, decbin($a)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) return $a[0] - $b[0];\n   \
    \ return $a1 - $b1;\n  });\n  return array_map(function($a) {\n    return $a[0];\n\
    \  }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])), \"\\n\";\n\
    echo implode(', ', sort_array([-2, -3, -4, -5, -6])), \"\\n\";\necho implode(',\
    \ ', sort_array([1, 0, 2, 3, 4])), \"\\n\";", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n\
    \  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n    $ones[$binary]\
    \ = $value;\n    $zeros[$binary] = $value;\n  }\n  ksort($ones);\n  krsort($zeros);\n\
    \  $result = array_merge($ones, $zeros);\n  return array_values($result);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($x) {\n    $ones = substr_count(decbin($x),\
    \ '1');\n    return [$x, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n\
    \    $count = substr_count($binary, '1');\n    if ($count == 0) {\n      $zeros[]\
    \ = $value;\n    } else {\n      $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n\
    \  $result = [];\n  foreach ($ones as $key => $value) {\n    sort($value);\n \
    \   $result = array_merge($result, $value);\n  }\n  sort($zeros);\n  $result =\
    \ array_merge($result, $zeros);\n  return $result;\n}\n", "    $arr = array_map(function($v)\
    \ {\n        return [$v, decbin($v)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = str_replace('0',\
    \ '', $a);\n        $b = str_replace('0', '', $b);\n        if (strlen($a) ==\
    \ strlen($b)) {\n            return $a - $b;\n        }\n        return strlen($a)\
    \ - strlen($b);\n    });\n    return array_map(function($v) {\n        return\
    \ $v[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr_ones\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($num) {\n    return\
    \ $num[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n  \
    \  $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b)) {\n     \
    \ return $a < $b ? -1 : 1;\n    }\n    return strlen($a) < strlen($b) ? -1 : 1;\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($a) {\n    return [$a, decbin($a)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  //\
    \ your code here\n}", "  $arr = array_map(function($num) {\n    return [$num,\
    \ decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones =\
    \ substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones\
    \ === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n\
    \  });\n  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $binary = decbin($value);\n    $ones[$key] = substr_count($binary,\
    \ '1');\n    $zeros[$key] = substr_count($binary, '0');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $zeros, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 === $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $binary = decbin($value);\n    $ones[$key] = substr_count($binary,\
    \ '1');\n    $zeros[$key] = substr_count($binary, '0');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $zeros, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n\n$arr = array(1, 5, 2,\
    \ 3, 4);\nvar_dump(sort_array($arr));\n$arr = array(-2, -3, -4, -5, -6);\nvar_dump(sort_array($arr));\n\
    $arr = array(1, 0, 2, 3, 4);\nvar_dump(sort_array($arr));", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n  \
    \  return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n   \
    \ $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n  \
    \  if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 === $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_filter($a, function($n) {\n      return $n == 1;\n    });\n  \
    \  $b = array_filter($b, function($n) {\n      return $n == 1;\n    });\n    $a\
    \ = count($a);\n    $b = count($b);\n    if ($a == $b) {\n      return $a[0] -\
    \ $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n\
    \    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr1\
    \ = [];\n  $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key]\
    \ = decbin($value);\n    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr1), SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [decbin($n), $n];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[0];\n    $b = $b[0];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[1] - $b[1];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[1];\n  }, $arr);\n  return $arr;\n}\n", "  $new_arr = [];\n\
    \  foreach ($arr as $key => $value) {\n    $new_arr[$key] = decbin($value);\n\
    \  }\n  asort($new_arr);\n  foreach ($new_arr as $key => $value) {\n    $new_arr[$key]\
    \ = bindec($value);\n  }\n  return $new_arr;\n}\n\necho sort_array([1, 5, 2, 3,\
    \ 4]);\necho sort_array([-2, -3, -4, -5, -6]);\necho sort_array([1, 0, 2, 3, 4]);",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    $ones = substr_count(decbin($num), '1');\n    return [$num, $ones];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] === $b[1]) {\n \
    \     return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])) . \"\\n\";\n\
    echo implode(', ', sort_array([-2, -3, -4, -5, -6])) . \"\\n\";\necho implode(',\
    \ ', sort_array([1, 0, 2, 3, 4])) . \"\\n\";", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = substr_count($a, '1');\n    $b = substr_count($b, '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n\
    \  $arr = array_map('strlen', $arr);\n  $arr = array_map('intval', $arr);\n  $arr\
    \ = array_flip($arr);\n  ksort($arr);\n  $arr = array_flip($arr);\n  $arr = array_map('intval',\
    \ $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($a)\
    \ {\n        return $a[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if ($a['1']\
    \ == $b['1']) {\n      return $a[0] - $b[0];\n    }\n    return $a['1'] - $b['1'];\n\
    \  });\n  $arr = array_map(function($x) {\n    return $x[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($e) {\n    return [$e, decbin($e)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0',\
    \ '', $a);\n    $b = str_replace('0', '', $b);\n    if (strlen($a) === strlen($b))\
    \ {\n      return $a - $b;\n    }\n    return strlen($a) - strlen($b);\n  });\n\
    \  return array_map(function($e) {\n    return $e[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n   \
    \ return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1]\
    \ === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "    $ones = [];\n    foreach ($arr as $key => $value) {\n        $ones[$key] =\
    \ substr_count(decbin($value), '1');\n    }\n    array_multisort($ones, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($a) {\n    return [$a, decbin($a)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($a) {\n    return\
    \ $a[0];\n  }, $arr);\n  return $arr;\n}\n\necho sort_array([1, 5, 2, 3, 4]) .\
    \ \"\\n\";\necho sort_array([-2, -3, -4, -5, -6]) . \"\\n\";\necho sort_array([1,\
    \ 0, 2, 3, 4]) . \"\\n\";", "  $result = [];\n  $ones = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n\
    \  asort($ones);\n  foreach ($ones as $key => $value) {\n    $result[] = $arr[$key];\n\
    \  }\n  return $result;\n}\n", "  $result = [];\n  $ones = [];\n  $zeros = [];\n\
    \  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n    if (substr_count($binary,\
    \ '1') > 0) {\n      $ones[$key] = substr_count($binary, '1');\n    } else {\n\
    \      $zeros[$key] = $value;\n    }\n  }\n  asort($ones);\n  foreach ($ones as\
    \ $key => $value) {\n    $result[] = $arr[$key];\n  }\n  foreach ($zeros as $key\
    \ => $value) {\n    $result[] = $value;\n  }\n  return $result;\n}\n", "    $arr\
    \ = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    }\n", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1],\
    \ '1');\n        $b_ones = substr_count($b[1], '1');\n        if ($a_ones ===\
    \ $b_ones) {\n            return $a[0] - $b[0];\n        }\n        return $a_ones\
    \ - $b_ones;\n    });\n    return array_map(function($n) {\n        return $n[0];\n\
    \    }, $arr);\n}\n", "  $arr = array_map(function($val) {\n    return [$val,\
    \ decbin($val)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones =\
    \ substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones\
    \ === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n\
    \  });\n  return array_map(function($val) {\n    return $val[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($v) {\n    return\
    \ $v[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $sorted = [];\n  foreach ($arr as $num)\
    \ {\n    $sorted[decbin($num)][] = $num;\n  }\n  ksort($sorted);\n  $result =\
    \ [];\n  foreach ($sorted as $key => $value) {\n    foreach ($value as $num) {\n\
    \      $result[] = $num;\n    }\n  }\n  return $result;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [\n      'dec' => $n,\n      'bin' => decbin($n)\n    ];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a['bin'],\
    \ '1');\n    $b_ones = substr_count($b['bin'], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a['dec'] - $b['dec'];\n    }\n    return $a_ones - $b_ones;\n\
    \  });\n  return array_map(function($n) {\n    return $n['dec'];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $aOnes = substr_count($a[1], '1');\n  \
    \  $bOnes = substr_count($b[1], '1');\n    if ($aOnes === $bOnes) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $aOnes - $bOnes;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho\
    \ implode(', ', sort_array([1, 5, 2, 3, 4])) . PHP_EOL;\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6])) . PHP_EOL;\necho implode(', ', sort_array([1, 0, 2, 3, 4]))\
    \ . PHP_EOL;", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_filter($a, function($n) {\n      return\
    \ $n === '1';\n    });\n    $b = array_filter($b, function($n) {\n      return\
    \ $n === '1';\n    });\n    $a = count($a);\n    $b = count($b);\n    if ($a ===\
    \ $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr\
    \ = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return $arr;\n\
    }\n", "  $sorted = [];\n  foreach ($arr as $num) {\n    $sorted[decbin($num)][]\
    \ = $num;\n  }\n  ksort($sorted);\n  $result = [];\n  foreach ($sorted as $key\
    \ => $value) {\n    sort($value);\n    $result = array_merge($result, $value);\n\
    \  }\n  return $result;\n}\n", "    $ones = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        $ones[$key] = substr_count(decbin($value), '1');\n    }\n\
    \    array_multisort($ones, SORT_ASC, $arr);\n    return $arr;\n}\n", "  $ones\
    \ = [];\n  foreach ($arr as $num) {\n    $ones[] = substr_count(decbin($num),\
    \ '1');\n  }\n  array_multisort($ones, $arr);\n  return $arr;\n}\n", "  $arr =\
    \ array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 =\
    \ substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1\
    \ == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $ones = substr_count($a[1], '1') - substr_count($b[1],\
    \ '1');\n    return $ones ? $ones : $a[0] - $b[0];\n  });\n  return array_column($arr,\
    \ 0);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n  \
    \  $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b)) {\n     \
    \ return $a[0] > $b[0] ? 1 : -1;\n    }\n    return strlen($a) > strlen($b) ?\
    \ 1 : -1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($x) {\n    $ones = substr_count(decbin($x),\
    \ '1');\n    return [$x, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($v) {\n    return [$v,\
    \ decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 === $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($v) {\n    return $v[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n    }\n    return $a\
    \ <=> $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones === $b_ones) {\n            return $a[0] - $b[0];\n      \
    \  }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n\
    \  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n    $ones[$key]\
    \ = substr_count($binary, '1');\n    $zeros[$key] = substr_count($binary, '0');\n\
    \  }\n  array_multisort($ones, SORT_ASC, $zeros, SORT_ASC, $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho implode(',\
    \ ', sort_array([1, 5, 2, 3, 4])) . \"\\n\";\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6])) . \"\\n\";\necho implode(', ', sort_array([1, 0, 2, 3, 4]))\
    \ . \"\\n\";", "  $result = [];\n  $ones = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  asort($ones);\n\
    \  foreach ($ones as $key => $value) {\n    $result[] = $arr[$key];\n  }\n  return\
    \ $result;\n}\n", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a1 = substr_count($a[1],\
    \ '1');\n        $b1 = substr_count($b[1], '1');\n        if ($a1 == $b1) {\n\
    \            return $a[0] - $b[0];\n        }\n        return $a1 - $b1;\n   \
    \ });\n    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    }\n\nvar_dump(sort_array([1, 5, 2, 3, 4]));\nvar_dump(sort_array([-2, -3, -4,\
    \ -5, -6]));\nvar_dump(sort_array([1, 0, 2, 3, 4]));", "  $arr = array_map(function($v)\
    \ {\n    return [$v, decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($v) {\n    return\
    \ $v[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n\
    \    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count == 0) {\n      $zeros[] = $value;\n    } else {\n    \
    \  $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n \
    \ foreach ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}\n", "  $ones = array();\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num) {\n\
    \    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($a)\
    \ {\n    return [$a, decbin($a)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n   \
    \ return $a[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a_ones = substr_count($a, '1');\n    $b_ones = substr_count($b, '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a > $b ? 1 : -1;\n    }\n    return\
    \ $a_ones > $b_ones ? 1 : -1;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key]\
    \ = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones, SORT_ASC,\
    \ $arr);\n  return $arr;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
