name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($l);\n    if ($n == 0) {\n        return null;\n   \
    \ }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1)\
    \ / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n",
  "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
