language: php
name: HumanEval_119_match_parens
results:
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oknlmpq.php:47\n\
    Stack trace:\n#0 /tmp/tmp7oknlmpq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7oknlmpq.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo_q62dt.php:51\n\
    Stack trace:\n#0 /tmp/tmpjo_q62dt.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjo_q62dt.php\
    \ on line 51\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce74qti3.php:48\n\
    Stack trace:\n#0 /tmp/tmpce74qti3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpce74qti3.php\
    \ on line 48\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02x6coyn.php:45\n\
    Stack trace:\n#0 /tmp/tmp02x6coyn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp02x6coyn.php\
    \ on line 45\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } elseif ($str1_open == 0 && $str2_open < 0)\
    \ {\n    return \"Yes\";\n  } elseif ($str1_open < 0 && $str2_open == 0) {\n \
    \   return \"Yes\";\n  } elseif ($str1_open < 0 && $str2_open < 0) {\n    if ($str1_open\
    \ + $str2_open == 0) {\n      return \"Yes\";\n    } else {\n      return \"No\"\
    ;\n    }\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvopm7h9.php:57\n\
    Stack trace:\n#0 /tmp/tmpgvopm7h9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpgvopm7h9.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    for ($i\
    \ = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n    \
    \        $left++;\n        } else {\n            $right++;\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    if ($left == $right) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscn30ryn.php:52\n\
    Stack trace:\n#0 /tmp/tmpscn30ryn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpscn30ryn.php\
    \ on line 52\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n    return \"Yes\";\n  } else if ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n    return \"No\";\n  } else\
    \ if ($str1_open != $str1_close && $str2_open == $str2_close) {\n    return \"\
    No\";\n  } else if ($str1_open != $str1_close && $str2_open != $str2_close) {\n\
    \    if ($str1_open > $str1_close) {\n      $str1_open = $str1_open - $str1_close;\n\
    \      $str2_close = $str2_close - $str2_open;\n      if ($str1_open == $str2_close)\
    \ {\n        return \"Yes\";\n      } else {\n        return \"No\";\n      }\n\
    \    } else if ($str1_open < $str1_close) {\n      $str1_close = $str1_close -\
    \ $str1_open;\n      $str2_open = $str2_open - $str2_close;\n      if ($str1_close\
    \ == $str2_open) {\n        return \"Yes\";\n      } else {\n        return \"\
    No\";\n      }\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ys1v1dt.php:65\n\
    Stack trace:\n#0 /tmp/tmp2ys1v1dt.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2ys1v1dt.php\
    \ on line 65\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        $left += substr_count($str, '(');\n        $right\
    \ += substr_count($str, ')');\n    }\n    return ($left == $right) ? 'Yes' : 'No';\n\
    }\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuuf67b5.php:40\n\
    Stack trace:\n#0 /tmp/tmpsuuf67b5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsuuf67b5.php\
    \ on line 40\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    for ($i = 0; $i < $str1_len; $i++) {\n  \
    \      if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m6lvzvk.php:47\n\
    Stack trace:\n#0 /tmp/tmp1m6lvzvk.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1m6lvzvk.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $count = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d36s8ur.php:45\n\
    Stack trace:\n#0 /tmp/tmp3d36s8ur.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3d36s8ur.php\
    \ on line 45\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n        return \"Yes\";\n    } elseif\
    \ ($s1_open == $s1_close && $s2_open != $s2_close) {\n        return \"No\";\n\
    \    } elseif ($s1_open != $s1_close && $s2_open == $s2_close) {\n        return\
    \ \"No\";\n    } elseif ($s1_open != $s1_close && $s2_open != $s2_close) {\n \
    \       if ($s1_open > $s1_close) {\n            $s1_open = $s1_open - $s1_close;\n\
    \            $s2_close = $s2_close - $s2_open;\n            if ($s1_open == $s2_close)\
    \ {\n                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($s1_open < $s1_close) {\n        \
    \    $s1_close = $s1_close - $s1_open;\n            $s2_open = $s2_open - $s2_close;\n\
    \            if ($s1_close == $s2_open) {\n                return \"Yes\";\n \
    \           } else {\n                return \"No\";\n            }\n        }\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gsdwfry.php:63\n\
    Stack trace:\n#0 /tmp/tmp1gsdwfry.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp1gsdwfry.php\
    \ on line 63\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open + $str2_open == 0) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2jgwwuj.php:68\n\
    Stack trace:\n#0 /tmp/tmph2jgwwuj.php(73): test()\n#1 {main}\n  thrown in /tmp/tmph2jgwwuj.php\
    \ on line 68\n"
  timestamp: 1659730526
