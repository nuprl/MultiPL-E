language: php
name: HumanEval_119_match_parens
results:
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oknlmpq.php:47\n\
    Stack trace:\n#0 /tmp/tmp7oknlmpq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7oknlmpq.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo_q62dt.php:51\n\
    Stack trace:\n#0 /tmp/tmpjo_q62dt.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjo_q62dt.php\
    \ on line 51\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce74qti3.php:48\n\
    Stack trace:\n#0 /tmp/tmpce74qti3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpce74qti3.php\
    \ on line 48\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02x6coyn.php:45\n\
    Stack trace:\n#0 /tmp/tmp02x6coyn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp02x6coyn.php\
    \ on line 45\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } elseif ($str1_open == 0 && $str2_open < 0)\
    \ {\n    return \"Yes\";\n  } elseif ($str1_open < 0 && $str2_open == 0) {\n \
    \   return \"Yes\";\n  } elseif ($str1_open < 0 && $str2_open < 0) {\n    if ($str1_open\
    \ + $str2_open == 0) {\n      return \"Yes\";\n    } else {\n      return \"No\"\
    ;\n    }\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvopm7h9.php:57\n\
    Stack trace:\n#0 /tmp/tmpgvopm7h9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpgvopm7h9.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    for ($i\
    \ = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n    \
    \        $left++;\n        } else {\n            $right++;\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    if ($left == $right) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscn30ryn.php:52\n\
    Stack trace:\n#0 /tmp/tmpscn30ryn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpscn30ryn.php\
    \ on line 52\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n    return \"Yes\";\n  } else if ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n    return \"No\";\n  } else\
    \ if ($str1_open != $str1_close && $str2_open == $str2_close) {\n    return \"\
    No\";\n  } else if ($str1_open != $str1_close && $str2_open != $str2_close) {\n\
    \    if ($str1_open > $str1_close) {\n      $str1_open = $str1_open - $str1_close;\n\
    \      $str2_close = $str2_close - $str2_open;\n      if ($str1_open == $str2_close)\
    \ {\n        return \"Yes\";\n      } else {\n        return \"No\";\n      }\n\
    \    } else if ($str1_open < $str1_close) {\n      $str1_close = $str1_close -\
    \ $str1_open;\n      $str2_open = $str2_open - $str2_close;\n      if ($str1_close\
    \ == $str2_open) {\n        return \"Yes\";\n      } else {\n        return \"\
    No\";\n      }\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ys1v1dt.php:65\n\
    Stack trace:\n#0 /tmp/tmp2ys1v1dt.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2ys1v1dt.php\
    \ on line 65\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        $left += substr_count($str, '(');\n        $right\
    \ += substr_count($str, ')');\n    }\n    return ($left == $right) ? 'Yes' : 'No';\n\
    }\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuuf67b5.php:40\n\
    Stack trace:\n#0 /tmp/tmpsuuf67b5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsuuf67b5.php\
    \ on line 40\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    for ($i = 0; $i < $str1_len; $i++) {\n  \
    \      if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m6lvzvk.php:47\n\
    Stack trace:\n#0 /tmp/tmp1m6lvzvk.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1m6lvzvk.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $count = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d36s8ur.php:45\n\
    Stack trace:\n#0 /tmp/tmp3d36s8ur.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3d36s8ur.php\
    \ on line 45\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n        return \"Yes\";\n    } elseif\
    \ ($s1_open == $s1_close && $s2_open != $s2_close) {\n        return \"No\";\n\
    \    } elseif ($s1_open != $s1_close && $s2_open == $s2_close) {\n        return\
    \ \"No\";\n    } elseif ($s1_open != $s1_close && $s2_open != $s2_close) {\n \
    \       if ($s1_open > $s1_close) {\n            $s1_open = $s1_open - $s1_close;\n\
    \            $s2_close = $s2_close - $s2_open;\n            if ($s1_open == $s2_close)\
    \ {\n                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($s1_open < $s1_close) {\n        \
    \    $s1_close = $s1_close - $s1_open;\n            $s2_open = $s2_open - $s2_close;\n\
    \            if ($s1_close == $s2_open) {\n                return \"Yes\";\n \
    \           } else {\n                return \"No\";\n            }\n        }\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gsdwfry.php:63\n\
    Stack trace:\n#0 /tmp/tmp1gsdwfry.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp1gsdwfry.php\
    \ on line 63\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open + $str2_open == 0) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2jgwwuj.php:68\n\
    Stack trace:\n#0 /tmp/tmph2jgwwuj.php(73): test()\n#1 {main}\n  thrown in /tmp/tmph2jgwwuj.php\
    \ on line 68\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_parens\
    \ = 0;\n    $right_parens = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n\
    \            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    if ($left_parens != $right_parens) {\n        return \"\
    No\";\n    }\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i]\
    \ == '(') {\n            $left++;\n        } else {\n            $right++;\n \
    \       }\n        if ($right > $left) {\n            return \"No\";\n       \
    \ }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $left++;\n        } else {\n            $right++;\n \
    \       }\n        if ($right > $left) {\n            return \"No\";\n       \
    \ }\n    }\n    return \"Yes\";\n}\necho match_parens(array(\"()(\", \")\")) .\
    \ \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspxeky8h.php:71\n\
    Stack trace:\n#0 /tmp/tmpspxeky8h.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpspxeky8h.php\
    \ on line 71\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return \"Yes\";\n \
    \   } elseif ($s1_open == 0 && $s2_open > 0) {\n        return \"No\";\n    }\
    \ elseif ($s1_open > 0 && $s2_open == 0) {\n        return \"No\";\n    } elseif\
    \ ($s1_open > 0 && $s2_open > 0) {\n        return \"No\";\n    } elseif ($s1_open\
    \ < 0 && $s2_open == 0) {\n        return \"No\";\n    } elseif ($s1_open == 0\
    \ && $s2_open < 0) {\n        return \"No\";\n    } elseif ($s1_open < 0 && $s2_open\
    \ < 0) {\n        return \"No\";\n    } elseif ($s1_open < 0 && $s2_open > 0)\
    \ {\n        return \"Yes\";\n    } elseif ($s1_open > 0 && $s2_open < 0) {\n\
    \        return \"Yes\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdngbvgpd.php:63\n\
    Stack trace:\n#0 /tmp/tmpdngbvgpd.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpdngbvgpd.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rhz40yx.php:63\n\
    Stack trace:\n#0 /tmp/tmp3rhz40yx.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp3rhz40yx.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lst = array_map(function($x) { return str_split($x);\
    \ }, $lst);\n    $lst = array_reduce($lst, function($acc, $x) { return array_merge($acc,\
    \ $x); }, []);\n    $count = 0;\n    foreach ($lst as $x) {\n        if ($x ==\
    \ '(') {\n            $count++;\n        } else {\n            $count--;\n   \
    \     }\n        if ($count < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    return $count == 0 ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc5g6arpq.php:40\n\
    Stack trace:\n#0 /tmp/tmpc5g6arpq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpc5g6arpq.php\
    \ on line 40\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    if ($left ==\
    \ $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisizk_gp.php:47\n\
    Stack trace:\n#0 /tmp/tmpisizk_gp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpisizk_gp.php\
    \ on line 47\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdd4gpi3_.php:51\n\
    Stack trace:\n#0 /tmp/tmpdd4gpi3_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpdd4gpi3_.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvcyshq3.php:53\n\
    Stack trace:\n#0 /tmp/tmpmvcyshq3.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpmvcyshq3.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return \"Yes\";\n \
    \   } else if ($s1_open == 0 && $s2_open < 0) {\n        return \"Yes\";\n   \
    \ } else if ($s1_open < 0 && $s2_open == 0) {\n        return \"Yes\";\n    }\
    \ else if ($s1_open < 0 && $s2_open < 0) {\n        if ($s1_open + $s2_open ==\
    \ 0) {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon32t66i.php:57\n\
    Stack trace:\n#0 /tmp/tmpon32t66i.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpon32t66i.php\
    \ on line 57\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return \"Yes\";\n \
    \   } elseif ($s1_open > 0 && $s2_open < 0) {\n        return \"Yes\";\n    }\
    \ elseif ($s1_open < 0 && $s2_open > 0) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bih2dtq.php:54\n\
    Stack trace:\n#0 /tmp/tmp3bih2dtq.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp3bih2dtq.php\
    \ on line 54\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6e6oai.php:68\n\
    Stack trace:\n#0 /tmp/tmpft6e6oai.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpft6e6oai.php\
    \ on line 68\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jzz1xax.php:49\n\
    Stack trace:\n#0 /tmp/tmp8jzz1xax.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp8jzz1xax.php\
    \ on line 49\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open == $str2_close\
    \ && $str2_open == $str1_close) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f69ktrs.php:42\n\
    Stack trace:\n#0 /tmp/tmp5f69ktrs.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5f69ktrs.php\
    \ on line 42\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return \"Yes\";\n \
    \   } elseif ($s1_open > 0 && $s2_open < 0) {\n        return \"Yes\";\n    }\
    \ elseif ($s1_open < 0 && $s2_open > 0) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jcf7c5z.php:53\n\
    Stack trace:\n#0 /tmp/tmp6jcf7c5z.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp6jcf7c5z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $stack = array();\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        $char = $str[$i];\n        if ($char == \"(\") {\n        \
    \    array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return \"No\";\n            } else {\n            \
    \    array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0 ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1o4dyld.php:43\n\
    Stack trace:\n#0 /tmp/tmpe1o4dyld.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpe1o4dyld.php\
    \ on line 43\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdd4gpi3_.php:51\n\
    Stack trace:\n#0 /tmp/tmpdd4gpi3_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpdd4gpi3_.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    if ($str1_balance > 0 && $str2_balance < 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_balance < 0 && $str2_balance > 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_balance == 0 && $str2_balance == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8581vs6.php:44\n\
    Stack trace:\n#0 /tmp/tmpw8581vs6.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpw8581vs6.php\
    \ on line 44\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str2_close\
    \ = $str2_close - $str2_open;\n            if ($str1_open == $str2_close) {\n\
    \                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($str1_open < $str1_close) {\n    \
    \        $str1_close = $str1_close - $str1_open;\n            $str2_open = $str2_open\
    \ - $str2_close;\n            if ($str1_close == $str2_open) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbm2_boo.php:63\n\
    Stack trace:\n#0 /tmp/tmpfbm2_boo.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpfbm2_boo.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6e6oai.php:68\n\
    Stack trace:\n#0 /tmp/tmpft6e6oai.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpft6e6oai.php\
    \ on line 68\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdd4gpi3_.php:51\n\
    Stack trace:\n#0 /tmp/tmpdd4gpi3_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpdd4gpi3_.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s3\
    \ = $s1 . $s2;\n    $s4 = $s2 . $s1;\n    return is_good($s3) || is_good($s4)\
    \ ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmpw904hp0_.php:20\nStack trace:\n#0 /tmp/tmpw904hp0_.php(23): match_parens(Array)\n\
    #1 /tmp/tmpw904hp0_.php(27): candidate(Array)\n#2 /tmp/tmpw904hp0_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw904hp0_.php on line 20\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str2_close\
    \ = $str2_close - $str2_open;\n            if ($str1_open == $str2_close) {\n\
    \                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($str1_open < $str1_close) {\n    \
    \        $str1_close = $str1_close - $str1_open;\n            $str2_open = $str2_open\
    \ - $str2_close;\n            if ($str1_close == $str2_open) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbm2_boo.php:63\n\
    Stack trace:\n#0 /tmp/tmpfbm2_boo.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpfbm2_boo.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rhz40yx.php:63\n\
    Stack trace:\n#0 /tmp/tmp3rhz40yx.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp3rhz40yx.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count\
    \ = 0;\n    $s2_count = 0;\n    for ($i = 0; $i < strlen($s1); $i++) {\n     \
    \   if ($s1[$i] == '(') {\n            $s1_count++;\n        } else {\n      \
    \      $s1_count--;\n        }\n    }\n    for ($i = 0; $i < strlen($s2); $i++)\
    \ {\n        if ($s2[$i] == '(') {\n            $s2_count++;\n        } else {\n\
    \            $s2_count--;\n        }\n    }\n    if ($s1_count == 0 && $s2_count\
    \ == 0) {\n        return \"Yes\";\n    } else if ($s1_count > 0 && $s2_count\
    \ < 0) {\n        return \"Yes\";\n    } else if ($s1_count < 0 && $s2_count >\
    \ 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk619a1k.php:51\n\
    Stack trace:\n#0 /tmp/tmpuk619a1k.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpuk619a1k.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $good = 0;\n    $bad = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n\
    \        if ($str1[$i] == '(') {\n            $good++;\n        } else {\n   \
    \         $bad++;\n        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $good++;\n        } else {\n\
    \            $bad++;\n        }\n    }\n    if ($good == $bad) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvrhwe_c.php:54\n\
    Stack trace:\n#0 /tmp/tmpbvrhwe_c.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpbvrhwe_c.php\
    \ on line 54\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rhz40yx.php:63\n\
    Stack trace:\n#0 /tmp/tmp3rhz40yx.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp3rhz40yx.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return \"Yes\";\n \
    \   } else if ($s1_open > 0 && $s2_open < 0) {\n        if ($s1_open == abs($s2_open))\
    \ {\n            return \"Yes\";\n        }\n    } else if ($s1_open < 0 && $s2_open\
    \ > 0) {\n        if (abs($s1_open) == $s2_open) {\n            return \"Yes\"\
    ;\n        }\n    }\n    return \"No\";\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxgagc4k.php:63\n\
    Stack trace:\n#0 /tmp/tmpkxgagc4k.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpkxgagc4k.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        if ($str2_open % 2 == 0) {\n            return \"Yes\";\n  \
    \      } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open == 0) {\n        if ($str1_open % 2 == 0) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } else\
    \ {\n        if ($str1_open % 2 == 0 && $str2_open % 2 == 0) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92d3wl43.php:63\n\
    Stack trace:\n#0 /tmp/tmp92d3wl43.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp92d3wl43.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6e6oai.php:68\n\
    Stack trace:\n#0 /tmp/tmpft6e6oai.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpft6e6oai.php\
    \ on line 68\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    $s1_balance = $s1_open -\
    \ $s1_close;\n    $s2_balance = $s2_open - $s2_close;\n    $s1_open_pos = strpos($s1,\
    \ '(');\n    $s1_close_pos = strpos($s1, ')');\n    $s2_open_pos = strpos($s2,\
    \ '(');\n    $s2_close_pos = strpos($s2, ')');\n    if ($s1_balance == 0 && $s2_balance\
    \ == 0) {\n        return \"Yes\";\n    } elseif ($s1_balance == 0 && $s2_balance\
    \ != 0) {\n        if ($s2_balance < 0) {\n            return \"No\";\n      \
    \  } else {\n            if ($s2_open_pos < $s2_close_pos) {\n               \
    \ return \"No\";\n            } else {\n                return \"Yes\";\n    \
    \        }\n        }\n    } elseif ($s1_balance != 0 && $s2_balance == 0) {\n\
    \        if ($s1_balance < 0) {\n            return \"No\";\n        } else {\n\
    \            if ($s1_open_pos < $s1_close_pos) {\n                return \"No\"\
    ;\n            } else {\n                return \"Yes\";\n            }\n    \
    \    }\n    } else {\n        if ($s1_balance < 0 || $s2_balance < 0) {\n    \
    \        return \"No\";\n        } else {\n            if ($s1_open_pos < $s1_close_pos\
    \ || $s2_open_pos < $s2_close_pos\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpb1kvfta6.php
    on line 57

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close) {\n        if\
    \ ($str2_open > $str2_close) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }\n    } elseif ($str2_open == $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            return \"Yes\";\n  \
    \      } else {\n            return \"No\";\n        }\n    } else {\n       \
    \ return \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxj106qyy.php:48\n\
    Stack trace:\n#0 /tmp/tmpxj106qyy.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpxj106qyy.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ > $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open > $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ > $str1_close && $str2_open > $str2_close) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqe4v_he.php:41\n\
    Stack trace:\n#0 /tmp/tmpnqe4v_he.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpnqe4v_he.php\
    \ on line 41\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkhls1mi.php:64\n\
    Stack trace:\n#0 /tmp/tmprkhls1mi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmprkhls1mi.php\
    \ on line 64\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s1_len\
    \ = strlen($s1);\n  $s2_len = strlen($s2);\n  $s1_open = substr_count($s1, '(');\n\
    \  $s1_close = substr_count($s1, ')');\n  $s2_open = substr_count($s2, '(');\n\
    \  $s2_close = substr_count($s2, ')');\n  $s1_balance = $s1_open - $s1_close;\n\
    \  $s2_balance = $s2_open - $s2_close;\n  $total_open = $s1_open + $s2_open;\n\
    \  $total_close = $s1_close + $s2_close;\n  $total_balance = $s1_balance + $s2_balance;\n\
    \  if ($total_open == $total_close && $total_balance == 0) {\n    return \"Yes\"\
    ;\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3iheqfp.php:50\n\
    Stack trace:\n#0 /tmp/tmpl3iheqfp.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpl3iheqfp.php\
    \ on line 50\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s1_open\
    \ = substr_count($s1, '(');\n  $s1_close = substr_count($s1, ')');\n  $s2_open\
    \ = substr_count($s2, '(');\n  $s2_close = substr_count($s2, ')');\n  if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n    return 'Yes';\n  } elseif ($s1_open\
    \ == $s1_close && $s2_open != $s2_close) {\n    return 'No';\n  } elseif ($s1_open\
    \ != $s1_close && $s2_open == $s2_close) {\n    return 'No';\n  } elseif ($s1_open\
    \ != $s1_close && $s2_open != $s2_close) {\n    if ($s1_open > $s1_close) {\n\
    \      $s1_open = $s1_open - $s1_close;\n      $s2_close = $s2_close - $s2_open;\n\
    \      if ($s1_open == $s2_close) {\n        return 'Yes';\n      } else {\n \
    \       return 'No';\n      }\n    } elseif ($s1_open < $s1_close) {\n      $s1_close\
    \ = $s1_close - $s1_open;\n      $s2_open = $s2_open - $s2_close;\n      if ($s1_close\
    \ == $s2_open) {\n        return 'Yes';\n      } else {\n        return 'No';\n\
    \      }\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3y2g27e.php:63\n\
    Stack trace:\n#0 /tmp/tmpc3y2g27e.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpc3y2g27e.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str3 = $str1 . $str2;\n    $str4 = $str2 . $str1;\n    $str5 = $str1 . $str1;\n\
    \    $str6 = $str2 . $str2;\n    $str7 = $str1 . $str2 . $str1;\n    $str8 = $str2\
    \ . $str1 . $str2;\n    $str9 = $str1 . $str2 . $str2;\n    $str10 = $str2 . $str1\
    \ . $str1;\n    $str11 = $str1 . $str1 . $str2;\n    $str12 = $str2 . $str2 .\
    \ $str1;\n    $str13 = $str1 . $str2 . $str1 . $str2;\n    $str14 = $str2 . $str1\
    \ . $str2 . $str1;\n    $str15 = $str1 . $str2 . $str2 . $str1;\n    $str16 =\
    \ $str2 . $str1 . $str1 . $str2;\n    $str17 = $str1 . $str1 . $str2 . $str2;\n\
    \    $str18 = $str2 . $str2 . $str1 . $str1;\n    $str19 = $str1 . $str2 . $str1\
    \ . $str2 . $str1;\n    $str20 = $str2 . $str1 . $str2 . $str1 . $str2;\n    $str21\
    \ = $str1 . $str2 . $str2 . $str1 . $str2;\n    $str22 = $str2 . $str1 . $str1\
    \ . $str2 . $str1;\n    $str23 = $str1 . $str1 . $str2 . $str2 . $str1;\n    $str24\
    \ = $str2 . $str2 . $str1 . $str1 . $str2;\n    $str25 = $str1 . $str2 . $str1\
    \ . $str2 . $str2 . $str1;\n    $str26 =\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmplql3givr.php on line 42

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ -= $str2_close;\n            $str2_close = 0;\n            if ($str1_open >=\
    \ $str2_open) {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } elseif ($str2_open < $str2_close)\
    \ {\n            $str2_close -= $str2_open;\n            $str2_open = 0;\n   \
    \         if ($str1_close >= $str2_close) {\n                return \"Yes\";\n\
    \            } else {\n                return \"No\";\n            }\n       \
    \ }\n    } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n\
    \        if ($str1_open > $str1_close) {\n            $str1_open -= $str1_close;\n\
    \            $str1_close = 0;\n            if ($str2_open >= $str1_open) {\n \
    \               return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($str1_open < $str1_close) {\n    \
    \        $str1_close -= $str1_open;\n            $str1_open = 0;\n           \
    \ if ($str2_close >= $str1_close) {\n                return\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp84qskaj.php on line 58

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6e6oai.php:68\n\
    Stack trace:\n#0 /tmp/tmpft6e6oai.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpft6e6oai.php\
    \ on line 68\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_open_close = $str1_open - $str1_close;\n    $str2_open_close\
    \ = $str2_open - $str2_close;\n    if ($str1_open_close == 0 && $str2_open_close\
    \ == 0) {\n        return \"Yes\";\n    } elseif ($str1_open_close == 0 && $str2_open_close\
    \ != 0) {\n        return \"No\";\n    } elseif ($str1_open_close != 0 && $str2_open_close\
    \ == 0) {\n        return \"No\";\n    } elseif ($str1_open_close > 0 && $str2_open_close\
    \ < 0) {\n        return \"No\";\n    } elseif ($str1_open_close < 0 && $str2_open_close\
    \ > 0) {\n        return \"No\";\n    } elseif ($str1_open_close > 0 && $str2_open_close\
    \ > 0) {\n        if ($str1_open_close == $str2_open_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($str1_open_close < 0 && $str2_open_close < 0) {\n        if ($str1_open_close\
    \ == $str2_open_close) {\n            return \"Yes\";\n        } else {\n    \
    \        return \"No\";\n        }\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalzgupmv.php:55\n\
    Stack trace:\n#0 /tmp/tmpalzgupmv.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpalzgupmv.php\
    \ on line 55\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == -1 && $str2_open\
    \ == 1) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_k4uvdz.php:49\n\
    Stack trace:\n#0 /tmp/tmp6_k4uvdz.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp6_k4uvdz.php\
    \ on line 49\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open = $str2_open - $str2_close;\n\
    \            $str2_close = 0;\n        } elseif ($str2_open < $str2_close) {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str1_open == $str2_close && $str2_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj94up08.php:66\n\
    Stack trace:\n#0 /tmp/tmpsj94up08.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpsj94up08.php\
    \ on line 66\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkhls1mi.php:64\n\
    Stack trace:\n#0 /tmp/tmprkhls1mi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmprkhls1mi.php\
    \ on line 64\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str3 = $str1 . $str2;\n    $str4 = $str2 . $str1;\n    $str5 = $str1 . $str1;\n\
    \    $str6 = $str2 . $str2;\n    $str7 = $str1 . $str2 . $str1;\n    $str8 = $str2\
    \ . $str1 . $str2;\n    $str9 = $str1 . $str2 . $str2;\n    $str10 = $str2 . $str1\
    \ . $str1;\n    $str11 = $str1 . $str1 . $str2;\n    $str12 = $str2 . $str2 .\
    \ $str1;\n    $str13 = $str1 . $str2 . $str1 . $str2;\n    $str14 = $str2 . $str1\
    \ . $str2 . $str1;\n    $str15 = $str1 . $str2 . $str2 . $str1;\n    $str16 =\
    \ $str2 . $str1 . $str1 . $str2;\n    $str17 = $str1 . $str1 . $str2 . $str2;\n\
    \    $str18 = $str2 . $str2 . $str1 . $str1;\n    $str19 = $str1 . $str1 . $str1;\n\
    \    $str20 = $str2 . $str2 . $str2;\n    $str21 = $str1 . $str2 . $str1 . $str2\
    \ . $str1;\n    $str22 = $str2 . $str1 . $str2 . $str1 . $str2;\n    $str23 =\
    \ $str1 . $str2 . $str2 . $str1 . $str2;\n    $str24 = $str2 . $str1 . $str1 .\
    \ $str2 . $str1;\n    $str25 = $str1 . $str1 . $str2 . $str2 . $str1;\n    $str26\
    \ = $str2 . $str2 . $str1 . $str1 . $str2;\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpy4quvys3.php on line 61

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p0toyem.php:51\n\
    Stack trace:\n#0 /tmp/tmp0p0toyem.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp0p0toyem.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $stack = [];\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        $char = $str[$i];\n        if ($char == '(') {\n          \
    \  array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return \"No\";\n            } else {\n            \
    \    array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0 ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjb8eydn.php:43\n\
    Stack trace:\n#0 /tmp/tmpjjb8eydn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjjb8eydn.php\
    \ on line 43\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count\
    \ = 0;\n    $s2_count = 0;\n    for ($i = 0; $i < strlen($s1); $i++) {\n     \
    \   if ($s1[$i] == '(') {\n            $s1_count++;\n        } else {\n      \
    \      $s1_count--;\n        }\n    }\n    for ($i = 0; $i < strlen($s2); $i++)\
    \ {\n        if ($s2[$i] == '(') {\n            $s2_count++;\n        } else {\n\
    \            $s2_count--;\n        }\n    }\n    if ($s1_count == 0 && $s2_count\
    \ == 0) {\n        return \"Yes\";\n    } else if ($s1_count == 0 && $s2_count\
    \ < 0) {\n        return \"Yes\";\n    } else if ($s1_count > 0 && $s2_count ==\
    \ 0) {\n        return \"Yes\";\n    } else if ($s1_count < 0 && $s2_count ==\
    \ 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bn04u4u.php:51\n\
    Stack trace:\n#0 /tmp/tmp8bn04u4u.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8bn04u4u.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02x6coyn.php:45\n\
    Stack trace:\n#0 /tmp/tmp02x6coyn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp02x6coyn.php\
    \ on line 45\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ != 0) {\n        return \"No\";\n    } else if ($str1_open != 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open != 0 && $str2_open\
    \ != 0) {\n        if ($str1_open > 0 && $str2_open < 0) {\n            if ($str1_open\
    \ > abs($str2_open)) {\n                return \"No\";\n            } else {\n\
    \                return \"Yes\";\n            }\n        } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n            if (abs($str1_open) > $str2_open) {\n\
    \                return \"No\";\n            } else {\n                return\
    \ \"Yes\";\n            }\n        } else {\n            return \"No\";\n    \
    \    }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfy9brv5o.php:67\n\
    Stack trace:\n#0 /tmp/tmpfy9brv5o.php(79): test()\n#1 {main}\n  thrown in /tmp/tmpfy9brv5o.php\
    \ on line 67\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n        return \"Yes\";\n    } elseif\
    \ ($s1_open == $s1_close && $s2_open != $s2_close) {\n        if ($s2_open > $s2_close)\
    \ {\n            $s2_open = $s2_open - $s2_close;\n            $s2_close = 0;\n\
    \        } else {\n            $s2_close = $s2_close - $s2_open;\n           \
    \ $s2_open = 0;\n        }\n        if ($s1_open > $s2_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($s1_open != $s1_close && $s2_open == $s2_close) {\n        if ($s1_open > $s1_close)\
    \ {\n            $s1_open = $s1_open - $s1_close;\n            $s1_close = 0;\n\
    \        } else {\n            $s1_close = $s1_close - $s1_open;\n           \
    \ $s1_open = 0;\n        }\n        if ($s2_open > $s1_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } else\
    \ {\n        if ($s1_open > $s1_close) {\n            $s1_open = $s1_open - $s1_close;\n\
    \            $s1_close = 0;\n        } else {\n            $s1_close = $s1_close\
    \ - $s1_open;\n            $s1_\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpq4hin02j.php
    on line 57

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6e6oai.php:68\n\
    Stack trace:\n#0 /tmp/tmpft6e6oai.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpft6e6oai.php\
    \ on line 68\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            $str2_close = 0;\n        } else {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str2_open == $str2_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($str1_open != $str1_close && $str2_open == $str2_close) {\n        if ($str1_open\
    \ > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n     \
    \       $str1_close = 0;\n        } else {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            $str1_open = 0;\n        }\n        if ($str1_open\
    \ == $str1_close) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n    } else {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 52 in /tmp/tmpgenuj6om.php on line 76

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open = $str2_open - $str2_close;\n\
    \            $str2_close = 0;\n        } elseif ($str2_open < $str2_close) {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str1_open == $str2_close && $str2_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsvphlxt.php:67\n\
    Stack trace:\n#0 /tmp/tmpdsvphlxt.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpdsvphlxt.php\
    \ on line 67\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            if ($str1_open >= $str2_open) {\n \
    \               return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } else {\n            $str2_close = $str2_close\
    \ - $str2_open;\n            if ($str1_close >= $str2_close) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    } elseif ($str1_open != $str1_close && $str2_open\
    \ == $str2_close) {\n        if ($str1_open > $str1_close) {\n            $str1_open\
    \ = $str1_open - $str1_close;\n            if ($str2_open >= $str1_open) {\n \
    \               return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } else {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            if ($str2_close >= $str1_close) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    } else {\n        if ($str1_open > $str1_close) {\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 59 in /tmp/tmpy35pvn2m.php on line 80

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open + $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkkoaqb6.php:56\n\
    Stack trace:\n#0 /tmp/tmpdkkoaqb6.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpdkkoaqb6.php\
    \ on line 56\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    $s1_balance\
    \ = $s1_open - $s1_close;\n    $s2_balance = $s2_open - $s2_close;\n    $total_balance\
    \ = $s1_balance + $s2_balance;\n    if ($total_balance == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91u7kx46.php:45\n\
    Stack trace:\n#0 /tmp/tmp91u7kx46.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp91u7kx46.php\
    \ on line 45\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        $str2_open += $str1_open;\n        $str1_open = 0;\n       \
    \ if ($str1_open == 0 && $str2_open == 0) {\n            return \"Yes\";\n   \
    \     } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open < 0) {\n        $str1_open += $str2_open;\n        $str2_open\
    \ = 0;\n        if ($str1_open == 0 && $str2_open == 0) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4264n19.php:74\n\
    Stack trace:\n#0 /tmp/tmpe4264n19.php(79): test()\n#1 {main}\n  thrown in /tmp/tmpe4264n19.php\
    \ on line 74\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str2_close\
    \ = $str2_close - $str2_open;\n            if ($str1_open == $str2_close) {\n\
    \                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($str1_open < $str1_close) {\n    \
    \        $str1_close = $str1_close - $str1_open;\n            $str2_open = $str2_open\
    \ - $str2_close;\n            if ($str1_close == $str2_open) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbm2_boo.php:63\n\
    Stack trace:\n#0 /tmp/tmpfbm2_boo.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpfbm2_boo.php\
    \ on line 63\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvcyshq3.php:53\n\
    Stack trace:\n#0 /tmp/tmpmvcyshq3.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpmvcyshq3.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        if ($str2_open\
    \ == -$str1_open) {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3aw5rfs.php:64\n\
    Stack trace:\n#0 /tmp/tmpx3aw5rfs.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpx3aw5rfs.php\
    \ on line 64\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    for ($i\
    \ = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n    \
    \        $left++;\n        } else {\n            $right++;\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    return ($left == $right) ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqgtl678.php:48\n\
    Stack trace:\n#0 /tmp/tmpaqgtl678.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpaqgtl678.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce74qti3.php:48\n\
    Stack trace:\n#0 /tmp/tmpce74qti3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpce74qti3.php\
    \ on line 48\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $len1 = strlen($str1);\n    $len2 = strlen($str2);\n    $count1 = 0;\n  \
    \  $count2 = 0;\n    for ($i = 0; $i < $len1; $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $count1++;\n        } else {\n            $count1--;\n \
    \       }\n    }\n    for ($i = 0; $i < $len2; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $count2++;\n        } else {\n            $count2--;\n\
    \        }\n    }\n    if ($count1 == 0 && $count2 == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoll_6l45.php:47\n\
    Stack trace:\n#0 /tmp/tmpoll_6l45.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpoll_6l45.php\
    \ on line 47\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $good = 0;\n    $bad = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n\
    \        if ($str1[$i] == '(') {\n            $good++;\n        } else {\n   \
    \         $bad++;\n        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $good++;\n        } else {\n\
    \            $bad++;\n        }\n    }\n    if ($good == $bad) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvrhwe_c.php:54\n\
    Stack trace:\n#0 /tmp/tmpbvrhwe_c.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpbvrhwe_c.php\
    \ on line 54\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    $s1_balance\
    \ = $s1_open - $s1_close;\n    $s2_balance = $s2_open - $s2_close;\n    $balance\
    \ = $s1_balance + $s2_balance;\n    if ($balance == 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_ijefpa.php:45\n\
    Stack trace:\n#0 /tmp/tmpo_ijefpa.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpo_ijefpa.php\
    \ on line 45\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatt1pc_p.php:51\n\
    Stack trace:\n#0 /tmp/tmpatt1pc_p.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpatt1pc_p.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\"\
    ;\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstu4x3w_.php:47\n\
    Stack trace:\n#0 /tmp/tmpstu4x3w_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpstu4x3w_.php\
    \ on line 47\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open = $str2_open - $str2_close;\n\
    \            $str2_close = 0;\n        } elseif ($str2_open < $str2_close) {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str1_open == $str2_close && $str2_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsvphlxt.php:67\n\
    Stack trace:\n#0 /tmp/tmpdsvphlxt.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpdsvphlxt.php\
    \ on line 67\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkhls1mi.php:64\n\
    Stack trace:\n#0 /tmp/tmprkhls1mi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmprkhls1mi.php\
    \ on line 64\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        if ($str2_open % 2 == 0) {\n            return \"Yes\";\n  \
    \      } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open == 0) {\n        if ($str1_open % 2 == 0) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } else\
    \ {\n        if ($str1_open % 2 == 0 && $str2_open % 2 == 0) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cg_7p4_.php:64\n\
    Stack trace:\n#0 /tmp/tmp4cg_7p4_.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp4cg_7p4_.php\
    \ on line 64\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n        return \"Yes\";\n    } elseif\
    \ ($s1_open == $s1_close) {\n        $s2_open_close = $s2_open - $s2_close;\n\
    \        if ($s2_open_close > 0) {\n            $s1_open_close = $s1_open - $s1_close;\n\
    \            if ($s1_open_close >= $s2_open_close) {\n                return \"\
    Yes\";\n            }\n        }\n    } elseif ($s2_open == $s2_close) {\n   \
    \     $s1_open_close = $s1_open - $s1_close;\n        if ($s1_open_close > 0)\
    \ {\n            $s2_open_close = $s2_open - $s2_close;\n            if ($s2_open_close\
    \ >= $s1_open_close) {\n                return \"Yes\";\n            }\n     \
    \   }\n    }\n    return \"No\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcalm1yn9.php:48\n\
    Stack trace:\n#0 /tmp/tmpcalm1yn9.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpcalm1yn9.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $lst[0]\
    \ = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    foreach ($lst[0]\
    \ as $char) {\n        if ($char == \"(\") {\n            $left++;\n        }\
    \ else {\n            $right++;\n        }\n    }\n    foreach ($lst[1] as $char)\
    \ {\n        if ($char == \"(\") {\n            $left++;\n        } else {\n \
    \           $right++;\n        }\n    }\n    if ($left == $right) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphov6riuw.php:56\n\
    Stack trace:\n#0 /tmp/tmphov6riuw.php(61): test()\n#1 {main}\n  thrown in /tmp/tmphov6riuw.php\
    \ on line 56\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    if ($left ==\
    \ $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuccnybi.php:48\n\
    Stack trace:\n#0 /tmp/tmpfuccnybi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfuccnybi.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str1_open + $str2_open == 0) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52jibmgw.php:69\n\
    Stack trace:\n#0 /tmp/tmp52jibmgw.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp52jibmgw.php\
    \ on line 69\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open > 0 && $str2_open < 0)\
    \ {\n    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open > 0) {\n \
    \   return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr62zur44.php:54\n\
    Stack trace:\n#0 /tmp/tmpr62zur44.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpr62zur44.php\
    \ on line 54\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $len1 = strlen($str1);\n    $len2 = strlen($str2);\n    $str = $str1 . $str2;\n\
    \    $len = $len1 + $len2;\n    $count = 0;\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($str[$i] == '(') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m9v2acu.php:48\n\
    Stack trace:\n#0 /tmp/tmp5m9v2acu.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp5m9v2acu.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  $str1_balance = $str1_open\
    \ - $str1_close;\n  $str2_balance = $str2_open - $str2_close;\n  $balance = $str1_balance\
    \ + $str2_balance;\n  if ($balance == 0) {\n    return \"Yes\";\n  } else {\n\
    \    return \"No\";\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprte6v5q.php:48\n\
    Stack trace:\n#0 /tmp/tmpprte6v5q.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpprte6v5q.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02x6coyn.php:45\n\
    Stack trace:\n#0 /tmp/tmp02x6coyn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp02x6coyn.php\
    \ on line 45\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    if ($str1_balance_abs == $str2_balance_abs) {\n \
    \       if ($str1_balance == $str2_balance) {\n            return \"Yes\";\n \
    \       } else {\n            return \"No\";\n        }\n    } else {\n      \
    \  return \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbirj2rsd.php:44\n\
    Stack trace:\n#0 /tmp/tmpbirj2rsd.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbirj2rsd.php\
    \ on line 44\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6e6oai.php:68\n\
    Stack trace:\n#0 /tmp/tmpft6e6oai.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpft6e6oai.php\
    \ on line 68\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        if ($str1_count + $str2_count == 0) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj65qvb5u.php:60\n\
    Stack trace:\n#0 /tmp/tmpj65qvb5u.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpj65qvb5u.php\
    \ on line 60\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdd4gpi3_.php:51\n\
    Stack trace:\n#0 /tmp/tmpdd4gpi3_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpdd4gpi3_.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    if ($left ==\
    \ $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuccnybi.php:48\n\
    Stack trace:\n#0 /tmp/tmpfuccnybi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfuccnybi.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdl7fyox.php:59\n\
    Stack trace:\n#0 /tmp/tmptdl7fyox.php(71): test()\n#1 {main}\n  thrown in /tmp/tmptdl7fyox.php\
    \ on line 59\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatt1pc_p.php:51\n\
    Stack trace:\n#0 /tmp/tmpatt1pc_p.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpatt1pc_p.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    return $left\
    \ == $right ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86_a4xm7.php:44\n\
    Stack trace:\n#0 /tmp/tmp86_a4xm7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp86_a4xm7.php\
    \ on line 44\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $total_balance = $str1_balance + $str2_balance;\n    if\
    \ ($total_balance == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9kbbq0t.php:47\n\
    Stack trace:\n#0 /tmp/tmph9kbbq0t.php(52): test()\n#1 {main}\n  thrown in /tmp/tmph9kbbq0t.php\
    \ on line 47\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    for ($i = 0; $i < $str1_len; $i++) {\n  \
    \      if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho\
    \ match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gjv9jbd.php:55\n\
    Stack trace:\n#0 /tmp/tmp4gjv9jbd.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp4gjv9jbd.php\
    \ on line 55\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        if ($str1_count == abs($str2_count)) {\n\
    \            return \"Yes\";\n        } else {\n            return \"No\";\n \
    \       }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmdnics_.php:58\n\
    Stack trace:\n#0 /tmp/tmplmdnics_.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplmdnics_.php\
    \ on line 58\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $balance = $str1_balance + $str2_balance;\n    if ($balance\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77wjjoy5.php:48\n\
    Stack trace:\n#0 /tmp/tmp77wjjoy5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp77wjjoy5.php\
    \ on line 48\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s1_open\
    \ = substr_count($s1, '(');\n  $s1_close = substr_count($s1, ')');\n  $s2_open\
    \ = substr_count($s2, '(');\n  $s2_close = substr_count($s2, ')');\n  if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n    return 'Yes';\n  } elseif ($s1_open\
    \ == $s1_close && $s2_open > $s2_close) {\n    return 'Yes';\n  } elseif ($s1_open\
    \ > $s1_close && $s2_open == $s2_close) {\n    return 'Yes';\n  } else {\n   \
    \ return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpl06bc2.php:38\n\
    Stack trace:\n#0 /tmp/tmpwpl06bc2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwpl06bc2.php\
    \ on line 38\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open = 0;\n    $close = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $open++;\n            } else {\n\
    \                $close++;\n            }\n        }\n    }\n    if ($open ==\
    \ $close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtirbbqu.php:47\n\
    Stack trace:\n#0 /tmp/tmpqtirbbqu.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqtirbbqu.php\
    \ on line 47\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce74qti3.php:48\n\
    Stack trace:\n#0 /tmp/tmpce74qti3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpce74qti3.php\
    \ on line 48\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiwzkjw6.php:52\n\
    Stack trace:\n#0 /tmp/tmpqiwzkjw6.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpqiwzkjw6.php\
    \ on line 52\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open = $str2_open - $str2_close;\n\
    \            $str2_close = 0;\n        } elseif ($str2_open < $str2_close) {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str1_open == $str2_close && $str2_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj94up08.php:66\n\
    Stack trace:\n#0 /tmp/tmpsj94up08.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpsj94up08.php\
    \ on line 66\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333xendk.php:57\n\
    Stack trace:\n#0 /tmp/tmp333xendk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp333xendk.php\
    \ on line 57\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lst = array_map(function($x) {\n       \
    \ return str_split($x);\n    }, $lst);\n    $lst = array_reduce($lst, function($acc,\
    \ $x) {\n        return array_merge($acc, $x);\n    }, []);\n    $count = 0;\n\
    \    foreach ($lst as $x) {\n        if ($x == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    return $count == 0 ? \"Yes\"\
    \ : \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6mvq9je.php:44\n\
    Stack trace:\n#0 /tmp/tmpo6mvq9je.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpo6mvq9je.php\
    \ on line 44\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count != 0) {\n        return \"No\";\n    } else if ($str1_count\
    \ != 0 && $str2_count == 0) {\n        return \"No\";\n    } else if ($str1_count\
    \ != 0 && $str2_count != 0) {\n        if ($str1_count == $str2_count) {\n   \
    \         return \"Yes\";\n        } else {\n            return \"No\";\n    \
    \    }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw82hl9o.php:56\n\
    Stack trace:\n#0 /tmp/tmpdw82hl9o.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdw82hl9o.php\
    \ on line 56\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_parens\
    \ = 0;\n    $str2_parens = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n    \
    \    if ($str1[$i] == '(') {\n            $str1_parens++;\n        } else {\n\
    \            $str1_parens--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_parens++;\n    \
    \    } else {\n            $str2_parens--;\n        }\n    }\n    if ($str1_parens\
    \ == 0 && $str2_parens == 0) {\n        return \"Yes\";\n    } else if ($str1_parens\
    \ == 0 && $str2_parens < 0) {\n        return \"Yes\";\n    } else if ($str1_parens\
    \ > 0 && $str2_parens == 0) {\n        return \"Yes\";\n    } else if ($str1_parens\
    \ < 0 && $str2_parens == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dm9ra5l.php:53\n\
    Stack trace:\n#0 /tmp/tmp5dm9ra5l.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp5dm9ra5l.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ != 0) {\n        if ($str2_open > 0) {\n            return \"No\";\n       \
    \ } else {\n            $str2_open = abs($str2_open);\n            if ($str2_open\
    \ % 2 == 0) {\n                return \"Yes\";\n            } else {\n       \
    \         return \"No\";\n            }\n        }\n    } else if ($str1_open\
    \ != 0 && $str2_open == 0) {\n        if ($str1_open > 0) {\n            return\
    \ \"No\";\n        } else {\n            $str1_open = abs($str1_open);\n     \
    \       if ($str1_open % 2 == 0) {\n                return \"Yes\";\n        \
    \    } else {\n                return \"No\";\n            }\n        }\n    }\
    \ else {\n        if ($str1_open > 0 && $str2_open > 0) {\n            return\
    \ \"No\";\n        } else if ($str1_open < 0 && $str2_open < 0) {\n          \
    \  return \"No\";\n        } else {\n            $str1_open = abs($str1_open);\n\
    \            $str2_open = abs($str2_\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp8e9i65pc.php
    on line 68

    '
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close) {\n        return\
    \ \"Yes\";\n    } elseif ($str2_open == $str2_close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj95y2k6c.php:40\n\
    Stack trace:\n#0 /tmp/tmpj95y2k6c.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj95y2k6c.php\
    \ on line 40\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_parens\
    \ = 0;\n    $right_parens = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n\
    \            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    if ($left_parens != $right_parens) {\n        return \"\
    No\";\n    }\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i]\
    \ == '(') {\n            $left++;\n        } else {\n            $right++;\n \
    \       }\n        if ($right > $left) {\n            return \"No\";\n       \
    \ }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $left++;\n        } else {\n            $right++;\n \
    \       }\n        if ($right > $left) {\n            return \"No\";\n       \
    \ }\n    }\n    return \"Yes\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5ihphau.php:69\n\
    Stack trace:\n#0 /tmp/tmpr5ihphau.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpr5ihphau.php\
    \ on line 69\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkxm21yw.php:53\n\
    Stack trace:\n#0 /tmp/tmpvkxm21yw.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpvkxm21yw.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo_q62dt.php:51\n\
    Stack trace:\n#0 /tmp/tmpjo_q62dt.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjo_q62dt.php\
    \ on line 51\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7htxcahp.php:53\n\
    Stack trace:\n#0 /tmp/tmp7htxcahp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7htxcahp.php\
    \ on line 53\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p0toyem.php:51\n\
    Stack trace:\n#0 /tmp/tmp0p0toyem.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp0p0toyem.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkvcsbul.php:47\n\
    Stack trace:\n#0 /tmp/tmplkvcsbul.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplkvcsbul.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open > 0 && $str2_open\
    \ > 0) {\n    return \"No\";\n  } else if ($str1_open < 0 && $str2_open < 0) {\n\
    \    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsu7_s792.php:52\n\
    Stack trace:\n#0 /tmp/tmpsu7_s792.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpsu7_s792.php\
    \ on line 52\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    if ($left ==\
    \ $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisizk_gp.php:47\n\
    Stack trace:\n#0 /tmp/tmpisizk_gp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpisizk_gp.php\
    \ on line 47\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count\
    \ = 0;\n    $s2_count = 0;\n    for ($i = 0; $i < strlen($s1); $i++) {\n     \
    \   if ($s1[$i] == '(') {\n            $s1_count++;\n        } else {\n      \
    \      $s1_count--;\n        }\n    }\n    for ($i = 0; $i < strlen($s2); $i++)\
    \ {\n        if ($s2[$i] == '(') {\n            $s2_count++;\n        } else {\n\
    \            $s2_count--;\n        }\n    }\n    if ($s1_count == 0 && $s2_count\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi4wq52m.php:45\n\
    Stack trace:\n#0 /tmp/tmpyi4wq52m.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpyi4wq52m.php\
    \ on line 45\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ixzzmo.php:50\n\
    Stack trace:\n#0 /tmp/tmpw7ixzzmo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw7ixzzmo.php\
    \ on line 50\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaug3928v.php:51\n\
    Stack trace:\n#0 /tmp/tmpaug3928v.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpaug3928v.php\
    \ on line 51\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open == 0 && $str2_open < 0)\
    \ {\n    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open == 0) {\n\
    \    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open < 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb584dcft.php:53\n\
    Stack trace:\n#0 /tmp/tmpb584dcft.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpb584dcft.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxecyhwb.php:49\n\
    Stack trace:\n#0 /tmp/tmprxecyhwb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprxecyhwb.php\
    \ on line 49\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew9wr1z.php:53\n\
    Stack trace:\n#0 /tmp/tmpiew9wr1z.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpiew9wr1z.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0) {\n\
    \        if ($str2_open > 0) {\n            return \"No\";\n        } else {\n\
    \            return \"Yes\";\n        }\n    } else {\n        if ($str2_open\
    \ > 0) {\n            return \"Yes\";\n        } else {\n            return \"\
    No\";\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1j08jxxz.php:57\n\
    Stack trace:\n#0 /tmp/tmp1j08jxxz.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp1j08jxxz.php\
    \ on line 57\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oknlmpq.php:47\n\
    Stack trace:\n#0 /tmp/tmp7oknlmpq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7oknlmpq.php\
    \ on line 47\n"
  timestamp: 1659730526
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $diff = $str1_open - $str1_close;\n            if ($str2_open\
    \ >= $diff) {\n                return \"Yes\";\n            } else {\n       \
    \         return \"No\";\n            }\n        } elseif ($str1_open < $str1_close)\
    \ {\n            $diff = $str1_close - $str1_open;\n            if ($str2_close\
    \ >= $diff) {\n                return \"Yes\";\n            } else {\n       \
    \         return \"No\";\n            }\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5uy3sf4.php:53\n\
    Stack trace:\n#0 /tmp/tmpa5uy3sf4.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpa5uy3sf4.php\
    \ on line 53\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open == 0) {\n        return \"No\";\n    } else if ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open + $str2_open == 0) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmy4g60u.php:64\n\
    Stack trace:\n#0 /tmp/tmpgmy4g60u.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpgmy4g60u.php\
    \ on line 64\n"
  timestamp: 1659794409
- exit_code: 255
  program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo_q62dt.php:51\n\
    Stack trace:\n#0 /tmp/tmpjo_q62dt.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjo_q62dt.php\
    \ on line 51\n"
  timestamp: 1659730526
