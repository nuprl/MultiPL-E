language: php
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$b = abs($a);\n\t$c = round(pow($b,\
    \ 1/3));\n\tif ($c * $c * $c == $b) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $b = $a;\n    while ($b > 0) {\n        if ($b == 1) {\n            return\
    \ true;\n        }\n        if ($b % 3 != 0) {\n            return false;\n  \
    \      }\n        $b = $b / 3;\n    }\n    return true;\n}\n\necho iscube(1) .\
    \ \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7ec9ngq.php:46\n\
    Stack trace:\n#0 /tmp/tmpi7ec9ngq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpi7ec9ngq.php\
    \ on line 46\n"
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $c = pow($a, 1/3);\n    if (is_int($c)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrclwg44.php:37\n\
    Stack trace:\n#0 /tmp/tmpjrclwg44.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjrclwg44.php\
    \ on line 37\n"
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $b = round(pow($a, 1/3));\n    if ($b * $b * $b == $a) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i <= $a) {\n        if ($i\
    \ * $i * $i == $a) {\n            return true;\n        }\n        $i++;\n   \
    \ }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    for ($i = 1; $i < $a; $i++) {\n        if ($i * $i * $i ==\
    \ $a) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qbwi506.php:38\n\
    Stack trace:\n#0 /tmp/tmp_qbwi506.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_qbwi506.php\
    \ on line 38\n"
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    } elseif ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $b = round(pow($a, 1/3));\n    if ($b * $b * $b == $a) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = $a;\n\t$c = 0;\n\twhile ($b > 0) {\n\t\t$c++;\n\t\t$b = $b / 2;\n\t}\n\t\
    $d = pow(2, $c);\n\tif ($d == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hex29e2.php:43\n\
    Stack trace:\n#0 /tmp/tmp0hex29e2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0hex29e2.php\
    \ on line 43\n"
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == pow(round(pow($a, 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxy74hew6.php:35\n\
    Stack trace:\n#0 /tmp/tmpxy74hew6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxy74hew6.php\
    \ on line 35\n"
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$cube = pow($a, 1/3);\n\tif(is_int($cube)) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp043ulx_n.php:37\n\
    Stack trace:\n#0 /tmp/tmp043ulx_n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp043ulx_n.php\
    \ on line 37\n"
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    $b = abs($a);\n    $c =\
    \ round(pow($b, 1/3));\n    if ($c * $c * $c == $b) {\n        return true;\n\
    \    }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  return $a == 0 ? true : $a == 1 ? true : $a == -1 ? true : $a == 8 ? true :\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvucg9kr3.php:30\n\
    Stack trace:\n#0 /tmp/tmpvucg9kr3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvucg9kr3.php\
    \ on line 30\n"
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $root = round(pow($a, 1/3));\n    return $root * $root *\
    \ $root == $a;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$result = false;\n\tif ($a == 0) {\n\t\t$result = true;\n\t} else {\n\t\t$i\
    \ = 1;\n\t\twhile ($i * $i * $i <= abs($a)) {\n\t\t\tif ($i * $i * $i == abs($a))\
    \ {\n\t\t\t\t$result = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\
    \tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $x = 1;\n    while ($x * $x * $x < $a) {\n        $x++;\n\
    \    }\n    if ($x * $x * $x == $a) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i <= $a) {\n        if ($i\
    \ * $i * $i == $a) {\n            return true;\n        }\n        $i++;\n   \
    \ }\n    return false;\n}\n\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\n\
    echo iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = $a;\n\t$c = 0;\n\twhile ($b > 0) {\n\t\t$c++;\n\t\t$b = $b / 2;\n\t}\n\t\
    if ($c % 3 == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    echo iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmq3tecdl.php:42\n\
    Stack trace:\n#0 /tmp/tmpmq3tecdl.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpmq3tecdl.php\
    \ on line 42\n"
  timestamp: 1659730487
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $cube = $a * $a * $a;\n    if ($cube == $a) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\n\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvqa4yui.php:42\n\
    Stack trace:\n#0 /tmp/tmpbvqa4yui.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbvqa4yui.php\
    \ on line 42\n"
  timestamp: 1659730487
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\
    \tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730487
