name: HumanEval_100_make_a_pile
language: php
prompt: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n// The first level has n stones.\n// The number of stones in the next\
  \ level is:\n// - the next odd number if n is odd.\n// - the next even number if\
  \ n is even.\n// Return the number of stones in each level in a list, where element\
  \ at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n\
  // >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n) {\n"
tests: "function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12, 14,\
  \ 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(8,\
  \ 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n\
    \ = $n % 2 == 0 ? $n - 1 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n", "    $pile = array($n);\n    while ($n > 1) {\n        $n = ($n % 2 == 0)\
    \ ? $n / 2 : ($n + 1) / 2;\n        $pile[] = $n;\n    }\n    return $pile;\n\
    }\n", "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n\
    \ % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n  \
    \  }\n    $result[] = $n;\n  }\n  return $result;\n}\n", "  $result = array();\n\
    \  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n", "    $result = array();\n\
    \    $result[] = $n;\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}", " \
    \   $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n   \
    \     if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n       \
    \     $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n", "    $result = array();\n    $result[] = $n;\n    while ($n\
    \ > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else\
    \ {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n", "    $result = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
  "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 ==\
    \ 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n + 2 * $i;\n    }\n    return $result;\n}\n", "    $result = array();\n  \
    \  $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "  $result = array();\n\
    \  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n", "    $result = array();\n    $result[] = $n;\n \
    \   while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n \
    \       } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "    $result = array();\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n - 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "  $result = array();\n  $result[]\
    \ = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    }\
    \ else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n", "    $pile = array($n);\n    while ($n > 1) {\n        $n =\
    \ ($n % 2 == 0) ? $n - 1 : $n - 2;\n        $pile[] = $n;\n    }\n    return $pile;\n\
    }\n", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n", "    $result = array();\n\
    \    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n   \
    \     $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
