name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n//\
  \ >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$digits = str_split($n);\n\t$odd_digits = array_filter($digits, function($digit)\
    \ {\n\t\treturn $digit % 2 !== 0;\n\t});\n\tif (count($odd_digits) === 0) {\n\t\
    \treturn 0;\n\t}\n\treturn array_product($odd_digits);\n}\n\necho digits(1) .\
    \ PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits\
    \ = str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 == 1;\n    });\n    return array_product($odd_digits);\n\
    }", "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n     \
    \   if ($digit % 2 != 0) {\n            $result *= $digit;\n        }\n      \
    \  $n = floor($n / 10);\n    }\n    return $result;\n}", "    $digits = str_split($n);\n\
    \    $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $product *= $n[$i];\n \
    \       }\n    }\n    return $product;\n}\necho digits(1);\necho \"\\n\";\necho\
    \ digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\";", "    $digits =\
    \ str_split($n);\n    $odd_digits = [];\n    foreach ($digits as $digit) {\n \
    \       if ($digit % 2 != 0) {\n            $odd_digits[] = $digit;\n        }\n\
    \    }\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n    return\
    \ array_product($odd_digits);\n}", "    $odds = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $number) {\n        if ($number % 2 == 1) {\n            $odds\
    \ *= $number;\n        }\n    }\n    return $odds;\n}\necho digits(235);", " \
    \   $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if\
    \ ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n        $n\
    \ = floor($n / 10);\n    }\n    return $product;\n}\n", "    $digits = str_split($n);\n\
    \    $odd_digits = [];\n    foreach ($digits as $digit) {\n        if ($digit\
    \ % 2 !== 0) {\n            $odd_digits[] = $digit;\n        }\n    }\n    if\
    \ (count($odd_digits) === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $n = str_split($n);\n    $odd = [];\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 !== 0) {\n            $odd[] = $num;\n        }\n    }\n    if (count($odd)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd);\n}\n", " \
    \   $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_reduce($odd_digits, function($acc,\
    \ $digit) {\n        return $acc * $digit;\n    }, 1);\n}\n", "    $sum = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $key => $value) {\n        if ($value\
    \ % 2 != 0) {\n            $sum *= $value;\n        }\n    }\n    return $sum;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    return array_product($odds);\n\
    }\n", "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $product *= $n[$i];\n \
    \       }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $digits = str_split($n);\n  \
    \  $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2 ==\
    \ 1) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\n", "    $odd_digits = [];\n    $n_string = strval($n);\n    $n_array = str_split($n_string);\n\
    \    foreach ($n_array as $digit) {\n        if ($digit % 2 != 0) {\n        \
    \    array_push($odd_digits, $digit);\n        }\n    }\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    } else {\n        return array_product($odd_digits);\n\
    \    }\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i <\
    \ strlen($n); $i++) {\n        if ($n[$i] % 2 == 1) {\n            $product *=\
    \ $n[$i];\n        }\n    }\n    return $product;\n}", "    $str = strval($n);\n\
    \    $arr = str_split($str);\n    $product = 1;\n    foreach ($arr as $num) {\n\
    \        if ($num % 2 == 1) {\n            $product *= $num;\n        }\n    }\n\
    \    return $product;\n}\n", "    $product = 1;\n    $n = str_split($n);\n   \
    \ foreach ($n as $digit) {\n        if ($digit % 2 == 1) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\necho digits(1) . \"\\\
    n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
