language: go_test.go
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i * i <= n; i += 2 {\n        for\
    \ n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n\
    \        }\n    }\n    if n > 2 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n > 1 {\n        for i := 2; i <= n; i++ {\n\
    \            if n % i == 0 {\n                factors = append(factors, i)\n \
    \               n = n / i\n                break\n            }\n        }\n \
    \   }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i * i <= n; i += 2 {\n        for\
    \ n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n\
    \        }\n    }\n    if n > 2 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    return []int{}\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpe4cwa6p__test.go:41: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpe4cwa6p__test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpe4cwa6p__test.go:41: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpe4cwa6p__test.go:41:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpe4cwa6p__test.go:41: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n \
    \       tmpe4cwa6p__test.go:41: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpe4cwa6p__test.go:41: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n \
    \       tmpe4cwa6p__test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    result := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            result = append(result, i)\n            n /= i\n        }\n \
    \   }\n    return result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n > 1 {\n        for i := 2; i <= n; i++ {\n\
    \            if n % i == 0 {\n                factors = append(factors, i)\n \
    \               n = n / i\n                break\n            }\n        }\n \
    \   }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    result := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            result = append(result, i)\n            n /= i\n        }\n \
    \   }\n    return result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i <= n; i += 2 {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    if n == 1 {\n        return []int{}\n    }\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            return append([]int{i}, factorize(n / i)...)\n\
    \        }\n    }\n    return []int{}\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i * i <= n; i += 2 {\n        for\
    \ n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n\
    \        }\n    }\n    if n > 2 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    // TODO: implement this function\n    return []int{}\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpmhr5whv1_test.go:42: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpmhr5whv1_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpmhr5whv1_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpmhr5whv1_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpmhr5whv1_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n \
    \       tmpmhr5whv1_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpmhr5whv1_test.go:42: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n \
    \       tmpmhr5whv1_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i <= n; i += 2 {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i <= n; i += 2 {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    if n == 1 {\n        return []int{}\n    }\n    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return append([]int{i}, factorize(n / i)...)\n\
    \        }\n    }\n    return []int{n}\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0\
    \ {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074098
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n\
    \    var result []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n\
    \            result = append(result, i)\n            n /= i\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074098
