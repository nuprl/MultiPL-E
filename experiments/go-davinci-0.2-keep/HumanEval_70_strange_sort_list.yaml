name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1,\
  \ 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([])\
  \ == []\nfunc strange_sort_list(lst []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n\
    \    var min, max int\n    var min_index, max_index int\n    for i, v := range\
    \ lst {\n        if i == 0 {\n            min = v\n            max = v\n     \
    \       min_index = 0\n            max_index = 0\n        } else {\n         \
    \   if v < min {\n                min = v\n                min_index = i\n   \
    \         }\n            if v > max {\n                max = v\n             \
    \   max_index = i\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    if len(lst) == 1 {\n        return result\n    }\n    if min_index\
    \ < max_index {\n        result = append(result, max)\n        if len(lst) ==\
    \ 2 {\n            return result\n        }\n        result = append(result, strange_sort_list(lst[1:max_index])...)\n\
    \        result = append(result, strange_sort_list(lst[max_index+1:])...)\n  \
    \  } else {\n        result = append(result, strange_sort_list(lst[1:min_index])...)\n\
    \        result = append(result, strange_sort_list(lst[min_index+1:])...)\n  \
    \      result = append(result, max)\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n   \
    \ result[0] = lst[0]\n    lst = lst[1:]\n    for i := 1; i < len(result); i++\
    \ {\n        if i % 2 == 1 {\n            result[i] = max(lst)\n        } else\
    \ {\n            result[i] = min(lst)\n        }\n    }\n    return result\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    var min, max int\n    min, max = lst[0], lst[0]\n    for _,\
    \ v := range lst {\n        if v < min {\n            min = v\n        }\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    var result []int\n\
    \    result = append(result, min)\n    for len(lst) > 1 {\n        if lst[0] ==\
    \ min {\n            lst = lst[1:]\n        }\n        if lst[len(lst)-1] == max\
    \ {\n            lst = lst[:len(lst)-1]\n        }\n        if len(lst) > 0 {\n\
    \            result = append(result, max)\n            result = append(result,\
    \ min)\n        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n \
    \       return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i\
    \ := range lst {\n        if i < min {\n            min = i\n        }\n     \
    \   if i > max {\n            max = i\n        }\n    }\n    res := []int{min}\n\
    \    for {\n        if len(lst) == 1 {\n            break\n        }\n       \
    \ max = lst[0]\n        for _, i := range lst {\n            if i > max {\n  \
    \              max = i\n            }\n        }\n        res = append(res, max)\n\
    \        lst = remove(lst, max)\n        if len(lst) == 1 {\n            break\n\
    \        }\n        min = lst[0]\n        for _, i := range lst {\n          \
    \  if i < min {\n                min = i\n            }\n        }\n        res\
    \ = append(res, min)\n        lst = remove(lst, min)\n    }\n    res = append(res,\
    \ lst[0])\n    return res\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    var result []int\n    var min, max int\n    for len(lst) > 0 {\n \
    \       min, max = find_min_max(lst)\n        result = append(result, min)\n \
    \       if min != max {\n            result = append(result, max)\n        }\n\
    \        lst = remove_from_list(lst, min)\n        lst = remove_from_list(lst,\
    \ max)\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    if min == max {\n        return\
    \ lst\n    }\n    var result []int\n    var odd bool\n    for len(lst) > 0 {\n\
    \        if odd {\n            result = append(result, max)\n            lst =\
    \ remove(lst, max)\n            odd = false\n        } else {\n            result\
    \ = append(result, min)\n            lst = remove(lst, min)\n            odd =\
    \ true\n        }\n    }\n    return result\n}\n", "    var result []int\n   \
    \ for len(lst) > 0 {\n        min, max := min_max(lst)\n        result = append(result,\
    \ min)\n        if min != max {\n            result = append(result, max)\n  \
    \      }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n   \
    \ }\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n  \
    \  }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n    \
    \    if v < min {\n            min = v\n        }\n        if v > max {\n    \
    \        max = v\n        }\n    }\n    if min == max {\n        return lst\n\
    \    }\n    res := []int{min}\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] == min {\n            continue\n        }\n        res = append(res,\
    \ lst[i])\n    }\n    res = append(res, max)\n    for i := len(lst) - 1; i >=\
    \ 0; i-- {\n        if lst[i] == max {\n            continue\n        }\n    \
    \    res = append(res, lst[i])\n    }\n    return res\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    min_index := 0\n \
    \   max := lst[0]\n    max_index := 0\n    for i, v := range lst {\n        if\
    \ v < min {\n            min = v\n            min_index = i\n        }\n     \
    \   if v > max {\n            max = v\n            max_index = i\n        }\n\
    \    }\n    if min_index < max_index {\n        lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n        lst = append(lst[:max_index-1], lst[max_index:]...)\n\
    \    } else {\n        lst = append(lst[:max_index], lst[max_index+1:]...)\n \
    \       lst = append(lst[:min_index-1], lst[min_index:]...)\n    }\n    return\
    \ append([]int{min, max}, strange_sort_list(lst)...)\n}\n", "    if len(lst) ==\
    \ 0 {\n        return lst\n    }\n    var result []int\n    var min, max int\n\
    \    for {\n        min, max = minMax(lst)\n        result = append(result, min)\n\
    \        if min == max {\n            break\n        }\n        result = append(result,\
    \ max)\n        if len(lst) == 2 {\n            break\n        }\n    }\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    var result []int\n    var min, max int\n    min = lst[0]\n \
    \   max = lst[0]\n    for _, v := range lst {\n        if v < min {\n        \
    \    min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, max)\n \
    \   for _, v := range lst {\n        if v != min && v != max {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n   \
    \ result[0] = lst[0]\n    lst = lst[1:]\n    for i := 1; i < len(result); i +=\
    \ 2 {\n        result[i] = lst[len(lst) - 1]\n        lst = lst[:len(lst) - 1]\n\
    \        if len(lst) == 0 {\n            break\n        }\n        result[i +\
    \ 1] = lst[0]\n        lst = lst[1:]\n    }\n    return result\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var min,\
    \ max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n      \
    \  result = append(result, min)\n        if min != max {\n            result =\
    \ append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    if len(lst) == 1 {\n        return lst\n    }\n    if len(lst) ==\
    \ 2 {\n        if lst[0] > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n\
    \        }\n        return lst\n    }\n    var result []int\n    var min, max\
    \ int\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            min\
    \ = lst[i]\n            max = lst[i]\n        } else {\n            if lst[i]\
    \ < min {\n                min = lst[i]\n            }\n            if lst[i]\
    \ > max {\n                max = lst[i]\n            }\n        }\n    }\n   \
    \ result = append(result, min)\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] == min {\n            continue\n        }\n        if lst[i] == max {\n\
    \            result = append(result, max)\n            continue\n        }\n \
    \       result = append(result, lst[i])\n    }\n    return result\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    res := []int{min}\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] != min {\n            res = append(res,\
    \ lst[i])\n        }\n    }\n    res = append(res, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] != max {\n            res = append(res, lst[i])\n \
    \       }\n    }\n    return res\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    var min, max int\n    for i, v := range lst {\n        if i\
    \ == 0 {\n            min = v\n            max = v\n        } else {\n       \
    \     if v < min {\n                min = v\n            }\n            if v >\
    \ max {\n                max = v\n            }\n        }\n    }\n    var res\
    \ []int\n    res = append(res, min)\n    var min_lst, max_lst []int\n    for _,\
    \ v := range lst {\n        if v != min {\n            if v < max {\n        \
    \        min_lst = append(min_lst, v)\n            } else {\n                max_lst\
    \ = append(max_lst, v)\n            }\n        }\n    }\n    for len(min_lst)\
    \ > 0 && len(max_lst) > 0 {\n        res = append(res, max_lst[0])\n        res\
    \ = append(res, min_lst[0])\n        min_lst = min_lst[1:]\n        max_lst =\
    \ max_lst[1:]\n    }\n    if len(min_lst) > 0 {\n        res = append(res, min_lst...)\n\
    \    }\n    if len(max_lst) > 0 {\n        res = append(res, max_lst...)\n   \
    \ }\n    return res\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    var result []int\n    var min, max int\n    for len(lst) > 0 {\n        min,\
    \ max = getMinMax(lst)\n        result = append(result, min)\n        if min !=\
    \ max {\n            result = append(result, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var min,\
    \ max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n       \
    \ for _, v := range lst {\n            if v < min {\n                min = v\n\
    \            }\n            if v > max {\n                max = v\n          \
    \  }\n        }\n        result = append(result, min)\n        result = append(result,\
    \ max)\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n    }\n\
    \    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
