name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement\n    return 0\n}\n", "    var largest int\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest =\
    \ i\n            n /= i\n            i--\n        }\n    }\n    return largest\n\
    }\n", "    // Start with the smallest prime number, 2.\n    // If n is divisible\
    \ by 2, then n is even.\n    // In that case, divide n by 2 and continue.\n  \
    \  // If n is not divisible by 2, then n is odd.\n    // In that case, try the\
    \ next prime number, 3.\n    // If n is divisible by 3, then divide n by 3 and\
    \ continue.\n    // If n is not divisible by 3, then try the next prime number,\
    \ 5.\n    // If n is divisible by 5, then divide n by 5 and continue.\n    //\
    \ If n is not divisible by 5, then try the next prime number, 7.\n    // If n\
    \ is divisible by 7, then divide n by 7 and continue.\n    // If n is not divisible\
    \ by 7, then try the next prime number, 11.\n    // If n is divisible by 11, then\
    \ divide n by 11 and continue.\n    // If n is not divisible by 11, then try the\
    \ next prime number, 13.\n    // If n is divisible by 13, then divide n by 13\
    \ and continue.\n    // If n is not divisible by 13, then try the next prime number,\
    \ 17.\n    // If n is divisible by 17, then divide n by 17 and continue.\n   \
    \ // If n is not divisible by 17, then try the next prime number, 19.\n    //\
    \ If n is divisible by 19, then divide n by 19 and continue.\n    // If n is not\
    \ divisible by 19, then try the next prime number, 23.\n    // If n is divisible\
    \ by 23, then divide n by 23 and continue.\n    // If n is not divisible by 23,\
    \ then try the next prime number, 29.\n    // If n is divisible by 29, then divide\
    \ n by 29 and continue.\n    // If n is not divisible by 29, then try the next\
    \ prime number, 31.\n    // If n is divisible by 31, then divide n by 31 and continue.\n\
    \    // If n is not divisible by 31, then try the next prime number, 37.\n   \
    \ // If n is divisible by 37, then divide n by 37 and continue.\n    // If n is\
    \ not divisible by 37, then try the next prime number,", "    // TODO: implement\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    // Start\
    \ with the smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n     \
    \   for n % factor == 0 {\n            n /= factor\n        }\n        factor\
    \ += 1\n    }\n    return factor - 1\n}\n", "    for i := 2; i < n; i++ {\n  \
    \      if n % i == 0 {\n            return largest_prime_factor(n / i)\n     \
    \   }\n    }\n    return n\n}\n", "    // TODO: Implement me!\n    return 0\n\
    }\n", "    // TODO: implement\n    return 0\n}\n", "    var largest_prime int\
    \ = 1\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            largest_prime\
    \ = i\n            n = n / i\n            i = 1\n        }\n    }\n    return\
    \ largest_prime\n}\n", "    // Find the largest prime factor of n.\n    //\n \
    \   // We start with the largest possible prime factor, which is n/2.\n    //\
    \ If n/2 is a factor, then we are done.\n    // If n/2 is not a factor, then we\
    \ can reduce the search space by\n    // half.\n    //\n    // We can continue\
    \ to reduce the search space by half until we find\n    // a factor.\n    //\n\
    \    // We can stop the search when we reach the square root of n.\n    //\n \
    \   // We can skip even numbers, since all even numbers are divisible by 2.\n\
    \    //\n    // We can skip numbers that are not prime.\n    //\n    // We can\
    \ skip numbers that are not factors.\n    //\n    // We can skip numbers that\
    \ are not prime factors.\n    //\n    // We can skip numbers that are not prime\
    \ factors of n.\n    //\n    // We can skip numbers that are not prime factors\
    \ of n and are not\n    // less than the square root of n.\n    //\n    // We\
    \ can skip numbers that are not prime factors of n and are not\n    // less than\
    \ the square root of n and are not odd.\n    //\n    // We can skip numbers that\
    \ are not prime factors of n and are not\n    // less than the square root of\
    \ n and are not odd and are not prime.\n    //\n    // We can skip numbers that\
    \ are not prime factors of n and are not\n    // less than the square root of\
    \ n and are not odd and are not prime\n    // and are not factors of n.\n    //\n\
    \    // We can skip numbers that are not prime factors of n and are not\n    //\
    \ less than the square root of n and are not odd and are not prime\n    // and\
    \ are not factors of n and are not prime factors of n.\n    //\n    // We can\
    \ skip numbers that are not prime factors of n and are not\n    // less than the\
    \ square root of n and are not odd and are not prime\n    // and are not factors\
    \ of n and are not prime factors of n and are\n    // not less than the square\
    \ root of n.\n    //\n    // We can skip numbers that are not prime factors of\
    \ n and are not\n    // less than the square root of n and are", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // The next smallest prime factor is the next odd number.\n\
    \        factor += 2\n    }\n    return factor\n}\n", "    var largest_prime int\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest_prime\
    \ = i\n            n /= i\n            i--\n        }\n    }\n    return largest_prime\n\
    }\n", "    // Start with the smallest prime factor, 2.\n    factor := 2\n    //\
    \ Keep going until we have no more factors.\n    for n > 1 {\n        // If factor\
    \ is a factor of n, divide n by factor and keep going.\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        // Otherwise, increment\
    \ factor by 1 and try again.\n        factor += 1\n    }\n    // The last factor\
    \ is the largest prime factor.\n    return factor\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var largest\
    \ int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest\
    \ = i\n            n /= i\n            i--\n        }\n    }\n    return largest\n\
    }\n", "    var i int = 2\n    for ; i < n; i++ {\n        if n % i == 0 {\n  \
    \          n /= i\n            i--\n        }\n    }\n    return i\n}\n", "  \
    \  if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n    \
    \        return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    var i int = 2\n    for i * i <= n {\n        if n % i == 0 {\n    \
    \        n /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ n\n}\n", "    // Start with the smallest prime factor, 2.\n    factor := 2\n\
    \    for n > 1 {\n        for n % factor == 0 {\n            n /= factor\n   \
    \     }\n        factor += 1\n    }\n    return factor - 1\n}\n", "    // TODO\n\
    \    return 0\n}\n", "    // TODO\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    // TODO: implement me\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // TODO: implement this function\n    return 0\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // Start\
    \ with the smallest prime factor.\n    factor := 2\n    for n > 1 {\n        for\
    \ n % factor == 0 {\n            n /= factor\n        }\n        factor += 1\n\
    \    }\n    return factor - 1\n}\n", "    // Start with the smallest prime factor,\
    \ 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible by factor,\
    \ divide it out.\n        for n % factor == 0 {\n            n /= factor\n   \
    \     }\n        // Move on to the next prime factor.\n        factor += 1\n \
    \   }\n    return factor\n}\n", "    // Find the largest prime factor of n.\n\
    \    //\n    // We can find the largest prime factor of n by starting with the\
    \ smallest\n    // prime factor of n, and then iterating through the remaining\
    \ prime factors\n    // of n.\n    //\n    // The smallest prime factor of n is\
    \ the smallest prime number that divides\n    // n.\n    //\n    // The remaining\
    \ prime factors of n are the prime factors of n that are\n    // greater than\
    \ the smallest prime factor of n.\n    //\n    // The largest prime factor of\
    \ n is the largest prime factor of the\n    // remaining prime factors of n.\n\
    \    //\n    // We can find the smallest prime factor of n by iterating through\
    \ the\n    // primes less than n, and finding the first prime that divides n.\n\
    \    //\n    // We can find the remaining prime factors of n by dividing n by\
    \ the\n    // smallest prime factor of n.\n    //\n    // We can find the largest\
    \ prime factor of the remaining prime factors of n\n    // by recursively calling\
    \ largest_prime_factor on the remaining prime\n    // factors of n.\n    //\n\
    \    // We can find the primes less than n by iterating through the numbers less\n\
    \    // than n, and finding the numbers that are prime.\n    //\n    // We can\
    \ find the numbers that are prime by iterating through the numbers\n    // less\
    \ than the number, and finding the numbers that divide the number.\n    //\n \
    \   // We can find the numbers that divide the number by iterating through the\n\
    \    // numbers less than the number, and finding the numbers that have a\n  \
    \  // remainder of 0 when divided by the number.\n    //\n    // We can find the\
    \ numbers that have a remainder of 0 when divided by the\n    // number by using\
    \ the modulo operator.\n    //\n    // We can find the numbers less than the number\
    \ by iterating through the\n    // numbers from 2 to the number.\n    //\n   \
    \ // We can iterate through the numbers from 2 to the number by using a for\n\
    \    // loop.\n    //\n    // We can iterate through the numbers less than n by\
    \ using a for loop.\n    //\n    // We can iterate through the primes less than\
    \ n by using a for loop.\n    //\n    // We can", "    // Start with the smallest\
    \ prime factor.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        if n % factor == 0 {\n            n /= factor\n\
    \        } else {\n            // Otherwise, increment factor.\n            factor\
    \ += 1\n        }\n    }\n    return factor\n}\n", "    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return largest_prime_factor(n / i)\n\
    \        }\n    }\n    return n\n}\n", "    var i int = 2\n    var largest int\
    \ = 1\n    for i * i <= n {\n        if n % i == 0 {\n            largest = i\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    if n > 1 {\n        largest = n\n    }\n    return largest\n}\n", "    //\
    \ Find the largest prime factor of n.\n    //\n    // The largest prime factor\
    \ of n is the largest prime number that divides n.\n    //\n    // The largest\
    \ prime factor of n is the largest prime number that divides n\n    // and is\
    \ less than or equal to the square root of n.\n    //\n    // The largest prime\
    \ factor of n is the largest prime number that divides n\n    // and is less than\
    \ or equal to the square root of n.\n    //\n    // The largest prime factor of\
    \ n is the largest prime number that divides n\n    // and is less than or equal\
    \ to the square root of n.\n    //\n    // The largest prime factor of n is the\
    \ largest prime number that divides n\n    // and is less than or equal to the\
    \ square root of n.\n    //\n    // The largest prime factor of n is the largest\
    \ prime number that divides n\n    // and is less than or equal to the square\
    \ root of n.\n    //\n    // The largest prime factor of n is the largest prime\
    \ number that divides n\n    // and is less than or equal to the square root of\
    \ n.\n    //\n    // The largest prime factor of n is the largest prime number\
    \ that divides n\n    // and is less than or equal to the square root of n.\n\
    \    //\n    // The largest prime factor of n is the largest prime number that\
    \ divides n\n    // and is less than or equal to the square root of n.\n    //\n\
    \    // The largest prime factor of n is the largest prime number that divides\
    \ n\n    // and is less than or equal to the square root of n.\n    //\n    //\
    \ The largest prime factor of n is the largest prime number that divides n\n \
    \   // and is less than or equal to the square root of n.\n    //\n    // The\
    \ largest prime factor of n is the largest prime number that divides n\n    //\
    \ and is less than or equal to the square root of n.\n    //\n    // The largest\
    \ prime factor of n is the largest prime number that divides n\n    // and is\
    \ less than or equal to the square root of n.\n    //\n    // The largest prime\
    \ factor of n is the largest prime number that divides n\n    // and is less than\
    \ or equal to the square root of n.\n    //\n    // The largest prime factor of\
    \ n", "    var largest_prime int\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            largest_prime = i\n            n /= i\n            i\
    \ = 1\n        }\n    }\n    return largest_prime\n}\n", "    // TODO\n    return\
    \ 0\n}\n", "    if n <= 1 {\n        return 0\n    }\n\n    var largest_prime\
    \ int = 0\n    var i int = 2\n    for i < n {\n        if n % i == 0 {\n     \
    \       largest_prime = i\n            n = n / i\n        } else {\n         \
    \   i++\n        }\n    }\n\n    if n > largest_prime {\n        largest_prime\
    \ = n\n    }\n\n    return largest_prime\n}\n", "    var i int = 2\n    var largest_prime\
    \ int = 0\n    for i * i <= n {\n        if n % i == 0 {\n            n /= i\n\
    \            largest_prime = i\n        } else {\n            i += 1\n       \
    \ }\n    }\n    if n > largest_prime {\n        largest_prime = n\n    }\n   \
    \ return largest_prime\n}\n", "    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n \
    \   return n\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", "    var\
    \ i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // TODO:\
    \ implement me\n    return 0\n}\n", "    // Start with the smallest prime number.\n\
    \    p := 2\n    for n > 1 {\n        if n % p == 0 {\n            n /= p\n  \
    \      } else {\n            p += 1\n        }\n    }\n    return p\n}\n", " \
    \   // TODO: implement\n    return 0\n}\n", "    // TODO: implement this function\n\
    \    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    var largest_prime int\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest_prime = i\n            n = n / i\n            i = 1\n\
    \        }\n    }\n    return largest_prime\n}\n", "    var i int\n    var largest\
    \ int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            largest\
    \ = i\n            n = n / i\n            i = 1\n        }\n    }\n    return\
    \ largest\n}\n", "    var factor int = 2\n    for n > 1 {\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        factor += 1\n    }\n   \
    \ return factor - 1\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n     \
    \   if n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n\
    \    }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "   \
    \ // Start with the smallest prime factor.\n    factor := 2\n    // Keep track\
    \ of the largest prime factor.\n    largest := 0\n    // Keep track of the number\
    \ of times the factor divides n.\n    count := 0\n    // Keep track of the current\
    \ value of n.\n    current := n\n    // Keep track of the current value of the\
    \ factor.\n    current_factor := factor\n    // Keep track of the current value\
    \ of the largest prime factor.\n    current_largest := largest\n    // Keep track\
    \ of the current value of the count.\n    current_count := count\n    // Keep\
    \ track of the current value of the product of the factors.\n    current_product\
    \ := 1\n    // Keep track of the current value of the product of the largest prime\
    \ factors.\n    current_largest_product := 1\n    // Keep track of the current\
    \ value of the product of the factors.\n    current_factor_product := 1\n    //\
    \ Keep track of the current value of the product of the largest prime factors.\n\
    \    current_largest_factor_product := 1\n    // Keep track of the current value\
    \ of the product of the factors.\n    current_factor_count := 1\n    // Keep track\
    \ of the current value of the product of the largest prime factors.\n    current_largest_factor_count\
    \ := 1\n    // Keep track of the current value of the product of the factors.\n\
    \    current_factor_count_product := 1\n    // Keep track of the current value\
    \ of the product of the largest prime factors.\n    current_largest_factor_count_product\
    \ := 1\n    // Keep track of the current value of the product of the factors.\n\
    \    current_factor_count_product_product := 1\n    // Keep track of the current\
    \ value of the product of the largest prime factors.\n    current_largest_factor_count_product_product\
    \ := 1\n    // Keep track of the current value of the product of the factors.\n\
    \    current_factor_count_product_product_product := 1\n    // Keep track of the\
    \ current value of the product of the largest prime factors.\n    current_largest_factor_count_product_product_product\
    \ := 1\n    // Keep track of the current value of the product of the factors.\n\
    \    current_factor_count_product_product_product_product := 1\n    // Keep track",
  "    var largest int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           largest = i\n            n /= i\n            i--\n        }\n    }\n\
    \    return largest\n}\n", "    // TODO\n    return 0\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement me\n   \
    \ return 0\n}\n", "    // Initialize the largest prime factor to 1.\n    largest_prime_factor\
    \ := 1\n\n    // Start with the smallest prime factor and work up.\n    for i\
    \ := 2; i <= n; i++ {\n        // If i is a factor of n, then it is a prime factor.\n\
    \        if n % i == 0 {\n            // If i is larger than the current largest\
    \ prime factor, then\n            // update the largest prime factor.\n      \
    \      if i > largest_prime_factor {\n                largest_prime_factor = i\n\
    \            }\n\n            // Divide n by i to remove all factors of i from\
    \ n.\n            n /= i\n\n            // Reset i to 2 so that we can check for\
    \ more factors of i.\n            i = 1\n        }\n    }\n\n    return largest_prime_factor\n\
    }\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n / 2)\n\
    \    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n           \
    \ return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // TODO: implement\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    // TODO: implement this function\n    return 0\n}\n", "    //\
    \ Start with the smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n\
    \        // If factor divides n, divide n by factor.\n        if n % factor ==\
    \ 0 {\n            n /= factor\n        } else {\n            // Otherwise, increment\
    \ factor.\n            factor += 1\n        }\n    }\n    return factor\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // start with the smallest\
    \ prime\n    factor := 2\n    for n > 1 {\n        if n % factor == 0 {\n    \
    \        n /= factor\n        } else {\n            factor += 1\n        }\n \
    \   }\n    return factor\n}\n", "    var i, largest int\n    for i = 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            largest = i\n            n = n /\
    \ i\n            i = 1\n        }\n    }\n    return largest\n}\n", "    // TODO:\
    \ Implement me!\n    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // Start with the smallest prime number, 2.\n    factor := 2\n    for n > 1\
    \ {\n        // If n is divisible by factor, divide it out.\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        // Next factor.\n      \
    \  factor += 1\n    }\n    return factor\n}\n", "    // Find the smallest prime\
    \ factor of n.\n    // If n is prime, then n is the largest prime factor.\n  \
    \  // Otherwise, divide n by the smallest prime factor and repeat.\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var i int\n    for i = 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement this function\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    factor := 2\n    for n > 1 {\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        factor++\n    }\n    return\
    \ factor - 1\n}\n", "    // Start with the smallest prime factor.\n    factor\
    \ := 2\n    for n > 1 {\n        // If n is divisible by factor, divide it out.\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        //\
    \ Move to the next factor.\n        factor += 1\n    }\n    return factor\n}\n",
  "    var i int\n    for i = 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // TODO\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    if n <= 1 {\n        return 0\n    }\n\n    // Start\
    \ with the smallest prime factor\n    factor := 2\n\n    // Keep dividing by the\
    \ smallest prime factor until it is no longer a factor\n    for n % factor ==\
    \ 0 {\n        n /= factor\n    }\n\n    // If n is now 1, then the largest prime\
    \ factor is the last factor we found\n    if n == 1 {\n        return factor\n\
    \    }\n\n    // Otherwise, the largest prime factor is the largest prime factor\
    \ of n\n    return largest_prime_factor(n)\n}\n", "    var i int\n    for i =\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime factor.\n    factor := 2\n    for n % factor != 0 {\n        factor +=\
    \ 1\n    }\n    // Divide out the factor as many times as possible.\n    for n\
    \ % factor == 0 {\n        n /= factor\n    }\n    // If n is now 1, then factor\
    \ is the largest prime factor.\n    if n == 1 {\n        return factor\n    }\n\
    \    // Otherwise, factor is not the largest prime factor.\n    return largest_prime_factor(n)\n\
    }\n", "    if n <= 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n / 2)\n\
    \    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n           \
    \ return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // Start with the smallest prime factor, 2.\n    factor := 2\n    // Keep\
    \ going until we're done.\n    for n > 1 {\n        // If n is divisible by factor,\
    \ divide it out.\n        for n % factor == 0 {\n            n /= factor\n   \
    \     }\n        // Move to the next factor.\n        factor += 1\n    }\n   \
    \ // The last factor we found was the largest.\n    return factor\n}\n", "   \
    \ for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var i int = 2\n    for ; i\
    \ < n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n \
    \       }\n    }\n    return i\n}\n", "    var i int = 2\n    for i * i <= n {\n\
    \        if n % i == 0 {\n            n /= i\n        } else {\n            i\
    \ += 1\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    // TODO\n    return 0\n}\n", "    // Start with the smallest prime\
    \ factor, 2.\n    factor := 2\n    // Keep dividing n by factor until it is no\
    \ longer a factor.\n    for n % factor == 0 {\n        n /= factor\n    }\n  \
    \  // Now factor is no longer a factor of n.\n    // Increment factor by 1, until\
    \ it is no longer a factor of n.\n    for factor = 3; n % factor == 0; factor\
    \ += 2 {\n        n /= factor\n    }\n    // Now factor is no longer a factor\
    \ of n.\n    // Increment factor by 2, until it is no longer a factor of n.\n\
    \    for factor += 2; n % factor == 0; factor += 2 {\n        n /= factor\n  \
    \  }\n    // Now factor is no longer a factor of n.\n    // Increment factor by\
    \ 4, until it is no longer a factor of n.\n    for factor += 4; n % factor ==\
    \ 0; factor += 4 {\n        n /= factor\n    }\n    // Now factor is no longer\
    \ a factor of n.\n    // Increment factor by 2, until it is no longer a factor\
    \ of n.\n    for factor += 2; n % factor == 0; factor += 2 {\n        n /= factor\n\
    \    }\n    // Now factor is no longer a factor of n.\n    // Increment factor\
    \ by 4, until it is no longer a factor of n.\n    for factor += 4; n % factor\
    \ == 0; factor += 4 {\n        n /= factor\n    }\n    // Now factor is no longer\
    \ a factor of n.\n    // Increment factor by 6, until it is no longer a factor\
    \ of n.\n    for factor += 6; n % factor == 0; factor += 6 {\n        n /= factor\n\
    \    }\n    // Now factor is no longer a factor of n.\n    // Increment factor\
    \ by 2, until it is no longer a factor of n.\n    for factor += 2; n % factor\
    \ == 0; factor += 2 {\n        n /= factor\n    }\n    // Now factor is no longer\
    \ a factor of n.\n    // Increment factor by 6, until it is no longer a factor\
    \ of n.\n    for factor += 6; n % factor == 0; factor += 6 {\n        n /= factor",
  "    // TODO: implement\n    return 0\n}\n", "    // Start with the smallest prime\
    \ factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible by\
    \ factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Move on to the next factor.\n        factor += 1\n    }\n\
    \    return factor\n}\n", "    var i int = 2\n    for i < n {\n        if n %\
    \ i == 0 {\n            n = n / i\n        } else {\n            i += 1\n    \
    \    }\n    }\n    return n\n}\n", "    // find the largest prime factor of n\n\
    \    // assume n > 1 and is not a prime\n    //\n    // The largest prime factor\
    \ of n is the largest prime number that divides n.\n    //\n    // The largest\
    \ prime factor of n is less than or equal to sqrt(n).\n    //\n    // The largest\
    \ prime factor of n is the largest prime number that divides n.\n    //\n    //\
    \ The largest prime factor of n is less than or equal to sqrt(n).\n    //\n  \
    \  // The largest prime factor of n is the largest prime number that divides n.\n\
    \    //\n    // The largest prime factor of n is less than or equal to sqrt(n).\n\
    \    //\n    // The largest prime factor of n is the largest prime number that\
    \ divides n.\n    //\n    // The largest prime factor of n is less than or equal\
    \ to sqrt(n).\n    //\n    // The largest prime factor of n is the largest prime\
    \ number that divides n.\n    //\n    // The largest prime factor of n is less\
    \ than or equal to sqrt(n).\n    //\n    // The largest prime factor of n is the\
    \ largest prime number that divides n.\n    //\n    // The largest prime factor\
    \ of n is less than or equal to sqrt(n).\n    //\n    // The largest prime factor\
    \ of n is the largest prime number that divides n.\n    //\n    // The largest\
    \ prime factor of n is less than or equal to sqrt(n).\n    //\n    // The largest\
    \ prime factor of n is the largest prime number that divides n.\n    //\n    //\
    \ The largest prime factor of n is less than or equal to sqrt(n).\n    //\n  \
    \  // The largest prime factor of n is the largest prime number that divides n.\n\
    \    //\n    // The largest prime factor of n is less than or equal to sqrt(n).\n\
    \    //\n    // The largest prime factor of n is the largest prime number that\
    \ divides n.\n    //\n    // The largest prime factor of n is less than or equal\
    \ to sqrt(n).\n    //\n    // The largest prime factor of n is the largest prime\
    \ number that divides n.\n    //\n    // The largest prime factor of n is less\
    \ than or equal to sqrt(n).\n    //\n    //", "    // TODO\n    return 0\n}\n",
  "    // TODO: Implement me!\n    return 0\n}\n", "    // TODO: implement me\n  \
    \  return 0\n}\n", "    // Find the smallest prime factor of n.\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            // Divide n by i and recurse.\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    // n is\
    \ prime.\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", " \
    \   // TODO: implement\n    return 0\n}\n", "    // Start with the smallest prime\
    \ factor, 2.\n    factor := 2\n    // Keep going until the factor is greater than\
    \ the square root of n.\n    for factor * factor <= n {\n        // If n is evenly\
    \ divisible by factor, then factor is a factor of n.\n        if n % factor ==\
    \ 0 {\n            // Divide n by factor to get the next value of n to test.\n\
    \            n /= factor\n        } else {\n            // Go to the next odd\
    \ number.\n            factor += 1\n        }\n    }\n    // The last value of\
    \ factor is the largest prime factor of n.\n    return factor\n}\n", "    // TODO\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ i\n}\n", "    // Find the largest prime factor of n.\n    // We know that n\
    \ is not a prime, so we can start at 2.\n    // We can also stop at sqrt(n) because\
    \ if n has a factor larger than\n    // sqrt(n), then it must have a factor smaller\
    \ than sqrt(n).\n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n\
    \            // i is a factor of n.\n            // Check if i is prime.\n   \
    \         for j := 2; j * j <= i; j++ {\n                if i % j == 0 {\n   \
    \                 // i is not prime.\n                    break\n            \
    \    }\n            }\n            // i is prime.\n            return i\n    \
    \    }\n    }\n    // n is prime.\n    return n\n}\n", "    // Start with the\
    \ smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n\
    \ is divisible by factor, divide it out.\n        for n % factor == 0 {\n    \
    \        n /= factor\n        }\n        // Move on to the next factor.\n    \
    \    factor += 1\n    }\n    return factor\n}\n", "    // TODO: implement this\
    \ function\n    return 0\n}\n", "    // TODO\n    return 0\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n  \
    \          i--\n        }\n    }\n    return i\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // TODO: implement\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n  \
    \      if n % i == 0 {\n            return largest_prime_factor(n / i)\n     \
    \   }\n    }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // TODO: implement me\n    return 0\n}\n", "    // TODO: Implement this function.\n\
    \    return 0\n}\n", "    var largest int\n    for i := 2; i <= n; i++ {\n   \
    \     if n % i == 0 {\n            largest = i\n            n /= i\n         \
    \   i--\n        }\n    }\n    return largest\n}\n", "    var largest int\n  \
    \  for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n\
    \            n /= i\n            i--\n        }\n    }\n    return largest\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: Implement me!\n  \
    \  return 0\n}\n", "    // TODO\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // TODO\n    return 0\n}\n", "    // Find the largest\
    \ prime factor of n.\n    //\n    // We start with the smallest prime number,\
    \ 2, and keep dividing n by it\n    // until it is no longer a factor. Then we\
    \ move on to the next prime number,\n    // 3, and repeat.\n    //\n    // We\
    \ keep track of the largest prime factor we've found so far, and return\n    //\
    \ it when we're done.\n    largest_prime_factor := 1\n    for i := 2; i <= n;\
    \ i++ {\n        for n % i == 0 {\n            largest_prime_factor = i\n    \
    \        n /= i\n        }\n    }\n    return largest_prime_factor\n}\n", "  \
    \  // TODO\n    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n", " \
    \   // TODO: implement me\n    return 0\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Next factor.\n        factor += 1\n    }\n    return factor\n\
    }\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement me\n\
    \    return 0\n}\n", "    // Start with the smallest prime factor.\n    factor\
    \ := 2\n    for n > 1 {\n        // If n is divisible by factor, divide it out.\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        //\
    \ Move to the next factor.\n        factor += 1\n    }\n    return factor\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    // TODO\n    return 0\n}\n", " \
    \   // Start with the smallest prime number, 2.\n    factor := 2\n    for n >\
    \ 1 {\n        // If n is divisible by factor, then factor is a prime factor of\
    \ n.\n        if n % factor == 0 {\n            // Divide n by factor as many\
    \ times as possible.\n            for n % factor == 0 {\n                n /=\
    \ factor\n            }\n        }\n        // Move on to the next prime number.\n\
    \        factor += 1\n    }\n    return factor\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Next factor.\n        factor += 1\n    }\n    return factor\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // Start\
    \ with the smallest prime number, 2.\n    factor := 2\n    // Keep dividing n\
    \ by factor until n is no longer divisible by factor.\n    for n % factor == 0\
    \ {\n        n /= factor\n    }\n    // If n is now 1, then factor is the largest\
    \ prime factor.\n    if n == 1 {\n        return factor\n    }\n    // Otherwise,\
    \ factor is not the largest prime factor.\n    // Increment factor by 1 and repeat\
    \ the process.\n    factor += 1\n    return largest_prime_factor(n)\n}\n", " \
    \   if n <= 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n / 2)\n    }\n\
    \    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // Start\
    \ with the smallest prime factor and work up.\n    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            // i is a factor of n.\n            // If\
    \ i is prime, then it is the largest prime factor.\n            if is_prime(i)\
    \ {\n                return i\n            }\n            // If i is not prime,\
    \ then it is not the largest prime factor.\n            // Divide n by i and check\
    \ the result.\n            return largest_prime_factor(n / i)\n        }\n   \
    \ }\n    // n is prime.\n    return n\n}\n", "    var i int\n    for i = 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var i int = 2\n    for ; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    if n % 2 == 0 {\n        return\
    \ 2\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n       \
    \     return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var i int\n    for\
    \ i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n         \
    \   i--\n        }\n    }\n    return i\n}\n", "    // TODO\n    return 0\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // Start with 2, the smallest prime number.\n    // Keep dividing n by the\
    \ current prime number until it is no longer divisible.\n    // Then move on to\
    \ the next prime number.\n    // Repeat until we reach the largest prime factor.\n\
    \    //\n    // Note: We can skip even numbers because they are not prime.\n \
    \   // Note: We can skip multiples of 3 because they are not prime.\n    // Note:\
    \ We can skip multiples of 5 because they are not prime.\n    // Note: We can\
    \ skip multiples of 7 because they are not prime.\n    // Note: We can skip multiples\
    \ of 11 because they are not prime.\n    // Note: We can skip multiples of 13\
    \ because they are not prime.\n    // Note: We can skip multiples of 17 because\
    \ they are not prime.\n    // Note: We can skip multiples of 19 because they are\
    \ not prime.\n    // Note: We can skip multiples of 23 because they are not prime.\n\
    \    // Note: We can skip multiples of 29 because they are not prime.\n    //\
    \ Note: We can skip multiples of 31 because they are not prime.\n    // Note:\
    \ We can skip multiples of 37 because they are not prime.\n    // Note: We can\
    \ skip multiples of 41 because they are not prime.\n    // Note: We can skip multiples\
    \ of 43 because they are not prime.\n    // Note: We can skip multiples of 47\
    \ because they are not prime.\n    // Note: We can skip multiples of 53 because\
    \ they are not prime.\n    // Note: We can skip multiples of 59 because they are\
    \ not prime.\n    // Note: We can skip multiples of 61 because they are not prime.\n\
    \    // Note: We can skip multiples of 67 because they are not prime.\n    //\
    \ Note: We can skip multiples of 71 because they are not prime.\n    // Note:\
    \ We can skip multiples of 73 because they are not prime.\n    // Note: We can\
    \ skip multiples of 79 because they are not prime.\n    // Note: We can skip multiples\
    \ of 83 because they are not prime.\n    // Note: We can skip multiples of 89\
    \ because they are not prime.\n    // Note: We can skip multiples of 97 because\
    \ they are not prime.\n    // Note: We", "    // The largest prime factor of n\
    \ is at most n/2.\n    // The smallest prime factor of n is at least 2.\n    //\
    \ So we only need to check the numbers between 2 and n/2.\n    for i := n/2; i\
    \ >= 2; i-- {\n        if n % i == 0 && is_prime(i) {\n            return i\n\
    \        }\n    }\n    return -1\n}\n", "    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n\
    \    }\n    return n\n}\n", "    // Start with the smallest prime factor.\n  \
    \  factor := 2\n    // Keep track of the largest prime factor.\n    largest_factor\
    \ := factor\n    // Keep track of the remaining number.\n    remaining := n\n\
    \    // Loop until we have a prime.\n    for remaining > 1 {\n        // If the\
    \ factor divides the remaining number,\n        // then we can reduce the remaining\
    \ number.\n        if remaining % factor == 0 {\n            remaining /= factor\n\
    \            // If the factor is larger than the largest factor,\n           \
    \ // then update the largest factor.\n            if factor > largest_factor {\n\
    \                largest_factor = factor\n            }\n        } else {\n  \
    \          // If the factor does not divide the remaining number,\n          \
    \  // then increment the factor by one.\n            factor += 1\n        }\n\
    \    }\n    return largest_factor\n}\n", "    var largest int\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n          \
    \  n /= i\n            i--\n        }\n    }\n    return largest\n}\n", "    //\
    \ TODO: implement\n    return 0\n}\n", "    var largest int\n    for i := 2; i\
    \ <= n; i++ {\n        if n % i == 0 {\n            largest = i\n            n\
    \ /= i\n            i--\n        }\n    }\n    return largest\n}\n", "    var\
    \ i int = 2\n    for ; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    var\
    \ i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // Start\
    \ with the smallest prime number, 2.\n    factor := 2\n    for n > 1 {\n     \
    \   // If n is divisible by factor, divide it out.\n        for n % factor ==\
    \ 0 {\n            n /= factor\n        }\n        // Move to the next prime number.\n\
    \        factor++\n    }\n    return factor - 1\n}\n", "    // TODO\n    return\
    \ 0\n}\n", "    // TODO\n    return 0\n}\n", "    var i int\n    for i = 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n \
    \       }\n    }\n    return i\n}\n", "    // Find the largest prime factor of\
    \ n.\n    //\n    // First, find the smallest prime factor of n.\n    // Then,\
    \ divide n by that prime factor.\n    // Repeat until n is prime.\n    //\n  \
    \  // The largest prime factor of n is the last prime factor found.\n    //\n\
    \    // For example, the largest prime factor of 13195 is 29.\n    //\n    //\
    \ 13195 / 5 = 2639\n    // 2639 / 7 = 377\n    // 377 / 13 = 29\n    // 29 / 29\
    \ = 1\n    //\n    // The largest prime factor of 2048 is 2.\n    //\n    // 2048\
    \ / 2 = 1024\n    // 1024 / 2 = 512\n    // 512 / 2 = 256\n    // 256 / 2 = 128\n\
    \    // 128 / 2 = 64\n    // 64 / 2 = 32\n    // 32 / 2 = 16\n    // 16 / 2 =\
    \ 8\n    // 8 / 2 = 4\n    // 4 / 2 = 2\n    // 2 / 2 = 1\n    //\n    // The\
    \ largest prime factor of 1 is 1.\n    //\n    // 1 / 1 = 1\n    //\n    // The\
    \ largest prime factor of 2 is 2.\n    //\n    // 2 / 2 = 1\n    //\n    // The\
    \ largest prime factor of 3 is 3.\n    //\n    // 3 / 3 = 1\n    //\n    // The\
    \ largest prime factor of 4 is 2.\n    //\n    // 4 / 2 = 2\n    // 2 / 2 = 1\n\
    \    //\n    // The largest prime factor of 5 is 5.\n    //\n    // 5 / 5 = 1\n\
    \    //\n    // The largest prime factor of 6 is 3.\n    //\n    // 6 / 2 = 3\n\
    \    // 3 / 3 = 1\n    //\n    // The largest prime factor of 7 is 7.\n    //\n\
    \    // 7 / 7 = 1\n    //\n    // The largest prime factor of 8 is 2.\n    //\n\
    \    // 8 / 2 = 4\n    // 4 / 2 = 2\n    // 2 / 2 = 1\n    //\n    // The largest\
    \ prime factor of 9 is 3.\n    //\n    // 9 / 3 = 3\n    // 3 / 3 = 1\n    //\n\
    \    // The largest", "    // TODO\n    return 0\n}\n", "    // Start with the\
    \ smallest prime factor.\n    factor := 2\n    for n > 1 {\n        // If n is\
    \ divisible by the current factor, divide it out.\n        for n % factor == 0\
    \ {\n            n /= factor\n        }\n        // Move to the next factor.\n\
    \        factor += 1\n    }\n    return factor\n}\n", "    // TODO: implement\
    \ this function\n    return 0\n}\n", "    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ n\n}\n", "    // Start with the smallest prime factor and work up.\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    var i int\n    for i = 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return largest_prime_factor(n / i)\n\
    \        }\n    }\n    return n\n}\n", "    // Start with the smallest prime factor.\n\
    \    factor := 2\n    for n % factor != 0 {\n        factor += 1\n    }\n    //\
    \ If n is a prime, then factor is n.\n    if n == factor {\n        return n\n\
    \    }\n    // Otherwise, factor is the largest prime factor of n.\n    return\
    \ largest_prime_factor(n / factor)\n}\n", "    var i int\n    for i = 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n      \
    \  }\n    }\n    return i\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n  \
    \  }\n    return n\n}\n", "    // TODO\n    return 0\n}\n", "    var i int = 2\n\
    \    for ; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    // Start with the smallest prime factor, 2.\n    // If n is divisible\
    \ by 2, divide n by 2 and continue.\n    // Otherwise, increment the factor by\
    \ 1.\n    // When the factor is greater than the square root of n,\n    // the\
    \ largest prime factor is n.\n    factor := 2\n    for factor <= n/factor {\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        factor++\n\
    \    }\n    return n\n}\n", "    var largest_prime int\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            largest_prime = i\n            n\
    \ /= i\n            i--\n        }\n    }\n    return largest_prime\n}\n", " \
    \   for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // We can start with 2, since\
    \ it is the smallest prime.\n    for i := 2; i < n; i++ {\n        // If i is\
    \ a factor of n, then n/i is an integer.\n        if n % i == 0 {\n          \
    \  // If i is a prime, then it is the largest prime factor.\n            if is_prime(i)\
    \ {\n                return i\n            }\n        }\n    }\n    return n\n\
    }\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           n /= i\n            i--\n        }\n    }\n    return i\n}\n", " \
    \   // TODO\n    return 0\n}\n", "    if n == 1 {\n        return 1\n    }\n \
    \   for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var i int = 2\n    for ; i\
    \ < n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n \
    \       }\n    }\n    return i\n}\n", "    // TODO: implement\n    return 0\n\
    }\n", "    var i, factor int\n    for i = 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            factor = i\n            n /= i\n            i--\n        }\n\
    \    }\n    return factor\n}\n", "    // Start with the smallest prime number,\
    \ 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible by factor,\
    \ then factor is a prime factor of n.\n        if n % factor == 0 {\n        \
    \    // Divide n by factor as many times as possible.\n            for n % factor\
    \ == 0 {\n                n /= factor\n            }\n        }\n        // Move\
    \ to the next prime number.\n        factor += 1\n    }\n    return factor\n}\n",
  "    // TODO: Implement me!\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
