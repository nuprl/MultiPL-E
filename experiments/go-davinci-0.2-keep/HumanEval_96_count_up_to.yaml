name: HumanEval_96_count_up_to
language: go_test.go
prompt: "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Implement a function that takes an non-negative integer and returns an array\
  \ of the first n\n// integers that are prime numbers and less than n.\n// for example:\n\
  // count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) =>\
  \ []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18)\
  \ => [2,3,5,7,11,13,17]\nfunc count_up_to(n int) []int {\n"
tests: "func TestCount_Up_To(t *testing.T) {\n  candidate := count_up_to\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(5), expected: []int{2, 3} },\n     { actual:\
  \ candidate(6), expected: []int{2, 3, 5} },\n     { actual: candidate(7), expected:\
  \ []int{2, 3, 5} },\n     { actual: candidate(10), expected: []int{2, 3, 5, 7} },\n\
  \     { actual: candidate(0), expected: []int{} },\n     { actual: candidate(22),\
  \ expected: []int{2, 3, 5, 7, 11, 13, 17, 19} },\n     { actual: candidate(1), expected:\
  \ []int{} },\n     { actual: candidate(18), expected: []int{2, 3, 5, 7, 11, 13,\
  \ 17} },\n     { actual: candidate(47), expected: []int{2, 3, 5, 7, 11, 13, 17,\
  \ 19, 23, 29, 31, 37, 41, 43} },\n     { actual: candidate(101), expected: []int{2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement me\n    return []int{}\n}\n", "    var primes\
    \ []int\n    for i := 2; i < n; i++ {\n        if is_prime(i) {\n            primes\
    \ = append(primes, i)\n        }\n    }\n    return primes\n}\n", "    var result\
    \ []int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ implement this function\n    return []int{}\n}\n", "    var result []int\n \
    \   for i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var primes []int\n    for\
    \ i := 2; i < n; i++ {\n        if is_prime(i) {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    return primes\n}\n", "    var primes []int\n    for\
    \ i := 2; i < n; i++ {\n        if is_prime(i) {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    return primes\n}\n", "    var result []int\n    if\
    \ n < 2 {\n        return result\n    }\n    result = append(result, 2)\n    for\
    \ i := 3; i < n; i += 2 {\n        isPrime := true\n        for _, v := range\
    \ result {\n            if i % v == 0 {\n                isPrime = false\n   \
    \             break\n            }\n        }\n        if isPrime {\n        \
    \    result = append(result, i)\n        }\n    }\n    return result\n}\n", " \
    \   if n < 2 {\n        return []int{}\n    }\n    var primes []int\n    for i\
    \ := 2; i < n; i++ {\n        if is_prime(i) {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    return primes\n}\n", "    if n <= 1 {\n        return\
    \ []int{}\n    }\n    primes := []int{2}\n    for i := 3; i < n; i++ {\n     \
    \   isPrime := true\n        for _, prime := range primes {\n            if i\
    \ % prime == 0 {\n                isPrime = false\n                break\n   \
    \         }\n        }\n        if isPrime {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    return primes\n}\n", "    var primes []int\n    for\
    \ i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j < i; j++\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \      break\n            }\n        }\n        if isPrime {\n            primes\
    \ = append(primes, i)\n        }\n    }\n    return primes\n}\n", "    var primes\
    \ []int\n    for i := 2; i < n; i++ {\n        if is_prime(i) {\n            primes\
    \ = append(primes, i)\n        }\n    }\n    return primes\n}\n", "    var result\
    \ []int\n    if n < 2 {\n        return result\n    }\n    result = append(result,\
    \ 2)\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
