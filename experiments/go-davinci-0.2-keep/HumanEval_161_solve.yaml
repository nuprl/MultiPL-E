name: HumanEval_161_solve
language: go_test.go
prompt: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a string s.\n// if s[i] is a letter, reverse its case from lower to\
  \ upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
  \ no letters, reverse the string.\n// The function should return the resulted string.\n\
  // Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"\
  #a@C\") = \"#A@c\"\nfunc solve(s string) string {\n"
tests: "func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
  1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\"\
  \ },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
  \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
  #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"\
  #$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var res string\n    for _, c := range s {\n        if c >= 'a'\
    \ && c <= 'z' {\n            res += string(c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            res += string(c + 32)\n        } else {\n       \
    \     res += string(c)\n        }\n    }\n    if len(res) == len(s) {\n      \
    \  return res\n    }\n    return reverse(res)\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var\
    \ res string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n \
    \           res += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n\
    \            res += string(c + 32)\n        } else {\n            res += string(c)\n\
    \        }\n    }\n    if len(res) == len(s) {\n        return res\n    }\n  \
    \  for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n        res[i],\
    \ res[j] = res[j], res[i]\n    }\n    return res\n}\n", "    if len(s) == 0 {\n\
    \        return s\n    }\n    var result string\n    for _, c := range s {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    for _, c := range s {\n        if\
    \ c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else\
    \ {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
  "    var result string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z'\
    \ {\n            result += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            result += string(c + 32)\n        } else {\n            result\
    \ += string(c)\n        }\n    }\n    return result\n}\n", "    var r []rune\n\
    \    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            r =\
    \ append(r, c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            r =\
    \ append(r, c + 32)\n        } else {\n            r = append(r, c)\n        }\n\
    \    }\n    return string(r)\n}\n", "    var result []rune\n    for _, r := range\
    \ s {\n        if r >= 'a' && r <= 'z' {\n            result = append(result,\
    \ r - 32)\n        } else if r >= 'A' && r <= 'Z' {\n            result = append(result,\
    \ r + 32)\n        } else {\n            result = append(result, r)\n        }\n\
    \    }\n    return string(result)\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    if len(s) == 0 {\n        return s\n    }\n    var res string\n\
    \    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            res\
    \ += string(r - 32)\n        } else if r >= 'A' && r <= 'Z' {\n            res\
    \ += string(r + 32)\n        } else {\n            res += string(r)\n        }\n\
    \    }\n    return res\n}\n", "    if len(s) == 0 {\n        return s\n    }\n\
    \    runes := []rune(s)\n    for i, r := range runes {\n        if r >= 'a' &&\
    \ r <= 'z' {\n            runes[i] = r - 32\n        } else if r >= 'A' && r <=\
    \ 'Z' {\n            runes[i] = r + 32\n        }\n    }\n    return string(runes)\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    if len(s) == 0 {\n \
    \       return s\n    }\n    var res string\n    for _, c := range s {\n     \
    \   if c >= 'a' && c <= 'z' {\n            res += string(c - 'a' + 'A')\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            res += string(c - 'A' + 'a')\n\
    \        } else {\n            res += string(c)\n        }\n    }\n    return\
    \ res\n}\n", "    var result string\n    for _, c := range s {\n        if c >=\
    \ 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c\
    \ >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    if len(s) ==\
    \ 0 {\n        return s\n    }\n    var res string\n    for _, c := range s {\n\
    \        if c >= 'a' && c <= 'z' {\n            res += string(c - 32)\n      \
    \  } else if c >= 'A' && c <= 'Z' {\n            res += string(c + 32)\n     \
    \   } else {\n            res += string(c)\n        }\n    }\n    return res\n\
    }\n", "    var r []rune\n    for _, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            r = append(r, c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            r = append(r, c + 32)\n        } else {\n            r =\
    \ append(r, c)\n        }\n    }\n    return string(r)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
