language: go_test.go
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // YOUR CODE HERE\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpf2gxje0e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpf2gxje0e_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpf2gxje0e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    for i, v := range l {\n\
    \        for j, w := range l {\n            if i != j && v + w == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := m[-v]; ok {\n            return\
    \ true\n        }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement\n   \
    \ return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpfdktg0z7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement\n   \
    \ return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpfdktg0z7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_5u4le50_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_5u4le50_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_5u4le50_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    for i, v := range l {\n\
    \        for j, w := range l {\n            if i != j && v + w == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    var m = make(map[int]int)\n\
    \    for _, v := range l {\n        m[v]++\n    }\n    for _, v := range l {\n\
    \        if m[-v] > 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpvknnb3hr_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        if m[-v] {\n            return true\n        }\n        m[v] = true\n\
    \    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if m[-v] {\n            return true\n    \
    \    }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: Implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1mc3q3dq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1mc3q3dq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1mc3q3dq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement\n   \
    \ return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpfdktg0z7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me.\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpora9eb6e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpora9eb6e_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpora9eb6e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := m[-v]; ok {\n            return\
    \ true\n        }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if m[-v] {\n            return true\n    \
    \    }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i\
    \ + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: Implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_es9jx96_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_es9jx96_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_es9jx96_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if m[-v] {\n            return true\n    \
    \    }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmps5g5jtyf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmps5g5jtyf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := m[-v]; ok {\n            return\
    \ true\n        }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i\
    \ + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    var m = make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := m[-v]; ok {\n            return\
    \ true\n        }\n        m[v] = true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_5u4le50_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_5u4le50_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_5u4le50_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // YOUR CODE HERE\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpf2gxje0e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpf2gxje0e_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpf2gxje0e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement\n   \
    \ return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpfdktg0z7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpfdktg0z7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    var m = make(map[int]int)\n\
    \    for _, v := range l {\n        if _, ok := m[v]; ok {\n            return\
    \ true\n        }\n        m[-v] = 1\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // YOUR CODE HERE\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpf2gxje0e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpf2gxje0e_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpf2gxje0e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me!\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjjv2vfm6_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpjjv2vfm6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement me\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpu0iu403a_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpu0iu403a_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // TODO: implement this\
    \ function\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp51tbinx_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp51tbinx_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074555
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp55ag9n4v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp55ag9n4v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074555
