language: go_test.go
name: HumanEval_34_unique
results:
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var uniq\
    \ []int\n    for _, v := range l {\n        if !contains(uniq, v) {\n        \
    \    uniq = append(uniq, v)\n        }\n    }\n    return uniq\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7p6s_jr_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    uniq := make([]int,\
    \ len(m))\n    i := 0\n    for k := range m {\n        uniq[i] = k\n        i++\n\
    \    }\n    return uniq\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpg3ydnpoq_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if len(u) == 0 {\n            u = append(u,\
    \ v)\n        } else {\n            for i, w := range u {\n                if\
    \ v == w {\n                    break\n                }\n                if i\
    \ == len(u) - 1 {\n                    u = append(u, v)\n                }\n \
    \           }\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmphp4vhh96_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    if len(l)\
    \ == 0 {\n        return l\n    }\n    var result []int\n    result = append(result,\
    \ l[0])\n    for _, e := range l {\n        if e != result[len(result)-1] {\n\
    \            result = append(result, e)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpqn9qoib__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppk8u9zyh_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var result []int\n\
    \    for k := range m {\n        result = append(result, k)\n    }\n    return\
    \ result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5cw2jttw_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ implement\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptow1l0wu_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var uniq\
    \ []int\n    for _, i := range l {\n        if !contains(uniq, i) {\n        \
    \    uniq = append(uniq, i)\n        }\n    }\n    return uniq\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphll67ls2_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var m =\
    \ make(map[int]bool)\n    var u []int\n    for _, v := range l {\n        if !m[v]\
    \ {\n            m[v] = true\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp6jnzwdb4_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppk8u9zyh_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ implement\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptow1l0wu_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var res []int\n  \
    \  for k := range m {\n        res = append(res, k)\n    }\n    return res\n}\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpmr68f7pe_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppk8u9zyh_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var result []int\n\
    \    for k := range m {\n        result = append(result, k)\n    }\n    return\
    \ result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5cw2jttw_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    if len(l)\
    \ == 0 {\n        return l\n    }\n    u := []int{l[0]}\n    for _, v := range\
    \ l[1:] {\n        if v != u[len(u)-1] {\n            u = append(u, v)\n     \
    \   }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpme36h4wi_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var result []int\n\
    \    for k := range m {\n        result = append(result, k)\n    }\n    return\
    \ result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5cw2jttw_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ k := range m {\n        u = append(u, k)\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1f1iiro3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ implement\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptow1l0wu_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var unique\
    \ []int\n    for _, v := range l {\n        if !contains(unique, v) {\n      \
    \      unique = append(unique, v)\n        }\n    }\n    return unique\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhki18za_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ k := range m {\n        u = append(u, k)\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1f1iiro3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, i := range l {\n        m[i] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpo0dka9z4_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    if len(l)\
    \ == 0 {\n        return []int{}\n    }\n    if len(l) == 1 {\n        return\
    \ l\n    }\n    var result []int\n    result = append(result, l[0])\n    for i\
    \ := 1; i < len(l); i++ {\n        if l[i] != l[i-1] {\n            result = append(result,\
    \ l[i])\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpk4huj159_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    m := make(map[int]bool)\n\n    for _, v := range l {\n        if _, ok :=\
    \ m[v]; !ok {\n            m[v] = true\n            u = append(u, v)\n       \
    \ }\n    }\n\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpndr8bhk9_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var unique\
    \ []int\n    for _, v := range l {\n        if !contains(unique, v) {\n      \
    \      unique = append(unique, v)\n        }\n    }\n    return unique\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhki18za_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var r []int\n\
    \    for _, v := range l {\n        if !contains(r, v) {\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_uq3y4z_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppk8u9zyh_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ Implement me\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpafvp828v_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !in(v, u) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpog6y9nf3_test.go:14:13: undefined: in

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ implement\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptow1l0wu_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jnz1j3d_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppk8u9zyh_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    m := make(map[int]bool)\n\n    for _, v := range l {\n        if _, ok :=\
    \ m[v]; !ok {\n            m[v] = true\n            u = append(u, v)\n       \
    \ }\n    }\n\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpndr8bhk9_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ k := range m {\n        u = append(u, k)\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1f1iiro3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ k := range m {\n        u = append(u, k)\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1f1iiro3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ implement me\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpwxqjfm5p_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var r []int\n\
    \    for _, v := range l {\n        if !contains(r, v) {\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_uq3y4z_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpekv5wc4x_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    // TODO:\
    \ implement me\n    return nil\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpogtib051_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppk8u9zyh_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w0noxy4_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpws9b15s__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    m := make(map[int]bool)\n\n    for _, v := range l {\n        if _, ok :=\
    \ m[v]; !ok {\n            m[v] = true\n            u = append(u, v)\n       \
    \ }\n    }\n\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpndr8bhk9_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyv0rli6_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsm99_53_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, e := range l {\n        m[e] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxwbypsbn_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074815
