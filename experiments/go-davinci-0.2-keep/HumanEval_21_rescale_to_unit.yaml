name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var min, max float64\n    for _, n := range numbers {\n       \
    \ if n < min {\n            min = n\n        }\n        if n > max {\n       \
    \     max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, n := range numbers {\n        if\
    \ n < min {\n            min = n\n        }\n        if n > max {\n          \
    \  max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, num := range numbers {\n        if num < min {\n  \
    \          min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    var result []float64\n    for _, num := range numbers {\n\
    \        result = append(result, (num - min) / (max - min))\n    }\n    return\
    \ result\n}\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min, max float64\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result []float64\n    for _, number := range numbers {\n        result = append(result,\
    \ (number - min) / (max - min))\n    }\n    return result\n}\n", "    var min\
    \ float64 = numbers[0]\n    var max float64 = numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n",
  "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result []float64\n    for _, number := range numbers {\n      \
    \  result = append(result, (number - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \    var result = make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min, max float64 = numbers[0], numbers[0]\n \
    \   for _, v := range numbers {\n        if v < min {\n            min = v\n \
    \       }\n        if v > max {\n            max = v\n        }\n    }\n    var\
    \ result []float64\n    for _, v := range numbers {\n        result = append(result,\
    \ (v - min) / (max - min))\n    }\n    return result\n}\n", "    min, max := numbers[0],\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < min {\n\
    \            min = number\n        }\n        if number > max {\n            max\
    \ = number\n        }\n    }\n    result := make([]float64, len(numbers))\n  \
    \  for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min, max float64\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result []float64\n    for _, number := range numbers {\n      \
    \  result = append(result, (number - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min, max float64\n    min = numbers[0]\n    max\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, n := range numbers {\n        if\
    \ n < min {\n            min = n\n        }\n        if n > max {\n          \
    \  max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for _, val := range numbers {\n        if val < min {\n            min =\
    \ val\n        }\n        if val > max {\n            max = val\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, val := range\
    \ numbers {\n        result[i] = (val - min) / (max - min)\n    }\n    return\
    \ result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    for i, number := range numbers {\n        numbers[i] = (number - min)\
    \ / (max - min)\n    }\n    return numbers\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"Need at least two numbers to rescale\")\n    }\n    min,\
    \ max := numbers[0], numbers[0]\n    for _, n := range numbers {\n        if n\
    \ < min {\n            min = n\n        }\n        if n > max {\n            max\
    \ = n\n        }\n    }\n    if min == max {\n        panic(\"All numbers are\
    \ equal\")\n    }\n    result := make([]float64, len(numbers))\n    for i, n :=\
    \ range numbers {\n        result[i] = (n - min) / (max - min)\n    }\n    return\
    \ result\n}\n", "    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min, max float64\n    for i,\
    \ n := range numbers {\n        if i == 0 {\n            min = n\n           \
    \ max = n\n        } else {\n            if n < min {\n                min = n\n\
    \            }\n            if n > max {\n                max = n\n          \
    \  }\n        }\n    }\n    var result []float64\n    for _, n := range numbers\
    \ {\n        result = append(result, (n - min) / (max - min))\n    }\n    return\
    \ result\n}\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    var result []float64\n\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n\n    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    if min == max {\n        return numbers\n    }\n\
    \    for i, num := range numbers {\n        numbers[i] = (num - min) / (max -\
    \ min)\n    }\n    return numbers\n}\n", "    if len(numbers) < 2 {\n        panic(\"\
    Need at least two numbers to rescale\")\n    }\n    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    if min == max {\n        panic(\"All\
    \ numbers are the same\")\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, v := range numbers {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    var result []float64\n    for _, v := range\
    \ numbers {\n        result = append(result, (v - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"At least\
    \ two numbers are required\")\n    }\n\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\
    \n    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    var result []float64\n\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min = numbers[0]\n\
    \    var max = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var scale = 1.0 / (max - min)\n\
    \    var result = make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) * scale\n    }\n    return result\n}\n",
  "    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result []float64\n    for _, number := range numbers {\n      \
    \  result = append(result, (number - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n", "    var min float64 =\
    \ numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    var result []float64\n    for\
    \ _, n := range numbers {\n        result = append(result, (n - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min, max float64\n    for _,\
    \ n := range numbers {\n        if n < min {\n            min = n\n        }\n\
    \        if n > max {\n            max = n\n        }\n    }\n    var result []float64\n\
    \    for _, n := range numbers {\n        result = append(result, (n - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    if min == max {\n        return numbers\n    }\n    for\
    \ i, n := range numbers {\n        numbers[i] = (n - min) / (max - min)\n    }\n\
    \    return numbers\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, n := range numbers {\n        if n < min {\n      \
    \      min = n\n        }\n        if n > max {\n            max = n\n       \
    \ }\n    }\n    var result []float64\n    for _, n := range numbers {\n      \
    \  result = append(result, (n - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, n := range numbers {\n        if n < min {\n            min = n\n  \
    \      }\n        if n > max {\n            max = n\n        }\n    }\n    var\
    \ result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max\
    \ float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    var result []float64\n    for\
    \ _, n := range numbers {\n        result = append(result, (n - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var max float64 = numbers[0]\n \
    \   var min float64 = numbers[0]\n    for _, number := range numbers {\n     \
    \   if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, num := range numbers {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    var result []float64\n    for\
    \ _, num := range numbers {\n        result = append(result, (num - min) / (max\
    \ - min))\n    }\n    return result\n}\n", "    var max float64 = numbers[0]\n\
    \    var min float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min = numbers[0]\n\
    \    var max = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n       \
    \ return numbers\n    }\n\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n\n    result := make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\n    return\
    \ result\n}\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min, max float64\n    min = numbers[0]\n    max\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    // find the min and max of the list\n\
    \    min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    // rescale the list\n    for i, n\
    \ := range numbers {\n        numbers[i] = (n - min) / (max - min)\n    }\n  \
    \  return numbers\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var max = numbers[0]\n    var min\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        if number < min {\n        \
    \    min = number\n        }\n    }\n    var range_ = max - min\n    var scaled\
    \ = make([]float64, len(numbers))\n    for i, number := range numbers {\n    \
    \    scaled[i] = (number - min) / range_\n    }\n    return scaled\n}\n", "  \
    \  var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result = make([]float64, len(numbers))\n    for i, number := range numbers {\n\
    \        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result = make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    var\
    \ result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    var result []float64\n\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    for _, number := range numbers {\n        result = append(result,\
    \ (number - min) / (max - min))\n    }\n\n    return result\n}\n", "    var min,\
    \ max float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n",
  "    if len(numbers) < 2 {\n        return numbers\n    }\n\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n\n    if max == min {\n        return\
    \ numbers\n    }\n\n    for i, number := range numbers {\n        numbers[i] =\
    \ (number - min) / (max - min)\n    }\n\n    return numbers\n}\n", "    var min,\
    \ max float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n",
  "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result []float64\n    for _, number := range numbers {\n      \
    \  result = append(result, (number - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, num := range numbers {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    var result []float64\n    for _, num := range numbers {\n        result =\
    \ append(result, (num - min) / (max - min))\n    }\n    return result\n}\n", " \
    \   var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ range_ = max - min\n    var result = make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        result[i] = (number - min) / range_\n\
    \    }\n    return result\n}\n", "    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var range_ = max - min\n    var result = make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / range_\n    }\n    return result\n}\n", "    var max float64 = numbers[0]\n\
    \    var min float64 = numbers[0]\n    for _, v := range numbers {\n        if\
    \ v > max {\n            max = v\n        }\n        if v < min {\n          \
    \  min = v\n        }\n    }\n    var result []float64\n    for _, v := range\
    \ numbers {\n        result = append(result, (v - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    var result []float64\n\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n\n    return result\n}\n", "    var min, max float64\n    min\
    \ = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers {\n \
    \       if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"Need at least two numbers\")\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    if min == max {\n        panic(\"All numbers are the same\"\
    )\n    }\n    result := make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        result[i] = (n - min) / (max - min)\n    }\n    return result\n}\n",
  "    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result []float64\n    for _, number := range numbers {\n      \
    \  result = append(result, (number - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min, max float64 = numbers[0], numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n",
  "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var diff float64 = max - min\n    var result []float64 = make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / diff\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    range_ := max - min\n    result\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     result[i] = (number - min) / range_\n    }\n    return result\n}\n", " \
    \   min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n", "    var min float64 =\
    \ numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    // find the max\
    \ and min\n    max := numbers[0]\n    min := numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number > max {\n            max = number\n     \
    \   }\n        if number < min {\n            min = number\n        }\n    }\n\
    \    // rescale\n    for i, number := range numbers {\n        numbers[i] = (number\
    \ - min) / (max - min)\n    }\n    return numbers\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    if min == max {\n        return\
    \ make([]float64, len(numbers))\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    if max == min {\n        return numbers\n    }\n    for\
    \ i, n := range numbers {\n        numbers[i] = (n - min) / (max - min)\n    }\n\
    \    return numbers\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\
    \    return result\n}\n", "    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result = make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    var min float64 = numbers[0]\n    var max\
    \ float64 = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n \
    \       panic(\"List must have at least two elements\")\n    }\n\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, n := range numbers {\n        if\
    \ n < min {\n            min = n\n        }\n        if n > max {\n          \
    \  max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min, max float64\n    min =\
    \ numbers[0]\n    max = numbers[0]\n    for _, n := range numbers {\n        if\
    \ n < min {\n            min = n\n        }\n        if n > max {\n          \
    \  max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    // find the smallest and largest numbers\n    var\
    \ smallest, largest float64\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    // find the\
    \ difference between the largest and smallest numbers\n    diff := largest - smallest\n\
    \    // create a new list of numbers, where each number is the original number\
    \ minus the smallest number,\n    // then divided by the difference between the\
    \ largest and smallest numbers\n    var rescaled_numbers []float64\n    for _,\
    \ number := range numbers {\n        rescaled_numbers = append(rescaled_numbers,\
    \ (number - smallest) / diff)\n    }\n    return rescaled_numbers\n}\n", "   \
    \ min := numbers[0]\n    max := numbers[0]\n    for _, v := range numbers {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, v := range numbers {\n        result[i] = (v - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"\
    At least two numbers are required\")\n    }\n\n    min, max := numbers[0], numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    if min == max {\n        panic(\"All numbers are equal\"\
    )\n    }\n\n    result := make([]float64, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min = numbers[0]\n    var max\
    \ = numbers[0]\n    for _, n := range numbers {\n        if n < min {\n      \
    \      min = n\n        }\n        if n > max {\n            max = n\n       \
    \ }\n    }\n    var result = make([]float64, len(numbers))\n    for i, n := range\
    \ numbers {\n        result[i] = (n - min) / (max - min)\n    }\n    return result\n\
    }\n", "    // find the min and max\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    // rescale\n    for i, number := range numbers {\n    \
    \    numbers[i] = (number - min) / (max - min)\n    }\n    return numbers\n}\n",
  "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n    for _,\
    \ n := range numbers {\n        if n < min {\n            min = n\n        }\n\
    \        if n > max {\n            max = n\n        }\n    }\n    var result []float64\n\
    \    for _, n := range numbers {\n        result = append(result, (n - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n  \
    \  min = numbers[0]\n    max = numbers[0]\n    for _, v := range numbers {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var result []float64\n    for _, v\
    \ := range numbers {\n        result = append(result, (v - min) / (max - min))\n\
    \    }\n    return result\n}\n", "    var min, max float64\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result = make([]float64, len(numbers))\n    for i, number := range numbers {\n\
    \        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n", "    var min, max float64\n    for _, number := range numbers {\n      \
    \  if number < min {\n            min = number\n        }\n        if number >\
    \ max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    var\
    \ result []float64\n    for _, v := range numbers {\n        result = append(result,\
    \ (v - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    var result []float64 = make([]float64,\
    \ len(numbers))\n\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n\n    for i, number := range numbers {\n\
    \        result[i] = (number - min) / (max - min)\n    }\n\n    return result\n\
    }\n", "    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min, max float64\n    min =\
    \ numbers[0]\n    max = numbers[0]\n    for _, number := range numbers {\n   \
    \     if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n\n\
    \    return result\n}\n", "    var min, max float64\n    min = numbers[0]\n  \
    \  max = numbers[0]\n    for _, n := range numbers {\n        if n < min {\n \
    \           min = n\n        }\n        if n > max {\n            max = n\n  \
    \      }\n    }\n    var result []float64\n    for _, n := range numbers {\n \
    \       result = append(result, (n - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    // find the smallest\
    \ and largest numbers\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    // apply the linear transform\n\
    \    for i, number := range numbers {\n        numbers[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n\n    return numbers\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    if min == max {\n        return numbers\n    }\n    result\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        result[i]\
    \ = (n - min) / (max - min)\n    }\n    return result\n}\n", "    var min = numbers[0]\n\
    \    var max = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    if min == max {\n        return numbers\n    }\n    result\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     result[i] = (number - min) / (max - min)\n    }\n    return result\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result = make([]float64, len(numbers))\n    for i, number := range numbers {\n\
    \        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    // find the smallest and largest numbers\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    // rescale the numbers\n    for i, number := range numbers {\n        numbers[i]\
    \ = (number - smallest) / (largest - smallest)\n    }\n\n    return numbers\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var result []float64\n    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        result = append(result, (number - min) / (max - min))\n \
    \   }\n    return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"At\
    \ least two numbers are required\")\n    }\n\n    min := numbers[0]\n    max :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < min {\n\
    \            min = number\n        }\n        if number > max {\n            max\
    \ = number\n        }\n    }\n\n    if min == max {\n        panic(\"All numbers\
    \ are equal\")\n    }\n\n    result := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n\n    return result\n}\n", "    var min float64 = numbers[0]\n    var\
    \ max float64 = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min = numbers[0]\n    var max\
    \ = numbers[0]\n    for _, n := range numbers {\n        if n < min {\n      \
    \      min = n\n        }\n        if n > max {\n            max = n\n       \
    \ }\n    }\n    var result = make([]float64, len(numbers))\n    for i, n := range\
    \ numbers {\n        result[i] = (n - min) / (max - min)\n    }\n    return result\n\
    }\n", "    var min = numbers[0]\n    var max = numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    var diff = max - min\n\
    \    var result = make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        result[i] = (n - min) / diff\n    }\n    return result\n}\n", " \
    \   var min float64 = numbers[0]\n    var max float64 = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result []float64\n    for _, number := range numbers {\n      \
    \  result = append(result, (number - min) / (max - min))\n    }\n    return result\n\
    }\n", "    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result = make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    var min float64 = numbers[0]\n    var max\
    \ float64 = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"Need at least two numbers to rescale\")\n    }\n    var\
    \ max float64 = numbers[0]\n    var min float64 = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        if number < min {\n            min = number\n        }\n   \
    \ }\n    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, v := range numbers\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    var diff = max - min\n    var\
    \ result = make([]float64, len(numbers))\n    for i, v := range numbers {\n  \
    \      result[i] = (v - min) / diff\n    }\n    return result\n}\n", "    // find\
    \ the min and max\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n\n    // rescale\n    for i, number := range numbers {\n        numbers[i]\
    \ = (number - min) / (max - min)\n    }\n\n    return numbers\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"Need at least two numbers\")\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    result := make([]float64, len(numbers))\n    for i, n :=\
    \ range numbers {\n        result[i] = (n - min) / (max - min)\n    }\n    return\
    \ result\n}\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\
    \    return result\n}\n", "    var min, max float64\n    min = numbers[0]\n  \
    \  max = numbers[0]\n    for _, number := range numbers {\n        if number <\
    \ min {\n            min = number\n        }\n        if number > max {\n    \
    \        max = number\n        }\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    var result []float64\n    for\
    \ _, n := range numbers {\n        result = append(result, (n - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n\
    \    return result\n}\n", "    var min, max float64\n    for _, v := range numbers\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    var result []float64\n    for\
    \ _, v := range numbers {\n        result = append(result, (v - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, n := range numbers {\n        if\
    \ n < min {\n            min = n\n        }\n        if n > max {\n          \
    \  max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    min = numbers[0]\n    max = numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    var result []float64\n    for _, n\
    \ := range numbers {\n        result = append(result, (n - min) / (max - min))\n\
    \    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"\
    At least two numbers are required\")\n    }\n\n    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n\n    return result\n}\n", "    var min, max float64\n    min\
    \ = numbers[0]\n    max = numbers[0]\n    for _, n := range numbers {\n      \
    \  if n < min {\n            min = n\n        }\n        if n > max {\n      \
    \      max = n\n        }\n    }\n    var result []float64\n    for _, n := range\
    \ numbers {\n        result = append(result, (n - min) / (max - min))\n    }\n\
    \    return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min = numbers[0]\n    var max\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    var min = numbers[0]\n    var max\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n       \
    \ panic(\"Need at least two numbers to rescale\")\n    }\n    var max float64\
    \ = numbers[0]\n    var min float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        if\
    \ number < min {\n            min = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    var\
    \ result []float64\n    for _, v := range numbers {\n        result = append(result,\
    \ (v - min) / (max - min))\n    }\n    return result\n}\n", "    // find the smallest\
    \ and largest numbers\n    var min float64 = numbers[0]\n    var max float64 =\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < min {\n\
    \            min = number\n        }\n        if number > max {\n            max\
    \ = number\n        }\n    }\n\n    // rescale the numbers\n    var rescaled_numbers\
    \ []float64\n    for _, number := range numbers {\n        rescaled_numbers =\
    \ append(rescaled_numbers, (number - min) / (max - min))\n    }\n\n    return\
    \ rescaled_numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, n := range numbers {\n        if n < min {\n            min = n\n       \
    \ }\n        if n > max {\n            max = n\n        }\n    }\n    if max ==\
    \ min {\n        return numbers\n    }\n    for i, n := range numbers {\n    \
    \    numbers[i] = (n - min) / (max - min)\n    }\n    return numbers\n}\n", " \
    \   var min, max float64\n    for i, v := range numbers {\n        if i == 0 {\n\
    \            min = v\n            max = v\n        } else {\n            if v\
    \ < min {\n                min = v\n            }\n            if v > max {\n\
    \                max = v\n            }\n        }\n    }\n    var result []float64\n\
    \    for _, v := range numbers {\n        result = append(result, (v - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    for i, number := range numbers {\n  \
    \      numbers[i] = (number - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    // find the min and max\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    //\
    \ rescale\n    for i, n := range numbers {\n        numbers[i] = (n - min) / (max\
    \ - min)\n    }\n    return numbers\n}\n", "    var min = numbers[0]\n    var\
    \ max = numbers[0]\n    for _, number := range numbers {\n        if number <\
    \ min {\n            min = number\n        }\n        if number > max {\n    \
    \        max = number\n        }\n    }\n    var range_ = max - min\n    var result\
    \ = make([]float64, len(numbers))\n    for i, number := range numbers {\n    \
    \    result[i] = (number - min) / range_\n    }\n    return result\n}\n", "  \
    \  var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n    for _,\
    \ v := range numbers {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    var result []float64\n\
    \    for _, v := range numbers {\n        result = append(result, (v - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"At least two numbers are required\")\n    }\n\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n\n    return result\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, v := range numbers\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    var result []float64\n    for\
    \ _, v := range numbers {\n        result = append(result, (v - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    min, max := numbers[0], numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    var min float64 = numbers[0]\n    var max float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result []float64\n    for _, number\
    \ := range numbers {\n        result = append(result, (number - min) / (max -\
    \ min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n \
    \   var max float64 = numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
