language: go_test.go
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfdarn_xi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfdarn_xi_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfdarn_xi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfdarn_xi_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    if len(myString) == 0 {\n        return false\n    }\n    if len(myString)\
    \ == 1 {\n        return false\n    }\n    if myString[0] == ']' {\n        return\
    \ false\n    }\n    if myString[len(myString)-1] == '[' {\n        return false\n\
    \    }\n    if myString[0] == '[' && myString[len(myString)-1] == ']' {\n    \
    \    return true\n    }\n    if myString[0] == '[' && myString[len(myString)-1]\
    \ == '[' {\n        return true\n    }\n    if myString[0] == ']' && myString[len(myString)-1]\
    \ == ']' {\n        return true\n    }\n    if myString[0] == ']' && myString[len(myString)-1]\
    \ == '[' {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmpu18mbym3_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmpu18mbym3_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmpu18mbym3_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmpu18mbym3_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmpu18mbym3_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmpu18mbym3_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpu18mbym3_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else {\n         \
    \   if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n      \
    \      } else {\n                return false\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp0fjsml9w_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp0fjsml9w_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp0fjsml9w_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp0fjsml9w_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if len(stack) > 0 {\n            stack = stack[:len(stack)-1]\n  \
    \      } else {\n            return false\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphc1x56ir_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphc1x56ir_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphc1x56ir_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphc1x56ir_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, c := range myString {\n        if\
    \ string(c) == \"[\" {\n            stack = append(stack, string(c))\n       \
    \ } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpdm5r95lv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpdm5r95lv_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpdm5r95lv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpdm5r95lv_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, c := range myString {\n        if\
    \ string(c) == \"[\" {\n            stack = append(stack, \"[\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpcmrv23lq_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpcmrv23lq_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpcmrv23lq_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpcmrv23lq_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var openBrackets int = 0\n    var closedBrackets int = 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        if myString[i] == '[' {\n        \
    \    openBrackets++\n        } else {\n            closedBrackets++\n        }\n\
    \        if closedBrackets > openBrackets {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp4tw961i8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp4tw961i8_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmp4tw961i8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp4tw961i8_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__12\
    \ (0.00s)\n        tmp4tw961i8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ v == '[' {\n            stack = append(stack, \"[\")\n        } else if v ==\
    \ ']' {\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpdfc0in_3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpdfc0in_3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpdfc0in_3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpdfc0in_3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else if v == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphw8xlxi8_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphw8xlxi8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphw8xlxi8_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphw8xlxi8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // TODO: Implement\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmplstru21f_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmplstru21f_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmplstru21f_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmplstru21f_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmplstru21f_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ v == '[' {\n            stack = append(stack, \"[\")\n        } else if v ==\
    \ ']' {\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpdfc0in_3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpdfc0in_3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpdfc0in_3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpdfc0in_3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, c := range myString {\n        if\
    \ c == '[' {\n            stack = append(stack, \"[\")\n        } else if c ==\
    \ ']' {\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpuu6yalcp_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpuu6yalcp_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpuu6yalcp_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpuu6yalcp_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfdarn_xi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfdarn_xi_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfdarn_xi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfdarn_xi_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo8l9zp_0_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo8l9zp_0_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo8l9zp_0_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo8l9zp_0_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) > 0 {\n    \
    \            stack = stack[:len(stack)-1]\n            } else {\n            \
    \    return false\n            }\n        }\n    }\n    return len(stack) == 0\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp4f7w483n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp4f7w483n_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp4f7w483n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp4f7w483n_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    var top string\n    for _, char := range\
    \ myString {\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else if char == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            top = stack[len(stack)-1]\n\
    \            stack = stack[:len(stack)-1]\n            if top == \"[\" {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmppbmllhhx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmppbmllhhx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmppbmllhhx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmppbmllhhx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmppbmllhhx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmppbmllhhx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == 91 {\n            stack = append(stack, \"[\")\n        } else if\
    \ char == 93 {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp5ti3y9te_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp5ti3y9te_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp5ti3y9te_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp5ti3y9te_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if len(stack) > 0 {\n            stack = stack[:len(stack)-1]\n  \
    \      } else {\n            return false\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphc1x56ir_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphc1x56ir_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphc1x56ir_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphc1x56ir_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo8l9zp_0_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo8l9zp_0_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo8l9zp_0_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo8l9zp_0_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else if v == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphw8xlxi8_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphw8xlxi8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphw8xlxi8_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphw8xlxi8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else if v == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphw8xlxi8_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphw8xlxi8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphw8xlxi8_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphw8xlxi8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2bunwvwk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2bunwvwk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2bunwvwk_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2bunwvwk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, c := range myString {\n        if\
    \ c == '[' {\n            stack = append(stack, \"[\")\n        } else if c ==\
    \ ']' {\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpuu6yalcp_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpuu6yalcp_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpuu6yalcp_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpuu6yalcp_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else {\n         \
    \   if len(stack) == 0 {\n                return false\n            }\n      \
    \      stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmptu152ywz_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmptu152ywz_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmptu152ywz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmptu152ywz_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else {\n         \
    \   if len(stack) == 0 {\n                return false\n            }\n      \
    \      stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmptu152ywz_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmptu152ywz_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmptu152ywz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmptu152ywz_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, v := range myString {\n        if v\
    \ == '[' {\n            stack = append(stack, v)\n        } else {\n         \
    \   if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n      \
    \      } else {\n                return false\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp0fjsml9w_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp0fjsml9w_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp0fjsml9w_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp0fjsml9w_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, r := range myString {\n        if r\
    \ == '[' {\n            stack = append(stack, r)\n        } else if r == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi4g0dtc6_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi4g0dtc6_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi4g0dtc6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi4g0dtc6_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, \"[\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpa4s4u2r2_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpa4s4u2r2_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpa4s4u2r2_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpa4s4u2r2_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, r := range myString {\n        if r\
    \ == '[' {\n            stack = append(stack, r)\n        } else if r == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi4g0dtc6_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi4g0dtc6_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi4g0dtc6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi4g0dtc6_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfdarn_xi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfdarn_xi_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfdarn_xi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfdarn_xi_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if len(stack) > 0 {\n            stack = stack[:len(stack)-1]\n  \
    \      } else {\n            return false\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphc1x56ir_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphc1x56ir_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphc1x56ir_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphc1x56ir_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ v == '[' {\n            stack = append(stack, \"[\")\n        } else if v ==\
    \ ']' {\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpdfc0in_3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpdfc0in_3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpdfc0in_3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpdfc0in_3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, c := range myString {\n        if\
    \ string(c) == \"[\" {\n            stack = append(stack, string(c))\n       \
    \ } else {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpnopxp3eg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpnopxp3eg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpnopxp3eg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpnopxp3eg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var myStack []rune\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            myStack = append(myStack, char)\n        } else\
    \ if char == ']' {\n            if len(myStack) > 0 {\n                myStack\
    \ = myStack[:len(myStack)-1]\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return len(myStack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmptn8nxpvn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmptn8nxpvn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmptn8nxpvn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmptn8nxpvn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwpv1i0lh_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwpv1i0lh_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, \"[\")\n    \
    \    } else if string(char) == \"]\" {\n            if len(stack) == 0 {\n   \
    \             return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgibuvzjx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgibuvzjx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2tffvlje_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2tffvlje_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           } else {\n                stack = stack[:len(stack)-1]\n         \
    \   }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp07uygukq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp07uygukq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, c := range myString {\n        if c\
    \ == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n\
    \            if len(stack) == 0 {\n                return false\n            }\
    \ else {\n                stack = stack[:len(stack)-1]\n            }\n      \
    \  }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp_u_qculk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp_u_qculk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp_u_qculk_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp_u_qculk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6jd0e9v0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6jd0e9v0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpyh382ylh_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpyh382ylh_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpp_yrbjlg_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpp_yrbjlg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []rune\n    for _, char := range myString {\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else if char\
    \ == ']' {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplb4yj6th_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplb4yj6th_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, v := range myString {\n        if\
    \ string(v) == \"[\" {\n            stack = append(stack, string(v))\n       \
    \ } else {\n            if len(stack) == 0 {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp812r5vj7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp812r5vj7_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9470j38e_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9470j38e_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp6tqb64q5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp6tqb64q5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmcfoto__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmcfoto__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []string\n    for _, char := range myString {\n      \
    \  if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvxpzlx93_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvxpzlx93_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n\
    // is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]')\
    \ \u279E True\n// is_nested('[[]][[') \u279E True\nfunc is_nested(myString string)\
    \ bool {\n    var stack []byte\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo3r7yg_a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo3r7yg_a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074371
