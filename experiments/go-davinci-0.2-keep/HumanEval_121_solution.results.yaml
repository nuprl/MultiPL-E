language: go_test.go
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, n := range lst {\n     \
    \   if i % 2 == 0 && n % 2 != 0 {\n            sum += n\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var result int\n    for i, v := range lst {\n\
    \        if i % 2 == 0 && v % 2 != 0 {\n            result += v\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst); i +=\
    \ 2 {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpxxhe7qpm_test.go:42: expected '%!s(int=12)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpxxhe7qpm_test.go:42:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpxxhe7qpm_test.go:42: expected '%!s(int=0)', got '%!s(int=334)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpxxhe7qpm_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpxxhe7qpm_test.go:42: expected '%!s(int=23)', got '%!s(int=13)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpxxhe7qpm_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
