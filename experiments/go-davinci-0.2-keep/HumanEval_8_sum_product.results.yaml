language: go_test.go
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int\n    if len(numbers) == 0 {\n        sum =\
    \ 0\n        product = 1\n    } else {\n        sum = numbers[0]\n        product\
    \ = numbers[0]\n        for _, number := range numbers[1:] {\n            sum\
    \ += number\n            product *= number\n        }\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum, product int\n    for _, n := range numbers {\n        sum += n\n \
    \       product *= n\n    }\n    return []interface{}{sum, product}\n}\n\nfunc\
    \ TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual:\
    \ candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n     { actual:\
    \ candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n     { actual:\
    \ candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n     { actual:\
    \ candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpluwi67cv_test.go:40: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n\
    \        tmpluwi67cv_test.go:40: expected '[%!s(int=3) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__3 (0.00s)\n        tmpluwi67cv_test.go:40:\
    \ expected '[%!s(int=15) %!s(int=105)]', got '[%!s(int=15) %!s(int=0)]'\n    ---\
    \ FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpluwi67cv_test.go:40: expected\
    \ '[%!s(int=10) %!s(int=10)]', got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, value := range numbers {\n        sum\
    \ += value\n        product *= value\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int = 1\n    for _, v := range numbers {\n   \
    \     sum += v\n        product *= v\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int\n    if len(numbers) == 0 {\n        sum =\
    \ 0\n        product = 1\n    } else {\n        sum = numbers[0]\n        product\
    \ = numbers[0]\n        for _, number := range numbers[1:] {\n            sum\
    \ += number\n            product *= number\n        }\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum\
    \ += num\n        product *= num\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmppgg_ei3h_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n\
    \        tmppgg_ei3h_test.go:41: expected '[%!s(int=3) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__3 (0.00s)\n        tmppgg_ei3h_test.go:41:\
    \ expected '[%!s(int=15) %!s(int=105)]', got '[%!s(int=15) %!s(int=0)]'\n    ---\
    \ FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmppgg_ei3h_test.go:41: expected\
    \ '[%!s(int=10) %!s(int=10)]', got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int = 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum, product int\n    for _, number := range numbers {\n        sum +=\
    \ number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpnk7lvsg9_test.go:40: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n\
    \        tmpnk7lvsg9_test.go:40: expected '[%!s(int=3) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__3 (0.00s)\n        tmpnk7lvsg9_test.go:40:\
    \ expected '[%!s(int=15) %!s(int=105)]', got '[%!s(int=15) %!s(int=0)]'\n    ---\
    \ FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpnk7lvsg9_test.go:40: expected\
    \ '[%!s(int=10) %!s(int=10)]', got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int = 1\n    for _, n := range numbers {\n   \
    \     sum += n\n        product *= n\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int\n    if len(numbers) == 0 {\n        sum =\
    \ 0\n        product = 1\n    } else {\n        sum = numbers[0]\n        product\
    \ = numbers[0]\n        for _, number := range numbers[1:] {\n            sum\
    \ += number\n            product *= number\n        }\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum, product int\n    for _, n := range numbers {\n        sum += n\n \
    \       product *= n\n    }\n    return []interface{}{sum, product}\n}\n\nfunc\
    \ TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual:\
    \ candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n     { actual:\
    \ candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n     { actual:\
    \ candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n     { actual:\
    \ candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpluwi67cv_test.go:40: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n\
    \        tmpluwi67cv_test.go:40: expected '[%!s(int=3) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__3 (0.00s)\n        tmpluwi67cv_test.go:40:\
    \ expected '[%!s(int=15) %!s(int=105)]', got '[%!s(int=15) %!s(int=0)]'\n    ---\
    \ FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpluwi67cv_test.go:40: expected\
    \ '[%!s(int=10) %!s(int=10)]', got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum, product int\n    for _, n := range numbers {\n        sum += n\n \
    \       product *= n\n    }\n    return []interface{}{sum, product}\n}\n\nfunc\
    \ TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual:\
    \ candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n     { actual:\
    \ candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n     { actual:\
    \ candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n     { actual:\
    \ candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpluwi67cv_test.go:40: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n\
    \        tmpluwi67cv_test.go:40: expected '[%!s(int=3) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__3 (0.00s)\n        tmpluwi67cv_test.go:40:\
    \ expected '[%!s(int=15) %!s(int=105)]', got '[%!s(int=15) %!s(int=0)]'\n    ---\
    \ FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpluwi67cv_test.go:40: expected\
    \ '[%!s(int=10) %!s(int=10)]', got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int = 1\n    for _, n := range numbers {\n   \
    \     sum += n\n        product *= n\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int = 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum, product int\n    for _, n := range numbers {\n        sum += n\n \
    \       product *= n\n    }\n    return []interface{}{sum, product}\n}\n\nfunc\
    \ TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual:\
    \ candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n     { actual:\
    \ candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n     { actual:\
    \ candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n     { actual:\
    \ candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpluwi67cv_test.go:40: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n\
    \        tmpluwi67cv_test.go:40: expected '[%!s(int=3) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestSum_Product/test_num__3 (0.00s)\n        tmpluwi67cv_test.go:40:\
    \ expected '[%!s(int=15) %!s(int=105)]', got '[%!s(int=15) %!s(int=0)]'\n    ---\
    \ FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpluwi67cv_test.go:40: expected\
    \ '[%!s(int=10) %!s(int=10)]', got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  if len(numbers) == 0 {\n        return []interface{}{0, 1}\n    }\n    sum\
    \ := 0\n    product := 1\n    for _, number := range numbers {\n        sum +=\
    \ number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  var sum int\n    var product int = 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, v := range numbers {\n        sum +=\
    \ v\n        product *= v\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum\
    \ += num\n        product *= num\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum\
    \ += num\n        product *= num\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
    \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n  \
    \  sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum +=\
    \ n\n        product *= n\n    }\n    return []interface{}{sum, product}\n}\n\n\
    func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075008
