name: HumanEval_158_find_max
language: go_test.go
prompt: "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Write a function that accepts a list of strings.\n// The list contains different\
  \ words. Return the word with maximum number\n// of unique characters. If multiple\
  \ strings have maximum number of unique\n// characters, return the one which comes\
  \ first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) ==\
  \ \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"\
  aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunc find_max(words []string) string\
  \ {\n"
tests: "func TestFind_Max(t *testing.T) {\n  candidate := find_max\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]string{\"name\", \"of\", \"string\"}), expected: \"\
  string\" },\n     { actual: candidate([]string{\"name\", \"enam\", \"game\"}), expected:\
  \ \"enam\" },\n     { actual: candidate([]string{\"aaaaaaa\", \"bb\", \"cc\"}),\
  \ expected: \"aaaaaaa\" },\n     { actual: candidate([]string{\"abc\", \"cba\"}),\
  \ expected: \"abc\" },\n     { actual: candidate([]string{\"play\", \"this\", \"\
  game\", \"of\", \"footbott\"}), expected: \"footbott\" },\n     { actual: candidate([]string{\"\
  we\", \"are\", \"gonna\", \"rock\"}), expected: \"gonna\" },\n     { actual: candidate([]string{\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"}), expected: \"nation\" },\n     { actual:\
  \ candidate([]string{\"this\", \"is\", \"a\", \"prrk\"}), expected: \"this\" },\n\
  \     { actual: candidate([]string{\"b\"}), expected: \"b\" },\n     { actual: candidate([]string{\"\
  play\", \"play\", \"play\"}), expected: \"play\" },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var max_word string\n    var max_count int\n    for _, word :=\
    \ range words {\n        unique_chars := make(map[rune]bool)\n        for _, char\
    \ := range word {\n            unique_chars[char] = true\n        }\n        if\
    \ len(unique_chars) > max_count {\n            max_count = len(unique_chars)\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n", " \
    \   var max_word string\n    var max_count int\n    for _, word := range words\
    \ {\n        count := count_unique_chars(word)\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n", "    max_word := \"\"\n    max_count := 0\n    for\
    \ _, word := range words {\n        count := count_unique_chars(word)\n      \
    \  if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n", "    if len(words) == 0\
    \ {\n        return \"\"\n    }\n    max_word := words[0]\n    max_count := 0\n\
    \    for _, word := range words {\n        count := count_unique_chars(word)\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n", "    var max_word string\n\
    \    var max_count int\n    for _, word := range words {\n        count := count_unique_chars(word)\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n", "    var max_word string\n\
    \    max_count := 0\n    for _, word := range words {\n        count := count_unique_chars(word)\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n", "    var max_word string\n\
    \    var max_count int\n\n    for _, word := range words {\n        count := count_unique_chars(word)\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n\n    return max_word\n}\n", "    if len(words) ==\
    \ 0 {\n        return \"\"\n    }\n    max_word := words[0]\n    max_count :=\
    \ 0\n    for _, word := range words {\n        count := 0\n        for _, char\
    \ := range word {\n            if !strings.ContainsRune(max_word, char) {\n  \
    \              count++\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n", "    var max_word string\n    var max_count\
    \ int\n    for _, word := range words {\n        if len(word) > max_count {\n\
    \            max_count = len(word)\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n", "    max_word := \"\"\n    max_count := 0\n\
    \    for _, word := range words {\n        count := 0\n        for _, char :=\
    \ range word {\n            if strings.Count(word, string(char)) == 1 {\n    \
    \            count++\n            }\n        }\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n", "    if len(words) == 0 {\n        return \"\"\n \
    \   }\n    max_word := words[0]\n    max_count := count_unique_chars(max_word)\n\
    \    for _, word := range words[1:] {\n        count := count_unique_chars(word)\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        } else if count == max_count && word < max_word {\n        \
    \    max_word = word\n        }\n    }\n    return max_word\n}\n", "    var max_word\
    \ string\n    var max_count int\n    for _, word := range words {\n        count\
    \ := count_unique_chars(word)\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n", "    var max_word string\n    var max_count int\n    for _, word := range\
    \ words {\n        count := count_unique_chars(word)\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n", "    max_word := \"\"\n    max_count := 0\n\
    \    for _, word := range words {\n        count := 0\n        for _, c := range\
    \ word {\n            if strings.Count(word, string(c)) == 1 {\n             \
    \   count++\n            }\n        }\n        if count > max_count {\n      \
    \      max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n", "    var max_word string\n    max_unique := 0\n    for _, word\
    \ := range words {\n        unique := 0\n        for _, char := range word {\n\
    \            if strings.Count(word, string(char)) == 1 {\n                unique\
    \ += 1\n            }\n        }\n        if unique > max_unique {\n         \
    \   max_unique = unique\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n", "    max_word := \"\"\n    max_count := 0\n    for _, word :=\
    \ range words {\n        count := 0\n        for _, char := range word {\n   \
    \         if !strings.Contains(max_word, string(char)) {\n                count\
    \ += 1\n            }\n        }\n        if count > max_count {\n           \
    \ max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n", "    max_word := \"\"\n    max_count := 0\n    for _, word :=\
    \ range words {\n        if len(word) > max_count {\n            max_count = len(word)\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n", " \
    \   max := 0\n    max_word := \"\"\n    for _, word := range words {\n       \
    \ if len(word) > max {\n            max = len(word)\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n", "    var max_word string\n    max_count\
    \ := 0\n    for _, word := range words {\n        count := 0\n        for _, char\
    \ := range word {\n            if !strings.Contains(max_word, string(char)) {\n\
    \                count++\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n", "    var max_word string\n    var max_count\
    \ int\n    for _, word := range words {\n        count := count_unique_chars(word)\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
