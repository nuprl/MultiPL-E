name: HumanEval_29_filter_by_prefix
language: go_test.go
prompt: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Filter an input list of strings only for ones that start with a given prefix.\n\
  // >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings []string,\
  \ prefix string) []string {\n"
tests: "func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\"\
  , \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []string\n    for _, s := range strings {\n        if\
    \ len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if str[0:len(prefix)] == prefix {\n\
    \            filtered = append(filtered, str)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var result []string\n  \
    \  for _, s := range strings {\n        if s[0:len(prefix)] == prefix {\n    \
    \        result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var result []string\n  \
    \  for _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, s := range strings {\n  \
    \      if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] ==\
    \ prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, s := range strings {\n  \
    \      if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] ==\
    \ prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, s := range strings {\n  \
    \      if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] ==\
    \ prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, s := range strings {\n  \
    \      if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] ==\
    \ prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, s := range strings {\n  \
    \      if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
