language: go_test.go
name: HumanEval_112_reverse_delete
results:
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !contains(c,\
    \ v) {\n            result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6sxcqo1_test.go:20:13: undefined: contains

    /tmp/tmpo6sxcqo1_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    result = append(result, s)\n    result =\
    \ append(result, s == reverse(s))\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz3zr97q_test.go:20:13: undefined: strings

    /tmp/tmppz3zr97q_test.go:23:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp3xoq0cex_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp3xoq0cex_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp3xoq0cex_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmp3xoq0cex_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp3xoq0cex_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp3xoq0cex_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp3xoq0cex_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = is_palindrome(result)\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ni9uvmx_test.go:21:13: undefined: strings

    /tmp/tmp0ni9uvmx_test.go:25:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    palindrome = is_palindrome(result)\n    return []interface{}{result,\
    \ palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe29xa9ft_test.go:21:13: undefined: contains

    /tmp/tmpe29xa9ft_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxu8tek2_test.go:20:13: undefined: strings

    /tmp/tmpvxu8tek2_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []rune\n    for _, r := range s {\n        if !contains(c,\
    \ r) {\n            result = append(result, r)\n        }\n    }\n    return []interface{}{string(result),\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3mqr86q_test.go:20:13: undefined: contains

    /tmp/tmpl3mqr86q_test.go:24:42: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, v := range s {\n\
    \        if !contains(c, string(v)) {\n            result += string(v)\n     \
    \   }\n    }\n    palindrome = is_palindrome(result)\n    return []interface{}{result,\
    \ palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82ig7t0w_test.go:21:13: undefined: contains

    /tmp/tmp82ig7t0w_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvb0dk6h_test.go:20:13: undefined: strings

    /tmp/tmpjvb0dk6h_test.go:24:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    palindrome = is_palindrome(result)\n   \
    \ return []interface{}{result, palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f8mrwqe_test.go:21:13: undefined: strings

    /tmp/tmp7f8mrwqe_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvb0dk6h_test.go:20:13: undefined: strings

    /tmp/tmpjvb0dk6h_test.go:24:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    var s_new string\n    var c_map = make(map[rune]bool)\n\
    \    for _, v := range c {\n        c_map[v] = true\n    }\n    for _, v := range\
    \ s {\n        if !c_map[v] {\n            s_new += string(v)\n        }\n   \
    \ }\n    result = append(result, s_new)\n    result = append(result, is_palindrome(s_new))\n\
    \    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73vzuwio_test.go:30:29: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = isPalindrome(result)\n  \
    \  return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq4fxkiv_test.go:21:13: undefined: strings

    /tmp/tmpsq4fxkiv_test.go:25:20: invalid operation: cannot call non-function isPalindrome
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    isPalindrome = isPalindromeString(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m_0lk4u_test.go:21:13: undefined: contains

    /tmp/tmp8m_0lk4u_test.go:25:20: undefined: isPalindromeString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []rune\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result = append(result, char)\n        }\n    }\n    return\
    \ []interface{}{string(result), isPalindrome(string(result))}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpalyr5r7__test.go:20:13: undefined: contains

    /tmp/tmpalyr5r7__test.go:24:42: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxu8tek2_test.go:20:13: undefined: strings

    /tmp/tmpvxu8tek2_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    result = append(result, s)\n    result =\
    \ append(result, s == reverse(s))\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz3zr97q_test.go:20:13: undefined: strings

    /tmp/tmppz3zr97q_test.go:23:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = isPalindrome(result)\n  \
    \  return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq4fxkiv_test.go:21:13: undefined: strings

    /tmp/tmpsq4fxkiv_test.go:25:20: invalid operation: cannot call non-function isPalindrome
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = isPalindrome(result)\n  \
    \  return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq4fxkiv_test.go:21:13: undefined: strings

    /tmp/tmpsq4fxkiv_test.go:25:20: invalid operation: cannot call non-function isPalindrome
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = isPalindrome(result)\n  \
    \  return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq4fxkiv_test.go:21:13: undefined: strings

    /tmp/tmpsq4fxkiv_test.go:25:20: invalid operation: cannot call non-function isPalindrome
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !is_in_string(string(v),\
    \ c) {\n            result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy15gh651_test.go:20:13: undefined: is_in_string

    /tmp/tmpy15gh651_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    result = append(result, s)\n    result =\
    \ append(result, isPalindrome(s))\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4j0p3tt_test.go:20:13: undefined: strings

    /tmp/tmpa4j0p3tt_test.go:23:29: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    palindrome = result == reverse(result)\n\
    \    return []interface{}{result, palindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpg8c1my_test.go:21:13: undefined: strings

    /tmp/tmpnpg8c1my_test.go:25:28: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = isPalindrome(result)\n  \
    \  return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsq4fxkiv_test.go:21:13: undefined: strings

    /tmp/tmpsq4fxkiv_test.go:25:20: invalid operation: cannot call non-function isPalindrome
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    palindrome = is_palindrome(result)\n    return []interface{}{result,\
    \ palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe29xa9ft_test.go:21:13: undefined: contains

    /tmp/tmpe29xa9ft_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    var new_s string\n    for _, char := range\
    \ s {\n        if !contains(c, string(char)) {\n            new_s += string(char)\n\
    \        }\n    }\n    result = append(result, new_s)\n    result = append(result,\
    \ is_palindrome(new_s))\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3166svc_test.go:21:13: undefined: contains

    /tmp/tmpc3166svc_test.go:26:29: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvb0dk6h_test.go:20:13: undefined: strings

    /tmp/tmpjvb0dk6h_test.go:24:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = true\n    for i := 0; i <\
    \ len(result) / 2; i++ {\n        if result[i] != result[len(result) - i - 1]\
    \ {\n            isPalindrome = false\n            break\n        }\n    }\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22h07p3z_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == Reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d2lh96o_test.go:20:13: undefined: strings

    /tmp/tmp1d2lh96o_test.go:24:44: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.ContainsRune(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx5r255n__test.go:20:13: undefined: strings

    /tmp/tmpx5r255n__test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !contains(c,\
    \ v) {\n            result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6sxcqo1_test.go:20:13: undefined: contains

    /tmp/tmpo6sxcqo1_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    isPalindrome = isPalindromeCheck(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe36gcrr5_test.go:21:13: undefined: contains

    /tmp/tmpe36gcrr5_test.go:25:20: undefined: isPalindromeCheck

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    if is_palindrome(result) {\n        palindrome = true\n\
    \    }\n    return []interface{}{result, palindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptf0izjjg_test.go:21:13: undefined: contains

    /tmp/tmptf0izjjg_test.go:25:8: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for i := 0; i < len(s);\
    \ i++ {\n        if !contains(c, s[i]) {\n            result += string(s[i])\n\
    \        }\n    }\n    isPalindrome = isPalindromeCheck(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyysd7zsc_test.go:21:13: undefined: contains

    /tmp/tmpyysd7zsc_test.go:25:20: undefined: isPalindromeCheck

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = is_palindrome(result)\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ni9uvmx_test.go:21:13: undefined: strings

    /tmp/tmp0ni9uvmx_test.go:25:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    if is_palindrome(result) {\n        palindrome = true\n\
    \    }\n    return []interface{}{result, palindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptf0izjjg_test.go:21:13: undefined: contains

    /tmp/tmptf0izjjg_test.go:25:8: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    result = append(result, s)\n    result =\
    \ append(result, s == reverse(s))\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz3zr97q_test.go:20:13: undefined: strings

    /tmp/tmppz3zr97q_test.go:23:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    palindrome = is_palindrome(result)\n   \
    \ return []interface{}{result, palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f8mrwqe_test.go:21:13: undefined: strings

    /tmp/tmp7f8mrwqe_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var res string\n    var palindrome bool\n    for _, char := range s {\n\
    \        if !contains(c, string(char)) {\n            res += string(char)\n  \
    \      }\n    }\n    palindrome = is_palindrome(res)\n    return []interface{}{res,\
    \ palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsoae0pe_test.go:21:13: undefined: contains

    /tmp/tmppsoae0pe_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = is_palindrome(result)\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ni9uvmx_test.go:21:13: undefined: strings

    /tmp/tmp0ni9uvmx_test.go:25:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    var new_s string\n    var is_palindrome\
    \ bool\n    for _, char := range s {\n        if !strings.Contains(c, string(char))\
    \ {\n            new_s += string(char)\n        }\n    }\n    if new_s == reverse(new_s)\
    \ {\n        is_palindrome = true\n    }\n    result = append(result, new_s, is_palindrome)\n\
    \    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7nh5gyr6_test.go:22:13: undefined: strings

    /tmp/tmp7nh5gyr6_test.go:26:17: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, ch := range s {\n        if !strings.Contains(c,\
    \ string(ch)) {\n            result += string(ch)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4bnr5_1_test.go:20:13: undefined: strings

    /tmp/tmpd4bnr5_1_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, r := range s {\n        if !strings.ContainsRune(c,\
    \ r) {\n            result += string(r)\n        }\n    }\n    return []interface{}{result,\
    \ result == Reverse(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n \
    \ candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqey1_6we_test.go:20:13: undefined: strings

    /tmp/tmpqey1_6we_test.go:24:44: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = true\n    for i := 0; i <\
    \ len(result) / 2; i++ {\n        if result[i] != result[len(result) - i - 1]\
    \ {\n            isPalindrome = false\n            break\n        }\n    }\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22h07p3z_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n\n    if result == reverse(result) {\n     \
    \   isPalindrome = true\n    }\n\n    return []interface{}{result, isPalindrome}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpctgt2fn7_test.go:22:13: undefined: strings

    /tmp/tmpctgt2fn7_test.go:27:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    if result == reverse(result) {\n       \
    \ palindrome = true\n    }\n    return []interface{}{result, palindrome}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuivnntto_test.go:21:13: undefined: strings

    /tmp/tmpuivnntto_test.go:25:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    isPalindrome = is_palindrome(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsv5rgz8_test.go:21:13: undefined: contains

    /tmp/tmpgsv5rgz8_test.go:25:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    result = append(result, s)\n    result =\
    \ append(result, s == reverse(s))\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz3zr97q_test.go:20:13: undefined: strings

    /tmp/tmppz3zr97q_test.go:23:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmp6vli_ara_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6vli_ara_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp6vli_ara_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp6vli_ara_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    for _, c_char := range c {\n        s =\
    \ strings.Replace(s, string(c_char), \"\", -1)\n    }\n    result = append(result,\
    \ s)\n    result = append(result, s == reverse(s))\n    return result\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9ykjtew_test.go:20:13: undefined: strings

    /tmp/tmpj9ykjtew_test.go:23:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    isPalindrome = isPalindromeCheck(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe36gcrr5_test.go:21:13: undefined: contains

    /tmp/tmpe36gcrr5_test.go:25:20: undefined: isPalindromeCheck

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpid7lr734_test.go:20:13: undefined: strings

    /tmp/tmpid7lr734_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    if result == reverse(result) {\n       \
    \ palindrome = true\n    }\n    return []interface{}{result, palindrome}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuivnntto_test.go:21:13: undefined: strings

    /tmp/tmpuivnntto_test.go:25:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    var str string\n    var isPalindrome bool\n\
    \    for _, char := range s {\n        if !contains(c, char) {\n            str\
    \ += string(char)\n        }\n    }\n    isPalindrome = is_palindrome(str)\n \
    \   result = append(result, str, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqiyg9gd_test.go:22:13: undefined: contains

    /tmp/tmpgqiyg9gd_test.go:26:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = is_palindrome(result)\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ni9uvmx_test.go:21:13: undefined: strings

    /tmp/tmp0ni9uvmx_test.go:25:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var palindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    palindrome = is_palindrome(result)\n    return []interface{}{result,\
    \ palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe29xa9ft_test.go:21:13: undefined: contains

    /tmp/tmpe29xa9ft_test.go:25:18: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == Reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d2lh96o_test.go:20:13: undefined: strings

    /tmp/tmp1d2lh96o_test.go:24:44: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result []interface{}\n    var new_s string\n    var is_palindrome\
    \ bool\n    for _, char := range s {\n        if !contains(c, char) {\n      \
    \      new_s += string(char)\n        }\n    }\n    is_palindrome = is_palindrome_string(new_s)\n\
    \    result = append(result, new_s, is_palindrome)\n    return result\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvv2yyk1n_test.go:22:13: undefined: contains

    /tmp/tmpvv2yyk1n_test.go:26:21: undefined: is_palindrome_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpid7lr734_test.go:20:13: undefined: strings

    /tmp/tmpid7lr734_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6h2kl82t_test.go:20:13: undefined: contains

    /tmp/tmp6h2kl82t_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx570lkf2_test.go:20:13: undefined: strings

    /tmp/tmpx570lkf2_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.ContainsRune(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx5r255n__test.go:20:13: undefined: strings

    /tmp/tmpx5r255n__test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwmbb1yt_test.go:21:13: undefined: strings

    /tmp/tmpbwmbb1yt_test.go:25:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, v := range s\
    \ {\n        if !strings.Contains(c, string(v)) {\n            result += string(v)\n\
    \        }\n    }\n    isPalindrome = isPalindrome(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4gpdmur_test.go:21:13: undefined: strings

    /tmp/tmpc4gpdmur_test.go:25:20: invalid operation: cannot call non-function isPalindrome
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, v := range s\
    \ {\n        if !contains(c, string(v)) {\n            result += string(v)\n \
    \       }\n    }\n    isPalindrome = isPalindromeString(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttatz517_test.go:21:13: undefined: contains

    /tmp/tmpttatz517_test.go:25:20: undefined: isPalindromeString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var is_palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    is_palindrome = result == reverse(result)\n\
    \    return []interface{}{result, is_palindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpam8xievj_test.go:21:13: undefined: strings

    /tmp/tmpam8xievj_test.go:25:31: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7p9nyy3a_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7p9nyy3a_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return []interface{}{s, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp3xoq0cex_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp3xoq0cex_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp3xoq0cex_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmp3xoq0cex_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp3xoq0cex_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp3xoq0cex_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp3xoq0cex_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    isPalindrome = isPalindromeString(result)\n    return []interface{}{result,\
    \ isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m_0lk4u_test.go:21:13: undefined: contains

    /tmp/tmp8m_0lk4u_test.go:25:20: undefined: isPalindromeString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var is_palindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    is_palindrome = result == reverse(result)\n\
    \    return []interface{}{result, is_palindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpam8xievj_test.go:21:13: undefined: strings

    /tmp/tmpam8xievj_test.go:25:31: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    for _, char := range c {\n        s = strings.Replace(s, string(char),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrdhowg__test.go:19:13: undefined: strings

    /tmp/tmpgrdhowg__test.go:21:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplnjff8pj_test.go:43:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmplnjff8pj_test.go:43: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga5ie09_test.go:20:13: undefined: contains

    /tmp/tmpfga5ie09_test.go:24:34: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.ContainsRune(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n \
    \ candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4lxdxv__test.go:20:13: undefined: strings

    /tmp/tmpn4lxdxv__test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073204
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ov0zqdt_test.go:20:13: undefined: contains

    /tmp/tmp2ov0zqdt_test.go:24:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j38ywsp_test.go:20:13: undefined: strings

    /tmp/tmp_j38ywsp_test.go:24:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\"\
    , the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\nfunc reverse_delete(s string, c string) []interface{}\
    \ {\n    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    isPalindrome = is_palindrome(result)\n \
    \   return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ni9uvmx_test.go:21:13: undefined: strings

    /tmp/tmp0ni9uvmx_test.go:25:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073202
