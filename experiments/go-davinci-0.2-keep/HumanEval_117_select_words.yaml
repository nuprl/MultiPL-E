name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2)\
  \ ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var words []string\n    var word string\n    var count int\n  \
    \  for _, c := range s {\n        if c == ' ' {\n            if count == n {\n\
    \                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            count = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count++\n            }\n        }\n    }\n    if count == n {\n\
    \        words = append(words, word)\n    }\n    return words\n}\n", "    var\
    \ words []string\n    var word string\n    var consonants int\n    for _, char\
    \ := range s {\n        if char == ' ' {\n            if consonants == n {\n \
    \               words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(char)\n\
    \            if isConsonant(char) {\n                consonants++\n          \
    \  }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var consonants\
    \ int\n    var word string\n    for _, char := range s {\n        if char == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            consonants = 0\n            word = \"\"\n\
    \        } else {\n            if isConsonant(char) {\n                consonants++\n\
    \            }\n            word += string(char)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              result = append(result, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result = append(result, word)\n\
    \    }\n    return result\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if isConsonant(c) {\n   \
    \             consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n            word += string(c)\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(char)\n            if isConsonant(char) {\n\
    \                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    for _, word := range split(s) {\n        if countConsonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var result []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  word += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var result []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                if count_consonants(word) == n {\n                    result\
    \ = append(result, word)\n                }\n                word = \"\"\n   \
    \         }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        if count_consonants(word) == n {\n          \
    \  result = append(result, word)\n        }\n    }\n    return result\n}\n", " \
    \   var result []string\n    var consonants = map[string]bool{\n        \"b\"\
    : true,\n        \"c\": true,\n        \"d\": true,\n        \"f\": true,\n  \
    \      \"g\": true,\n        \"h\": true,\n        \"j\": true,\n        \"k\"\
    : true,\n        \"l\": true,\n        \"m\": true,\n        \"n\": true,\n  \
    \      \"p\": true,\n        \"q\": true,\n        \"r\": true,\n        \"s\"\
    : true,\n        \"t\": true,\n        \"v\": true,\n        \"w\": true,\n  \
    \      \"x\": true,\n        \"y\": true,\n        \"z\": true,\n    }\n    var\
    \ words = strings.Split(s, \" \")\n    for _, word := range words {\n        var\
    \ count = 0\n        for _, letter := range word {\n            if consonants[strings.ToLower(string(letter))]\
    \ {\n                count++\n            }\n        }\n        if count == n\
    \ {\n            result = append(result, word)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var consonants int\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    consonants = 0\n            word = \"\"\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    // your code here\n    return nil\n\
    }\n", "    var words []string\n    var word string\n    var consonants int\n \
    \   var isConsonant bool\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    continue\n        }\n        isConsonant = true\n        switch c {\n   \
    \     case 'a', 'e', 'i', 'o', 'u':\n            isConsonant = false\n       \
    \ }\n        if isConsonant {\n            consonants++\n        }\n        word\
    \ += string(c)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
