language: go_test.go
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            current_beat /= 2\n\
    \        case '.':\n            result = append(result, current_beat)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmptrmmuyfs_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmptrmmuyfs_test.go:50: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmptrmmuyfs_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmptrmmuyfs_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    var current_note_length\
    \ int\n    for _, char := range music_string {\n        switch char {\n      \
    \      case 'o':\n                current_note_length = 4\n            case '|':\n\
    \                current_note_length = 2\n            case '.':\n            \
    \    current_note_length = 1\n            default:\n                continue\n\
    \        }\n        if current_note == 0 {\n            current_note = current_note_length\n\
    \        } else {\n            result = append(result, current_note)\n       \
    \     current_note = current_note_length\n        }\n    }\n    result = append(result,\
    \ current_note)\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp6w_7_3sy_test.go:60: expected '[]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp6w_7_3sy_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp6w_7_3sy_test.go:60: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp6w_7_3sy_test.go:60: expected\
    \ '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    var beat int\n    for _, char := range\
    \ music_string {\n        switch char {\n        case 'o':\n            beat =\
    \ 4\n        case '|':\n            beat /= 2\n        case '.':\n           \
    \ beat--\n        }\n        beats = append(beats, beat)\n    }\n    return beats\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpgo88deiy_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpgo88deiy_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=0) %!s(int=-1) %!s(int=0) %!s(int=0) %!s(int=-1) %!s(int=0)\
    \ %!s(int=0) %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpgo88deiy_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=-1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpgo88deiy_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    var note_count\
    \ int\n    for _, char := range music_string {\n        switch char {\n      \
    \  case 'o':\n            note_length = 4\n            note_count = 1\n      \
    \  case '|':\n            note_count += 1\n        case '.':\n            note_length\
    \ = 1\n            note_count = 1\n        case ' ':\n            result = append(result,\
    \ note_length * note_count)\n            note_count = 0\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpljerchbn_test.go:56: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpljerchbn_test.go:56: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpljerchbn_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=8) %!s(int=8)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpljerchbn_test.go:56: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=8) %!s(int=2)\
    \ %!s(int=8) %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                result = append(result, 2)\n\
    \                i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        } else if music_string[i] == '.' {\n            result\
    \ = append(result, 1)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3ys56b4m_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp3ys56b4m_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp3ys56b4m_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp3ys56b4m_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            result = append(result,\
    \ 4)\n        case '|':\n            result = append(result, 2)\n        case\
    \ '.':\n            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpxr7nb3ft_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var last_char byte\n    var count\
    \ int\n    for i := 0; i < len(music_string); i++ {\n        if music_string[i]\
    \ == ' ' {\n            continue\n        }\n        if music_string[i] == 'o'\
    \ {\n            if last_char == 'o' {\n                count++\n            }\
    \ else {\n                count = 1\n            }\n            last_char = 'o'\n\
    \        } else {\n            if last_char == 'o' {\n                result =\
    \ append(result, count * 4)\n                count = 0\n            }\n      \
    \      if last_char == '.' {\n                count++\n            } else {\n\
    \                count = 1\n            }\n            last_char = '.'\n     \
    \   }\n    }\n    if last_char == 'o' {\n        result = append(result, count\
    \ * 4)\n    } else {\n        result = append(result, count)\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmpr3l9i2up_test.go:70: expected '[]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestParse_Music/test_num__1 (0.00s)\n        tmpr3l9i2up_test.go:70:\
    \ expected '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=16)]'\n\
    \    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpr3l9i2up_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=8)]'\n\
    \    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpr3l9i2up_test.go:70:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=16)]'\n    ---\
    \ FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpr3l9i2up_test.go:70: expected\
    \ '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=8) %!s(int=8) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpfob8vbe4_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpfob8vbe4_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3ys56b4m_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp3ys56b4m_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp3ys56b4m_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp3ys56b4m_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            if current_note\
    \ == \"o\" {\n                current_note_length = 4\n            } else if current_note\
    \ == \"o|\" {\n                current_note_length = 2\n            } else if\
    \ current_note == \".|\" {\n                current_note_length = 1\n        \
    \    }\n        }\n    }\n    result = append(result, current_note_length)\n \
    \   return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp7caej2r__test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            if current_note\
    \ == \"o\" {\n                current_note_length = 4\n            } else if current_note\
    \ == \"o|\" {\n                current_note_length = 2\n            } else if\
    \ current_note == \".|\" {\n                current_note_length = 1\n        \
    \    }\n        }\n    }\n    result = append(result, current_note_length)\n \
    \   return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp7caej2r__test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpfob8vbe4_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpfob8vbe4_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note_length int\n   \
    \ for _, char := range music_string {\n        if char == 'o' {\n            current_note_length\
    \ = 4\n        } else if char == '|' {\n            current_note_length = current_note_length\
    \ / 2\n        } else if char == '.' {\n            current_note_length = current_note_length\
    \ / 2\n        } else if char == ' ' {\n            result = append(result, current_note_length)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp1yx9q4ru_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmp1yx9q4ru_test.go:51: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp1yx9q4ru_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp1yx9q4ru_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=0)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var count int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            count++\n\
    \        case '|':\n            result = append(result, count)\n            count\
    \ = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp4z2jcaup_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp4z2jcaup_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp4z2jcaup_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp4z2jcaup_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current int\n    for _, char\
    \ := range music_string {\n        switch char {\n        case 'o':\n        \
    \    current = 4\n        case '|':\n            result = append(result, current)\n\
    \            current = 0\n        case '.':\n            current = 1\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpac3usaia_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpac3usaia_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpac3usaia_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    var beat int\n    for _, char := range\
    \ music_string {\n        switch char {\n        case 'o':\n            beat =\
    \ 4\n        case '|':\n            beat = beat / 2\n        case '.':\n     \
    \       beat = beat / 2\n        }\n        beats = append(beats, beat)\n    }\n\
    \    return beats\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp0a_ilw2c_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp0a_ilw2c_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp0a_ilw2c_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp0a_ilw2c_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    for _, char\
    \ := range music_string {\n        switch char {\n        case 'o':\n        \
    \    note_length = 4\n        case '|':\n            note_length /= 2\n      \
    \  case '.':\n            note_length = 1\n        }\n        result = append(result,\
    \ note_length)\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpvulmcf55_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpvulmcf55_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpvulmcf55_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpvulmcf55_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            beats = append(beats,\
    \ 4)\n        case '|':\n            beats = append(beats, 2)\n        case '.':\n\
    \            beats = append(beats, 1)\n        }\n    }\n    return beats\n}\n\
    \nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpe9nzfk1l_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpe9nzfk1l_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpe9nzfk1l_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note_length int\n   \
    \ for _, char := range music_string {\n        switch char {\n        case 'o':\n\
    \            current_note_length = 4\n        case '|':\n            current_note_length\
    \ /= 2\n        case '.':\n            result = append(result, current_note_length)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpz3j_yxed_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpz3j_yxed_test.go:50: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpz3j_yxed_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpz3j_yxed_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // your code here\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp0uienu10_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp0uienu10_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp0uienu10_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp0uienu10_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current int\n    for _, char\
    \ := range music_string {\n        switch char {\n        case 'o':\n        \
    \    current = 4\n        case '|':\n            result = append(result, current)\n\
    \            current = 0\n        case '.':\n            current = 1\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpac3usaia_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpac3usaia_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpac3usaia_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ c := range music_string {\n        if c == 'o' {\n            current_beat =\
    \ 4\n        } else if c == '|' {\n            current_beat /= 2\n        } else\
    \ if c == '.' {\n            result = append(result, current_beat)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpif4du5bs_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpif4du5bs_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpif4du5bs_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpif4du5bs_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beats int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            beats = 4\n\
    \        case '|':\n            beats = 2\n        case '.':\n            beats\
    \ = 1\n        default:\n            beats = 0\n        }\n        result = append(result,\
    \ beats)\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpi5bt9l9z_test.go:53: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpi5bt9l9z_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpi5bt9l9z_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpi5bt9l9z_test.go:53: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            if current_note\
    \ == \"o\" {\n                current_note_length = 4\n            } else if current_note\
    \ == \"o|\" {\n                current_note_length = 2\n            } else if\
    \ current_note == \".|\" {\n                current_note_length = 1\n        \
    \    }\n        }\n    }\n    result = append(result, current_note_length)\n \
    \   return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp7caej2r__test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            if current_note\
    \ == \"o\" {\n                current_note_length = 4\n            } else if current_note\
    \ == \"o|\" {\n                current_note_length = 2\n            } else if\
    \ current_note == \".|\" {\n                current_note_length = 1\n        \
    \    }\n        }\n    }\n    result = append(result, current_note_length)\n \
    \   return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp7caej2r__test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current int\n    for _, char\
    \ := range music_string {\n        switch char {\n        case 'o':\n        \
    \    current = 4\n        case '|':\n            result = append(result, current)\n\
    \            current = 0\n        case '.':\n            current = 1\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpac3usaia_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpac3usaia_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpac3usaia_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat += 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpg8a0n3up_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpg8a0n3up_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpg8a0n3up_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            result = append(result,\
    \ 4)\n        case '|':\n            result = append(result, 2)\n        case\
    \ '.':\n            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpxr7nb3ft_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i+1 < len(music_string)\
    \ && music_string[i+1] == '|' {\n                result = append(result, 2)\n\
    \                i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        } else if music_string[i] == '.' {\n            result\
    \ = append(result, 1)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_note\
    \ = 4\n        } else if char == '|' {\n            current_note = current_note\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_note)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp4e4d592v_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp4e4d592v_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp4e4d592v_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp4e4d592v_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    var note_count\
    \ int\n    for _, char := range music_string {\n        if char == 'o' {\n   \
    \         note_length = 4\n        } else if char == '|' {\n            note_length\
    \ = 2\n        } else if char == '.' {\n            note_length = 1\n        }\
    \ else {\n            continue\n        }\n        note_count++\n        if note_count\
    \ == 2 {\n            result = append(result, note_length)\n            note_count\
    \ = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpw3jcqvy4_test.go:57: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpw3jcqvy4_test.go:57: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL:\
    \ TestParse_Music/test_num__3 (0.00s)\n        tmpw3jcqvy4_test.go:57: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpw3jcqvy4_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note_length int\n   \
    \ for _, char := range music_string {\n        switch char {\n        case 'o':\n\
    \            current_note_length = 4\n        case '|':\n            current_note_length\
    \ /= 2\n        case '.':\n            result = append(result, current_note_length)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpz3j_yxed_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpz3j_yxed_test.go:50: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpz3j_yxed_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpz3j_yxed_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int = 0\n    for\
    \ _, char := range music_string {\n        switch char {\n            case 'o':\n\
    \                current_beat = 4\n            case '|':\n                result\
    \ = append(result, current_beat)\n                current_beat = 0\n         \
    \   case '.':\n                current_beat = 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmplcdq0nz__test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmplcdq0nz__test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmplcdq0nz__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat += 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpg8a0n3up_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpg8a0n3up_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpg8a0n3up_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, c := range music_string {\n\
    \        switch c {\n        case 'o':\n            result = append(result, 4)\n\
    \        case '|':\n            result[len(result)-1] /= 2\n        }\n    }\n\
    \    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.parse_music(...)\n\t/tmp/tmpq7hqh5er_test.go:24\n\
    command-line-arguments_test.TestParse_Music(0x0?)\n\t/tmp/tmpq7hqh5er_test.go:39\
    \ +0xbe5\ntesting.tRunner(0xc0000da340, 0x529038)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    for _, char\
    \ := range music_string {\n        if char == 'o' {\n            note_length =\
    \ 4\n        } else if char == '|' {\n            note_length = 2\n        } else\
    \ if char == '.' {\n            note_length = 1\n        }\n        result = append(result,\
    \ note_length)\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmprx0sljkt_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmprx0sljkt_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmprx0sljkt_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmprx0sljkt_test.go:50: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                result = append(result, 2)\n\
    \                i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        } else if music_string[i] == '.' {\n            result\
    \ = append(result, 1)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_map = map[string]int{\n\
    \        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    var note_length\
    \ int\n    for _, note := range music_string {\n        note_length = note_map[string(note)]\n\
    \        result = append(result, note_length)\n    }\n    return result\n}\n\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpeorr0h74_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpeorr0h74_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpeorr0h74_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpeorr0h74_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var res []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                res = append(res, 2)\n    \
    \            i++\n            } else {\n                res = append(res, 4)\n\
    \            }\n        } else if music_string[i] == '.' {\n            res =\
    \ append(res, 1)\n        }\n    }\n    return res\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            result = append(result,\
    \ 4)\n        case '|':\n            result = append(result, 2)\n        case\
    \ '.':\n            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpxr7nb3ft_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    var note_string\
    \ string\n    for i := 0; i < len(music_string); i++ {\n        if music_string[i]\
    \ == ' ' {\n            result = append(result, note_length)\n            note_length\
    \ = 0\n            note_string = \"\"\n        } else {\n            note_string\
    \ += string(music_string[i])\n            if note_string == \"o\" {\n        \
    \        note_length = 4\n            } else if note_string == \"o|\" {\n    \
    \            note_length = 2\n            } else if note_string == \".|\" {\n\
    \                note_length = 1\n            }\n        }\n    }\n    result\
    \ = append(result, note_length)\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp1o9_5_5d_test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         if current_note == 0 {\n                current_note = 4\n         \
    \   } else {\n                current_note += 4\n            }\n        case '|':\n\
    \            if current_note == 0 {\n                current_note = 2\n      \
    \      } else {\n                current_note += 2\n            }\n        case\
    \ '.':\n            if current_note == 0 {\n                current_note = 1\n\
    \            } else {\n                current_note += 1\n            }\n    \
    \    case ' ':\n            result = append(result, current_note)\n          \
    \  current_note = 0\n        }\n    }\n    result = append(result, current_note)\n\
    \    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmpob20q00x_test.go:66: expected '[]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpob20q00x_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpob20q00x_test.go:66: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=6) %!s(int=6) %!s(int=3)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpob20q00x_test.go:66: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=6) %!s(int=3)\
    \ %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=4) %!s(int=6)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beat int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            beat = 4\n\
    \        case '|':\n            result = append(result, beat)\n            beat\
    \ = 0\n        case '.':\n            beat = 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpzb23ajun_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpzb23ajun_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpzb23ajun_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ c := range music_string {\n        switch c {\n        case 'o':\n         \
    \   current_beat = 4\n        case '|':\n            result = append(result, current_beat)\n\
    \            current_beat = 0\n        case '.':\n            current_beat = 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmplz2vk632_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmplz2vk632_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmplz2vk632_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current int\n    for _, char\
    \ := range music_string {\n        switch char {\n        case 'o':\n        \
    \    current = 4\n        case '|':\n            result = append(result, current)\n\
    \            current = 0\n        case '.':\n            current = 1\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpac3usaia_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpac3usaia_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpac3usaia_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpfob8vbe4_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpfob8vbe4_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            switch current_note\
    \ {\n            case \"o\":\n                current_note_length = 4\n      \
    \      case \"o|\":\n                current_note_length = 2\n            case\
    \ \".|\":\n                current_note_length = 1\n            }\n        }\n\
    \    }\n    result = append(result, current_note_length)\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmpsp7p63yp_test.go:59: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, c := range music_string {\n\
    \        switch c {\n        case 'o':\n            result = append(result, 4)\n\
    \        case '|':\n            result[len(result)-1] /= 2\n        case '.':\n\
    \            result[len(result)-1] /= 2\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.parse_music(...)\n\t/tmp/tmpaf5sjywa_test.go:26\n\
    command-line-arguments_test.TestParse_Music(0x0?)\n\t/tmp/tmpaf5sjywa_test.go:41\
    \ +0xd1f\ntesting.tRunner(0xc0000cc4e0, 0x529038)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_note\
    \ += 4\n        } else if char == '|' {\n            result = append(result, current_note)\n\
    \            current_note = 0\n        } else if char == '.' {\n            current_note\
    \ += 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpto4uvh57_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpto4uvh57_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpto4uvh57_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=8)\
    \ %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            result = append(result,\
    \ 4)\n        case '|':\n            result = append(result, 2)\n        case\
    \ '.':\n            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpxr7nb3ft_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    var beat int\n    for _, char := range\
    \ music_string {\n        switch char {\n        case 'o':\n            beat =\
    \ 4\n        case '|':\n            beat = 2\n        case '.':\n            beat\
    \ = 1\n        }\n        beats = append(beats, beat)\n    }\n    return beats\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmphf2t2jq6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmphf2t2jq6_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmphf2t2jq6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmphf2t2jq6_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            if current_note\
    \ == \"o\" {\n                current_note_length = 4\n            } else if current_note\
    \ == \"o|\" {\n                current_note_length = 2\n            } else if\
    \ current_note == \".|\" {\n                current_note_length = 1\n        \
    \    }\n        }\n    }\n    result = append(result, current_note_length)\n \
    \   return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp7caej2r__test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_char string\n    var\
    \ current_char_count int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            if current_char == \"o\" {\n                result\
    \ = append(result, 4)\n            } else if current_char == \"o|\" {\n      \
    \          result = append(result, 2)\n            } else if current_char == \"\
    .|\" {\n                result = append(result, 1)\n            }\n          \
    \  current_char = \"\"\n            current_char_count = 0\n        } else {\n\
    \            current_char += string(char)\n            current_char_count += 1\n\
    \        }\n    }\n    if current_char == \"o\" {\n        result = append(result,\
    \ 4)\n    } else if current_char == \"o|\" {\n        result = append(result,\
    \ 2)\n    } else if current_char == \".|\" {\n        result = append(result,\
    \ 1)\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    var length int\n \
    \   length = len(music_string)\n    for i = 0; i < length; i++ {\n        if music_string[i]\
    \ == 'o' {\n            if i + 1 < length && music_string[i + 1] == '|' {\n  \
    \              result = append(result, 2)\n                i++\n            }\
    \ else {\n                result = append(result, 4)\n            }\n        }\
    \ else if music_string[i] == '.' {\n            result = append(result, 1)\n \
    \           i++\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 2
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    var beat int\n    var note string\n\
    \    for _, note = range music_string {\n        switch note {\n        case 'o':\n\
    \            beat = 4\n        case '|':\n            beat = 2\n        case '.':\n\
    \            beat = 1\n        }\n        beats = append(beats, beat)\n    }\n\
    \    return beats\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcw6o949m_test.go:21:12: cannot use note (value of type rune) as type string
    in assignment

    /tmp/tmpcw6o949m_test.go:23:14: cannot convert ''o'' (untyped rune constant 111)
    to string

    /tmp/tmpcw6o949m_test.go:25:14: cannot convert ''|'' (untyped rune constant 124)
    to string

    /tmp/tmpcw6o949m_test.go:27:14: cannot convert ''.'' (untyped rune constant 46)
    to string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beat int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            beat = 4\n\
    \        case '|':\n            beat = beat / 2\n        case '.':\n         \
    \   beat = beat / 2\n        }\n        result = append(result, beat)\n    }\n\
    \    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpoi38w8aa_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpoi38w8aa_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpoi38w8aa_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpoi38w8aa_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    for i :=\
    \ 0; i < len(music_string); i++ {\n        switch music_string[i] {\n        case\
    \ 'o':\n            note_length = 4\n        case '|':\n            note_length\
    \ = 2\n        case '.':\n            note_length = 1\n        }\n        result\
    \ = append(result, note_length)\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp_rsb2h78_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp_rsb2h78_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp_rsb2h78_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp_rsb2h78_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, r := range music_string {\n\
    \        switch r {\n        case 'o':\n            result = append(result, 4)\n\
    \        case '|':\n            result = append(result, 1)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp7s77ace4_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=1)\
    \ %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp7s77ace4_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var count int\n    for _, c := range\
    \ music_string {\n        if c == 'o' {\n            count++\n        } else if\
    \ c == '|' {\n            result = append(result, count)\n            count =\
    \ 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpxkevlfty_test.go:48: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpxkevlfty_test.go:48: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpxkevlfty_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpxkevlfty_test.go:48: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = 2\n       \
    \ } else if char == '.' {\n            current_beat = 1\n        }\n        result\
    \ = append(result, current_beat)\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp6edpplrz_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp6edpplrz_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp6edpplrz_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp6edpplrz_test.go:50: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpfob8vbe4_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpfob8vbe4_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpfob8vbe4_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                result = append(result, 2)\n\
    \                i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        } else if music_string[i] == '.' {\n            result\
    \ = append(result, 1)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beats int\n    for _, char :=\
    \ range music_string {\n        switch char {\n        case 'o':\n           \
    \ beats = 4\n        case '|':\n            beats = 2\n        case '.':\n   \
    \         beats = 1\n        default:\n            beats = 0\n        }\n    \
    \    result = append(result, beats)\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2jkv7vjz_test.go:53: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp2jkv7vjz_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp2jkv7vjz_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp2jkv7vjz_test.go:53: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_note\
    \ = 4\n        } else if char == '|' {\n            current_note = current_note\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_note)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp4e4d592v_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp4e4d592v_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp4e4d592v_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp4e4d592v_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code goes here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpcmty48pp_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpcmty48pp_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpcmty48pp_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpcmty48pp_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ c := range music_string {\n        switch c {\n        case 'o':\n         \
    \   current_beat = 4\n        case '|':\n            result = append(result, current_beat)\n\
    \            current_beat = 0\n        case '.':\n            current_beat = 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmplz2vk632_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmplz2vk632_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmplz2vk632_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, c := range music_string {\n\
    \        switch c {\n        case 'o':\n            result = append(result, 4)\n\
    \        case '|':\n            result = append(result, 2)\n        case '.':\n\
    \            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmp229f3sw2_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp229f3sw2_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp229f3sw2_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ c := range music_string {\n        switch c {\n        case 'o':\n         \
    \   current_note = 4\n        case '|':\n            result = append(result, current_note)\n\
    \            current_note = 0\n        case '.':\n            current_note = 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm4rudkkq_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm4rudkkq_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm4rudkkq_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            current_beat = current_beat\
    \ / 2\n        case '.':\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp1s3yttdw_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp1s3yttdw_test.go:50: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp1s3yttdw_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp1s3yttdw_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current int\n    for _, c :=\
    \ range music_string {\n        switch c {\n        case 'o':\n            current\
    \ = 4\n        case '|':\n            result = append(result, current)\n     \
    \       current = 0\n        case '.':\n            current = 1\n        }\n \
    \   }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp585q6ktm_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp585q6ktm_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp585q6ktm_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // TODO: implement this function\n    return []int{}\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpyikljmqx_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpyikljmqx_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpyikljmqx_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpyikljmqx_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                result = append(result, 2)\n\
    \                i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        } else if music_string[i] == '.' {\n            result\
    \ = append(result, 1)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ c := range music_string {\n        switch c {\n        case 'o':\n         \
    \   current_beat = 4\n        case '|':\n            result = append(result, current_beat)\n\
    \            current_beat = 0\n        case '.':\n            current_beat = 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmplz2vk632_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmplz2vk632_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmplz2vk632_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // your code here\n    return []int{}\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3ys56b4m_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp3ys56b4m_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp3ys56b4m_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp3ys56b4m_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            result = append(result,\
    \ 4)\n        case '|':\n            result = append(result, 2)\n        case\
    \ '.':\n            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpxr7nb3ft_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpxr7nb3ft_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ c := range music_string {\n        if c == 'o' {\n            current_note =\
    \ 4\n        } else if c == '|' {\n            current_note = current_note / 2\n\
    \        } else if c == '.' {\n            result = append(result, current_note)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpbw3hu7b4_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpbw3hu7b4_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpbw3hu7b4_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpbw3hu7b4_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int = 0\n    for\
    \ _, char := range music_string {\n        if char == 'o' {\n            current_note\
    \ += 4\n        } else if char == '|' {\n            result = append(result, current_note)\n\
    \            current_note = 0\n        } else if char == '.' {\n            current_note\
    \ += 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp0d3b31vi_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp0d3b31vi_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp0d3b31vi_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=8)\
    \ %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpwx_n033e_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpwx_n033e_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpwx_n033e_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpwx_n033e_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_length int\n    for _, char\
    \ := range music_string {\n        switch char {\n        case 'o':\n        \
    \    note_length = 4\n        case '|':\n            note_length /= 2\n      \
    \  case '.':\n            note_length = 1\n        default:\n            continue\n\
    \        }\n        result = append(result, note_length)\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmp9zgl4bhb_test.go:53: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp9zgl4bhb_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp9zgl4bhb_test.go:53: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    for _, r := range music_string {\n\
    \        switch r {\n        case 'o':\n            result = append(result, 4)\n\
    \        case '|':\n            result = append(result, 2)\n        case '.':\n\
    \            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpszpk0uvr_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpszpk0uvr_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpszpk0uvr_test.go:49: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // TODO: Implement this function.\n    return []int{}\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpzqcw55w3_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpzqcw55w3_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpzqcw55w3_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpzqcw55w3_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beat int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            beat = 4\n\
    \        case '|':\n            result = append(result, beat)\n            beat\
    \ = 0\n        case '.':\n            beat = 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpzb23ajun_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpzb23ajun_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpzb23ajun_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int = 0\n    for\
    \ _, char := range music_string {\n        switch char {\n            case 'o':\n\
    \                current_beat = 4\n            case '|':\n                result\
    \ = append(result, current_beat)\n                current_beat = 0\n         \
    \   case '.':\n                current_beat = 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmplcdq0nz__test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmplcdq0nz__test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmplcdq0nz__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    var count int\n  \
    \  for i = 0; i < len(music_string); i++ {\n        if music_string[i] == 'o'\
    \ {\n            if i + 1 < len(music_string) && music_string[i + 1] == '|' {\n\
    \                result = append(result, 2)\n                i++\n           \
    \ } else {\n                result = append(result, 4)\n            }\n      \
    \  } else if music_string[i] == '.' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                result = append(result, 1)\n\
    \                i++\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxapfpfd_test.go:20:9: count declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    for\
    \ _, r := range music_string {\n        if r == ' ' {\n            if current_note\
    \ == \"o\" {\n                result = append(result, 4)\n            } else if\
    \ current_note == \"o|\" {\n                result = append(result, 2)\n     \
    \       } else if current_note == \".|\" {\n                result = append(result,\
    \ 1)\n            }\n            current_note = \"\"\n        } else {\n     \
    \       current_note += string(r)\n        }\n    }\n    return result\n}\n\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpff50lp31_test.go:54: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2\
    \ (0.00s)\n        tmpff50lp31_test.go:54: expected '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmpff50lp31_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpff50lp31_test.go:54: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_note\
    \ = 4\n        } else if char == '|' {\n            current_note = current_note\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_note)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp4e4d592v_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp4e4d592v_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp4e4d592v_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp4e4d592v_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        if char == 'o' {\n            current_beat\
    \ = 4\n        } else if char == '|' {\n            current_beat = current_beat\
    \ / 2\n        } else if char == '.' {\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp39b273w__test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp39b273w__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp39b273w__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ c := range music_string {\n        switch c {\n        case 'o':\n         \
    \   current_note = 4\n        case '|':\n            result = append(result, current_note)\n\
    \            current_note = 0\n        case '.':\n            current_note = 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm4rudkkq_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm4rudkkq_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm4rudkkq_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note_length int\n   \
    \ for _, char := range music_string {\n        if char == 'o' {\n            current_note_length\
    \ = 4\n        } else if char == '|' {\n            current_note_length /= 2\n\
    \        } else if char == '.' {\n            result = append(result, current_note_length)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp5wf746q1_test.go:49: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp5wf746q1_test.go:49: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp5wf746q1_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp5wf746q1_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beats int\n    var note string\n\
    \    for _, char := range music_string {\n        if char == ' ' {\n         \
    \   result = append(result, beats)\n            beats = 0\n            note =\
    \ \"\"\n        } else {\n            note += string(char)\n            if note\
    \ == \"o\" {\n                beats = 4\n            } else if note == \"o|\"\
    \ {\n                beats = 2\n            } else if note == \".|\" {\n     \
    \           beats = 1\n            }\n        }\n    }\n    result = append(result,\
    \ beats)\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp2h7v1dz5_test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_map = map[string]int{\n\
    \        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    for _,\
    \ note := range music_string {\n        result = append(result, note_map[string(note)])\n\
    \    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpj5v5asmd_test.go:47: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpj5v5asmd_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpj5v5asmd_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpj5v5asmd_test.go:47: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beats int\n    for _, char :=\
    \ range music_string {\n        switch char {\n        case 'o':\n           \
    \ beats = 4\n        case '|':\n            beats = 2\n        case '.':\n   \
    \         beats = 1\n        default:\n            beats = 0\n        }\n    \
    \    result = append(result, beats)\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2jkv7vjz_test.go:53: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp2jkv7vjz_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp2jkv7vjz_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp2jkv7vjz_test.go:53: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note string\n    var\
    \ current_note_length int\n    for _, char := range music_string {\n        if\
    \ char == ' ' {\n            result = append(result, current_note_length)\n  \
    \          current_note = \"\"\n            current_note_length = 0\n        }\
    \ else {\n            current_note += string(char)\n            if current_note\
    \ == \"o\" {\n                current_note_length = 4\n            } else if current_note\
    \ == \"o|\" {\n                current_note_length = 2\n            } else if\
    \ current_note == \".|\" {\n                current_note_length = 1\n        \
    \    }\n        }\n    }\n    result = append(result, current_note_length)\n \
    \   return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__0\
    \ (0.00s)\n        tmp7caej2r__test.go:58: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            current_beat = current_beat\
    \ / 2\n        case '.':\n            result = append(result, current_beat)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp1s3yttdw_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp1s3yttdw_test.go:50: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3\
    \ (0.00s)\n        tmp1s3yttdw_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp1s3yttdw_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beats int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            beats = 4\n\
    \        case '|':\n            result = append(result, beats)\n            beats\
    \ = 0\n        case '.':\n            beats = 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpl9cd389o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpl9cd389o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpl9cd389o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var note_map = map[string]int{\n\
    \        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    for _,\
    \ note := range music_string {\n        result = append(result, note_map[string(note)])\n\
    \    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpj5v5asmd_test.go:47: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpj5v5asmd_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpj5v5asmd_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpj5v5asmd_test.go:47: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var tmp int\n    for _, v := range\
    \ music_string {\n        if v == 'o' {\n            tmp = 4\n        } else if\
    \ v == '|' {\n            tmp = tmp / 2\n        } else if v == '.' {\n      \
    \      tmp = tmp / 2\n        }\n        result = append(result, tmp)\n    }\n\
    \    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpkrwmx9nk_test.go:50: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpkrwmx9nk_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpkrwmx9nk_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpkrwmx9nk_test.go:50: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    var beat int\n    for _, c := range\
    \ music_string {\n        switch c {\n        case 'o':\n            beat = 4\n\
    \        case '|':\n            beat = beat / 2\n        case '.':\n         \
    \   beat = beat / 2\n        }\n        beats = append(beats, beat)\n    }\n \
    \   return beats\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmphlu2hyd2_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmphlu2hyd2_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmphlu2hyd2_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmphlu2hyd2_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // your code here\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp0uienu10_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp0uienu10_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp0uienu10_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp0uienu10_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var beats []int\n    var beat int\n    for _, char := range\
    \ music_string {\n        switch char {\n        case 'o':\n            beat =\
    \ 4\n        case '|':\n            beat = beat / 2\n        case '.':\n     \
    \       beat = beat / 2\n        }\n        beats = append(beats, beat)\n    }\n\
    \    return beats\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp0a_ilw2c_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmp0a_ilw2c_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp0a_ilw2c_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmp0a_ilw2c_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return []int{}\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpa9o8cl_u_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpa9o8cl_u_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpa9o8cl_u_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_beat int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_beat = 4\n        case '|':\n            result = append(result,\
    \ current_beat)\n            current_beat = 0\n        case '.':\n           \
    \ current_beat = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp3p5_cro6_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp3p5_cro6_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp3p5_cro6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp9fpcny5i_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp9fpcny5i_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp9fpcny5i_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp9fpcny5i_test.go:39: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var beat int\n    for _, char :=\
    \ range music_string {\n        switch char {\n        case 'o':\n           \
    \ beat = 4\n        case '|':\n            beat = beat / 2\n        case '.':\n\
    \            beat = beat / 2\n        }\n        result = append(result, beat)\n\
    \    }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpc3gtbzns_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n        tmpc3gtbzns_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpc3gtbzns_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n\
    \        tmpc3gtbzns_test.go:51: expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 0
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                result = append(result, 2)\n\
    \                i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        } else if music_string[i] == '.' {\n            result\
    \ = append(result, 1)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current int\n    for _, c :=\
    \ range music_string {\n        switch c {\n        case 'o':\n            current\
    \ = 4\n        case '|':\n            result = append(result, current)\n     \
    \       current = 0\n        case '.':\n            current = 1\n        }\n \
    \   }\n    return result\n}\n\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp585q6ktm_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmp585q6ktm_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmp585q6ktm_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    return nil\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmp2sg7svbh_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmp2sg7svbh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmp2sg7svbh_test.go:38: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string\
    \ string) []int {\n    var result []int\n    var current_note int\n    for _,\
    \ char := range music_string {\n        switch char {\n        case 'o':\n   \
    \         current_note = 4\n        case '|':\n            result = append(result,\
    \ current_note)\n            current_note = 0\n        case '.':\n           \
    \ current_note = 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpm3qp5p5o_test.go:51: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n\
    \        tmpm3qp5p5o_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Music/test_num__4 (0.00s)\n        tmpm3qp5p5o_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=2)]', got '[%!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
