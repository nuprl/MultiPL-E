name: HumanEval_47_median
language: go_test.go
prompt: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>>\
  \ median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64 {\n"
tests: "func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
  \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
  \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n    \
  \ { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement median function\n    return 0.0\n}\n", "   \
    \ // TODO: implement me!\n    return 0.0\n}\n", "    // TODO: implement this function.\n\
    \    return 0.0\n}\n", "    // TODO: implement this function\n    return 0.0\n\
    }\n", "    // TODO: implement this function.\n    return 0.0\n}\n", "    // TODO:\
    \ implement this function.\n    return 0.0\n}\n", "    // TODO: implement\n  \
    \  return 0.0\n}\n", "    // TODO: implement this function\n    return 0.0\n}\n",
  "    // TODO: implement this function\n    return 0.0\n}\n", "    // TODO: implement\
    \ this function\n    return 0.0\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n", "    // TODO: implement median function.\n    return\
    \ 0.0\n}\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return float64(l[0])\n    }\n    if n % 2 == 0 {\n       \
    \ return float64(l[n/2-1]+l[n/2]) / 2\n    }\n    return float64(l[n/2])\n}\n",
  "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n \
    \       return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n", "    // TODO: implement median\n\
    \    return 0.0\n}\n", "    // TODO: implement this function.\n    return 0.0\n\
    }\n", "    // TODO: implement this function\n    return 0.0\n}\n", "    // TODO:\
    \ implement this function\n    return 0.0\n}\n", "    // TODO: implement this\
    \ function\n    return 0.0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
