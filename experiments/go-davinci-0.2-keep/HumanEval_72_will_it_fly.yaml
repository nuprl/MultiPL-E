name: HumanEval_72_will_it_fly
language: go_test.go
prompt: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that returns True if the object q will fly, and False otherwise.\n\
  // The object q will fly if it's balanced (it is a palindromic list) and the sum\
  \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
  // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
  \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// #\
  \ it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
  \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and\
  \ it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
  \ possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\n"
tests: "func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n    \
  \ { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3},\
  \ 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected:\
  \ false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n  \
  \   { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // Write your code here\n    return false\n}\n", "    // Write\
    \ your code here\n    return false\n}\n", "    // Write code here\n    return\
    \ false\n}\n", "    // Write your code here\n    return false\n}\n", "    sum\
    \ := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n\
    \        return false\n    }\n    for i := 0; i < len(q) / 2; i++ {\n        if\
    \ q[i] != q[len(q) - i - 1] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n", "    // Write your code here\n    return false\n}\n", " \
    \   var sum int\n    for _, v := range q {\n        sum += v\n    }\n    if sum\
    \ > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n  \
    \      if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    // your code here\n    return false\n}\n", "    //\
    \ your code here\n    return false\n}\n", "    // your code here\n    return false\n\
    }\n", "    // Write your code here\n    return false\n}\n", "    // Write your\
    \ code here\n    return false\n}\n", "    var sum int\n    for _, v := range q\
    \ {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n\
    \    for i, j := 0, len(q)-1; i < j; i, j = i+1, j-1 {\n        if q[i] != q[j]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    sum\
    \ := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n\
    \        return false\n    }\n    for i := 0; i < len(q) / 2; i++ {\n        if\
    \ q[i] != q[len(q) - i - 1] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n", "    if len(q) == 0 {\n        return false\n    }\n   \
    \ if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n       \
    \ return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) % 2 == 1 {\n        var sum int\n        for _, v := range q {\n\
    \            sum += v\n        }\n        if sum > w {\n            return false\n\
    \        }\n        if sum <= w {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    // your code here\n    return false\n}\n", "   \
    \ // your code here\n    return false\n}\n", "    // Write your code here\n  \
    \  return false\n}\n", "    // Write your code here\n    return false\n}\n", " \
    \   // your code here\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
