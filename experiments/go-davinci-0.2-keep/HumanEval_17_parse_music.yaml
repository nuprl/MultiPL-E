name: HumanEval_17_parse_music
language: go_test.go
prompt: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Input to this function is a string representing musical notes in a special ASCII\
  \ format.\n// Your task is to parse this string and return list of integers corresponding\
  \ to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole\
  \ note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater\
  \ note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n//\
  \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string string) []int\
  \ {\n"
tests: "func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
  \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
  .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o|\
  \ .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
  o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    var current_beat int\n    for _, char :=\
    \ range music_string {\n        switch char {\n        case 'o':\n           \
    \ current_beat = 4\n        case '|':\n            current_beat /= 2\n       \
    \ case '.':\n            result = append(result, current_beat)\n        }\n  \
    \  }\n    return result\n}\n", "    return []int{}\n}\n", "    var result []int\n\
    \    var current_note int\n    var current_note_length int\n    for _, char :=\
    \ range music_string {\n        switch char {\n            case 'o':\n       \
    \         current_note_length = 4\n            case '|':\n                current_note_length\
    \ = 2\n            case '.':\n                current_note_length = 1\n      \
    \      default:\n                continue\n        }\n        if current_note\
    \ == 0 {\n            current_note = current_note_length\n        } else {\n \
    \           result = append(result, current_note)\n            current_note =\
    \ current_note_length\n        }\n    }\n    result = append(result, current_note)\n\
    \    return result\n}\n", "    return []int{}\n}\n", "    var beats []int\n  \
    \  var beat int\n    for _, char := range music_string {\n        switch char\
    \ {\n        case 'o':\n            beat = 4\n        case '|':\n            beat\
    \ /= 2\n        case '.':\n            beat--\n        }\n        beats = append(beats,\
    \ beat)\n    }\n    return beats\n}\n", "    return []int{}\n}\n", "    var result\
    \ []int\n    var current_beat int\n    for _, char := range music_string {\n \
    \       if char == 'o' {\n            current_beat = 4\n        } else if char\
    \ == '|' {\n            current_beat = current_beat / 2\n        } else if char\
    \ == '.' {\n            result = append(result, current_beat)\n        }\n   \
    \ }\n    return result\n}\n", "    var result []int\n    var note_length int\n\
    \    var note_count int\n    for _, char := range music_string {\n        switch\
    \ char {\n        case 'o':\n            note_length = 4\n            note_count\
    \ = 1\n        case '|':\n            note_count += 1\n        case '.':\n   \
    \         note_length = 1\n            note_count = 1\n        case ' ':\n   \
    \         result = append(result, note_length * note_count)\n            note_count\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ current_note int\n    for _, char := range music_string {\n        switch char\
    \ {\n        case 'o':\n            current_note = 4\n        case '|':\n    \
    \        result = append(result, current_note)\n            current_note = 0\n\
    \        case '.':\n            current_note = 1\n        }\n    }\n    return\
    \ result\n}\n", "    return []int{}\n}\n", "    var result []int\n    var i int\n\
    \    for i = 0; i < len(music_string); i++ {\n        if music_string[i] == 'o'\
    \ {\n            if i + 1 < len(music_string) && music_string[i + 1] == '|' {\n\
    \                result = append(result, 2)\n                i++\n           \
    \ } else {\n                result = append(result, 4)\n            }\n      \
    \  } else if music_string[i] == '.' {\n            result = append(result, 1)\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ []int{}\n}\n", "    var result []int\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            result = append(result,\
    \ 4)\n        case '|':\n            result = append(result, 2)\n        case\
    \ '.':\n            result = append(result, 1)\n        }\n    }\n    return result\n\
    }\n", "    return []int{}\n}\n", "    return nil\n}\n", "    var result []int\n\
    \    var current_note int\n    for _, char := range music_string {\n        switch\
    \ char {\n        case 'o':\n            current_note = 4\n        case '|':\n\
    \            result = append(result, current_note)\n            current_note =\
    \ 0\n        case '.':\n            current_note = 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var last_char byte\n    var count int\n\
    \    for i := 0; i < len(music_string); i++ {\n        if music_string[i] == '\
    \ ' {\n            continue\n        }\n        if music_string[i] == 'o' {\n\
    \            if last_char == 'o' {\n                count++\n            } else\
    \ {\n                count = 1\n            }\n            last_char = 'o'\n \
    \       } else {\n            if last_char == 'o' {\n                result =\
    \ append(result, count * 4)\n                count = 0\n            }\n      \
    \      if last_char == '.' {\n                count++\n            } else {\n\
    \                count = 1\n            }\n            last_char = '.'\n     \
    \   }\n    }\n    if last_char == 'o' {\n        result = append(result, count\
    \ * 4)\n    } else {\n        result = append(result, count)\n    }\n    return\
    \ result\n}\n", "    return []int{}\n}\n", "    var result []int\n    var current_beat\
    \ int\n    for _, char := range music_string {\n        if char == 'o' {\n   \
    \         current_beat = 4\n        } else if char == '|' {\n            current_beat\
    \ = current_beat / 2\n        } else if char == '.' {\n            result = append(result,\
    \ current_beat)\n        }\n    }\n    return result\n}\n", "    // Your code\
    \ here\n    return []int{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
